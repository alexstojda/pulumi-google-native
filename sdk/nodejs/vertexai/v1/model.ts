// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class Model extends pulumi.CustomResource {
    /**
     * Get an existing Model resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Model {
        return new Model(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:vertexai/v1:Model';

    /**
     * Returns true if the given object is an instance of Model.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Model {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Model.__pulumiType;
    }

    /**
     * Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not present for AutoML Models.
     */
    public readonly artifactUri!: pulumi.Output<string | undefined>;
    /**
     * The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not present for AutoML Models.
     */
    public readonly containerSpec!: pulumi.Output<outputs.vertexai.v1.ModelContainerSpec | undefined>;
    /**
     * Output only. Timestamp when this Model was uploaded into Vertex AI.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string | undefined>;
    /**
     * Output only. The pointers to DeployedModels created from this Model. Note that Model could have been deployed to Endpoints in different Locations.
     */
    public /*out*/ readonly deployedModels!: pulumi.Output<outputs.vertexai.v1.ModelDeployedModels[] | undefined>;
    /**
     * The description of the Model.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Required. The display name of the Model. The name can be up to 128 characters long and can be consist of any UTF-8 characters.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
     */
    public readonly encryptionSpec!: pulumi.Output<outputs.vertexai.v1.ModelEncryptionSpec | undefined>;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    public /*out*/ readonly etag!: pulumi.Output<string | undefined>;
    /**
     * The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    public readonly labels!: pulumi.Output<outputs.vertexai.v1.Labels | undefined>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The resource name of the Model.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Output only. If this Model is a copy of another Model, this contains info about the original.
     */
    public /*out*/ readonly originalModelInfo!: pulumi.Output<outputs.vertexai.v1.ModelOriginalModelInfo | undefined>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * Output only. When this Model is deployed, its prediction resources are described by the `prediction_resources` field of the Endpoint.deployed_models object. Because not all Models support all resource configuration types, the configuration types this Model supports are listed here. If no configuration types are listed, the Model cannot be deployed to an Endpoint and does not support online predictions (PredictionService.Predict or PredictionService.Explain). Such a Model can serve predictions by using a BatchPredictionJob, if it has at least one entry each in supported_input_storage_formats and supported_output_storage_formats.
     */
    public /*out*/ readonly supportedDeploymentResourcesTypes!: pulumi.Output<enums.vertexai.v1.ModelSupportedDeploymentResourcesTypesEnum[] | undefined>;
    /**
     * Output only. The formats in which this Model may be exported. If empty, this Model is not available for export.
     */
    public /*out*/ readonly supportedExportFormats!: pulumi.Output<outputs.vertexai.v1.ModelSupportedExportFormats[] | undefined>;
    /**
     * Output only. The formats this Model supports in BatchPredictionJob.input_config. If PredictSchemata.instance_schema_uri exists, the instances should be given as per that schema. The possible formats are: * `jsonl` The JSON Lines format, where each instance is a single line. Uses GcsSource. * `csv` The CSV format, where each instance is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsSource. * `tf-record` The TFRecord format, where each instance is a single record in tfrecord syntax. Uses GcsSource. * `tf-record-gzip` Similar to `tf-record`, but the file is gzipped. Uses GcsSource. * `bigquery` Each instance is a single row in BigQuery. Uses BigQuerySource. * `file-list` Each line of the file is the location of an instance to process, uses `gcs_source` field of the InputConfig object. If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain. TODO(rsurowka): Give a link describing how OpenAPI schema instances are expressed in JSONL and BigQuery. TODO(rsurowka): Should we provide a schema for TFRecord? Or maybe say that at least for now TFRecord input is not supported via schemata (that would also simplify giving them back as part of predictions). TODO(rsurowka): Define CSV format (decide how much we want to support). E.g. no nesting? Or no arrays, or no nested arrays? E.g. https://json-csv.com/ seems to be able to do pretty advanced conversions, but we may decide to make it relatively simple for now.
     */
    public /*out*/ readonly supportedInputStorageFormats!: pulumi.Output<string[] | undefined>;
    /**
     * Output only. The formats this Model supports in BatchPredictionJob.output_config. If both PredictSchemata.instance_schema_uri and PredictSchemata.prediction_schema_uri exist, the predictions are returned together with their instances. In other words, the prediction has the original instance data first, followed by the actual prediction content (as per the schema). The possible formats are: * `jsonl` The JSON Lines format, where each prediction is a single line. Uses GcsDestination. * `csv` The CSV format, where each prediction is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsDestination. * `bigquery` Each prediction is a single row in a BigQuery table, uses BigQueryDestination . If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain. TODO(rsurowka): Analogous TODOs as for instances field above.
     */
    public /*out*/ readonly supportedOutputStorageFormats!: pulumi.Output<string[] | undefined>;
    /**
     * Output only. The resource name of the TrainingPipeline that uploaded this Model, if any.
     */
    public /*out*/ readonly trainingPipeline!: pulumi.Output<string | undefined>;
    /**
     * Output only. Timestamp when this Model was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string | undefined>;
    /**
     * Output only. Timestamp when this version was created.
     */
    public /*out*/ readonly versionCreateTime!: pulumi.Output<string | undefined>;
    /**
     * The description of this version.
     */
    public readonly versionDescription!: pulumi.Output<string | undefined>;
    /**
     * Output only. Immutable. The version ID of the model. A new version is committed when a new model version is uploaded or trained under an existing model id. It is an auto-incrementing decimal number in string representation.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string | undefined>;
    /**
     * Output only. Timestamp when this version was most recently updated.
     */
    public /*out*/ readonly versionUpdateTime!: pulumi.Output<string | undefined>;

    /**
     * Create a Model resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.containerSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerSpec'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["artifactUri"] = args ? args.artifactUri : undefined;
            resourceInputs["containerSpec"] = args ? args.containerSpec : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encryptionSpec"] = args ? args.encryptionSpec : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["versionDescription"] = args ? args.versionDescription : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deployedModels"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["originalModelInfo"] = undefined /*out*/;
            resourceInputs["supportedDeploymentResourcesTypes"] = undefined /*out*/;
            resourceInputs["supportedExportFormats"] = undefined /*out*/;
            resourceInputs["supportedInputStorageFormats"] = undefined /*out*/;
            resourceInputs["supportedOutputStorageFormats"] = undefined /*out*/;
            resourceInputs["trainingPipeline"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionCreateTime"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["versionUpdateTime"] = undefined /*out*/;
        } else {
            resourceInputs["artifactUri"] = undefined /*out*/;
            resourceInputs["containerSpec"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deployedModels"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["encryptionSpec"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["originalModelInfo"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["supportedDeploymentResourcesTypes"] = undefined /*out*/;
            resourceInputs["supportedExportFormats"] = undefined /*out*/;
            resourceInputs["supportedInputStorageFormats"] = undefined /*out*/;
            resourceInputs["supportedOutputStorageFormats"] = undefined /*out*/;
            resourceInputs["trainingPipeline"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionCreateTime"] = undefined /*out*/;
            resourceInputs["versionDescription"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["versionUpdateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["artifactUri", "containerSpec", "createTime", "deployedModels[*]", "encryptionSpec", "etag", "location", "name", "originalModelInfo", "project", "supportedDeploymentResourcesTypes[*]", "supportedExportFormats[*]", "supportedInputStorageFormats[*]", "supportedOutputStorageFormats[*]", "trainingPipeline", "updateTime", "versionCreateTime", "versionDescription", "versionId", "versionUpdateTime"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Model.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Model resource.
 */
export interface ModelArgs {
    /**
     * Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not present for AutoML Models.
     */
    artifactUri?: pulumi.Input<string>;
    /**
     * The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not present for AutoML Models.
     */
    containerSpec: pulumi.Input<inputs.vertexai.v1.ModelContainerSpecArgs>;
    /**
     * The description of the Model.
     */
    description?: pulumi.Input<string>;
    /**
     * Required. The display name of the Model. The name can be up to 128 characters long and can be consist of any UTF-8 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
     */
    encryptionSpec?: pulumi.Input<inputs.vertexai.v1.ModelEncryptionSpecArgs>;
    /**
     * The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    labels?: pulumi.Input<inputs.vertexai.v1.LabelsArgs>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * The resource name of the Model.
     */
    name?: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project: pulumi.Input<string>;
    /**
     * The description of this version.
     */
    versionDescription?: pulumi.Input<string>;
}
