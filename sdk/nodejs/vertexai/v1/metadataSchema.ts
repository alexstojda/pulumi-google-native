// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class MetadataSchema extends pulumi.CustomResource {
    /**
     * Get an existing MetadataSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MetadataSchema {
        return new MetadataSchema(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:vertexai/v1:MetadataSchema';

    /**
     * Returns true if the given object is an instance of MetadataSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetadataSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetadataSchema.__pulumiType;
    }

    /**
     * Output only. Timestamp when this MetadataSchema was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string | undefined>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The metadata store for the resource
     */
    public readonly metadataStore!: pulumi.Output<string | undefined>;
    /**
     * Output only. The resource name of the MetadataSchema.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
     */
    public readonly schema!: pulumi.Output<string | undefined>;
    /**
     * The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: METADATA_SCHEMA_TYPE_UNSPECIFIED, ARTIFACT_TYPE, EXECUTION_TYPE, CONTEXT_TYPE
     */
    public readonly schemaType!: pulumi.Output<enums.vertexai.v1.MetadataSchemaSchemaTypeEnum | undefined>;
    /**
     * The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
     */
    public readonly schemaVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a MetadataSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataSchemaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.metadataStore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadataStore'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.schemaType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaType'");
            }
            if ((!args || args.schemaVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaVersion'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metadataStore"] = args ? args.metadataStore : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["schemaType"] = args ? args.schemaType : undefined;
            resourceInputs["schemaVersion"] = args ? args.schemaVersion : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["metadataStore"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["schemaType"] = undefined /*out*/;
            resourceInputs["schemaVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["createTime", "location", "metadataStore", "name", "project", "schema", "schemaType", "schemaVersion"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(MetadataSchema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MetadataSchema resource.
 */
export interface MetadataSchemaArgs {
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * The metadata store for the resource
     */
    metadataStore: pulumi.Input<string>;
    /**
     * Output only. The resource name of the MetadataSchema.
     */
    name: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project: pulumi.Input<string>;
    /**
     * Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
     */
    schema: pulumi.Input<string>;
    /**
     * The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: METADATA_SCHEMA_TYPE_UNSPECIFIED, ARTIFACT_TYPE, EXECUTION_TYPE, CONTEXT_TYPE
     */
    schemaType: pulumi.Input<enums.vertexai.v1.MetadataSchemaSchemaTypeEnum>;
    /**
     * The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
     */
    schemaVersion: pulumi.Input<string>;
}
