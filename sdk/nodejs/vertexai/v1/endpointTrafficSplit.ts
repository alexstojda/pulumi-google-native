// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export class EndpointTrafficSplit extends pulumi.CustomResource {
    /**
     * Get an existing EndpointTrafficSplit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EndpointTrafficSplit {
        return new EndpointTrafficSplit(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:vertexai/v1:EndpointTrafficSplit';

    /**
     * Returns true if the given object is an instance of EndpointTrafficSplit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointTrafficSplit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointTrafficSplit.__pulumiType;
    }

    /**
     * The endpoint for the resource
     */
    public readonly endpoint!: pulumi.Output<string | undefined>;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    public /*out*/ readonly etag!: pulumi.Output<string | undefined>;
    /**
     * The location for the resource
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The project for the resource
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
     */
    public readonly trafficSplit!: pulumi.Output<outputs.vertexai.v1.EndpointTrafficSplitTrafficSplit[] | undefined>;

    /**
     * Create a EndpointTrafficSplit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointTrafficSplitArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.trafficSplit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficSplit'");
            }
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["trafficSplit"] = args ? args.trafficSplit : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        } else {
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["trafficSplit"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["endpoint", "etag", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(EndpointTrafficSplit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EndpointTrafficSplit resource.
 */
export interface EndpointTrafficSplitArgs {
    /**
     * The endpoint for the resource
     */
    endpoint: pulumi.Input<string>;
    /**
     * The location for the resource
     */
    location: pulumi.Input<string>;
    /**
     * The project for the resource
     */
    project: pulumi.Input<string>;
    /**
     * A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
     */
    trafficSplit: pulumi.Input<pulumi.Input<inputs.vertexai.v1.EndpointTrafficSplitTrafficSplitArgs>[]>;
}
