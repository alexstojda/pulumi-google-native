// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MetadataStore struct {
	pulumi.CustomResourceState

	// Output only. Timestamp when this MetadataStore was created.
	CreateTime pulumi.StringPtrOutput `pulumi:"createTime"`
	// Description of the MetadataStore.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
	EncryptionSpec MetadataStoreEncryptionSpecPtrOutput `pulumi:"encryptionSpec"`
	// The location for the resource
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name of the MetadataStore instance.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The project for the resource
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// Output only. State information of the MetadataStore.
	State MetadataStoreStateTypePtrOutput `pulumi:"state"`
	// Output only. Timestamp when this MetadataStore was last updated.
	UpdateTime pulumi.StringPtrOutput `pulumi:"updateTime"`
}

// NewMetadataStore registers a new resource with the given unique name, arguments, and options.
func NewMetadataStore(ctx *pulumi.Context,
	name string, args *MetadataStoreArgs, opts ...pulumi.ResourceOption) (*MetadataStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"createTime",
		"description",
		"encryptionSpec",
		"location",
		"name",
		"project",
		"state",
		"updateTime",
	})
	opts = append(opts, replaceOnChanges)
	var resource MetadataStore
	err := ctx.RegisterResource("google-native:vertexai/v1:MetadataStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetadataStore gets an existing MetadataStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetadataStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetadataStoreState, opts ...pulumi.ResourceOption) (*MetadataStore, error) {
	var resource MetadataStore
	err := ctx.ReadResource("google-native:vertexai/v1:MetadataStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetadataStore resources.
type metadataStoreState struct {
}

type MetadataStoreState struct {
}

func (MetadataStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataStoreState)(nil)).Elem()
}

type metadataStoreArgs struct {
	// Description of the MetadataStore.
	Description *string `pulumi:"description"`
	// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
	EncryptionSpec *MetadataStoreEncryptionSpec `pulumi:"encryptionSpec"`
	// The location for the resource
	Location string `pulumi:"location"`
	// The resource name of the MetadataStore instance.
	Name string `pulumi:"name"`
	// The project for the resource
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a MetadataStore resource.
type MetadataStoreArgs struct {
	// Description of the MetadataStore.
	Description pulumi.StringPtrInput
	// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
	EncryptionSpec MetadataStoreEncryptionSpecPtrInput
	// The location for the resource
	Location pulumi.StringInput
	// The resource name of the MetadataStore instance.
	Name pulumi.StringInput
	// The project for the resource
	Project pulumi.StringInput
}

func (MetadataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataStoreArgs)(nil)).Elem()
}

type MetadataStoreInput interface {
	pulumi.Input

	ToMetadataStoreOutput() MetadataStoreOutput
	ToMetadataStoreOutputWithContext(ctx context.Context) MetadataStoreOutput
}

func (*MetadataStore) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataStore)(nil)).Elem()
}

func (i *MetadataStore) ToMetadataStoreOutput() MetadataStoreOutput {
	return i.ToMetadataStoreOutputWithContext(context.Background())
}

func (i *MetadataStore) ToMetadataStoreOutputWithContext(ctx context.Context) MetadataStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataStoreOutput)
}

type MetadataStoreOutput struct{ *pulumi.OutputState }

func (MetadataStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataStore)(nil)).Elem()
}

func (o MetadataStoreOutput) ToMetadataStoreOutput() MetadataStoreOutput {
	return o
}

func (o MetadataStoreOutput) ToMetadataStoreOutputWithContext(ctx context.Context) MetadataStoreOutput {
	return o
}

// Output only. Timestamp when this MetadataStore was created.
func (o MetadataStoreOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStore) pulumi.StringPtrOutput { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Description of the MetadataStore.
func (o MetadataStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
func (o MetadataStoreOutput) EncryptionSpec() MetadataStoreEncryptionSpecPtrOutput {
	return o.ApplyT(func(v *MetadataStore) MetadataStoreEncryptionSpecPtrOutput { return v.EncryptionSpec }).(MetadataStoreEncryptionSpecPtrOutput)
}

// The location for the resource
func (o MetadataStoreOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStore) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name of the MetadataStore instance.
func (o MetadataStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStore) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The project for the resource
func (o MetadataStoreOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStore) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// Output only. State information of the MetadataStore.
func (o MetadataStoreOutput) State() MetadataStoreStateTypePtrOutput {
	return o.ApplyT(func(v *MetadataStore) MetadataStoreStateTypePtrOutput { return v.State }).(MetadataStoreStateTypePtrOutput)
}

// Output only. Timestamp when this MetadataStore was last updated.
func (o MetadataStoreOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStore) pulumi.StringPtrOutput { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataStoreInput)(nil)).Elem(), &MetadataStore{})
	pulumi.RegisterOutputType(MetadataStoreOutput{})
}
