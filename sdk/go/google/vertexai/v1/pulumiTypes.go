// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EndpointDeployedModels struct {
	// A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
	AutomaticResources *EndpointDeployedModelsAutomaticResources `pulumi:"automaticResources"`
	// Output only. Timestamp when the DeployedModel was created.
	CreateTime *string `pulumi:"createTime"`
	// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
	DedicatedResources *EndpointDeployedModelsDedicatedResources `pulumi:"dedicatedResources"`
	// The display name of the DeployedModel. If not provided upon creation, the Model's display_name is used.
	DisplayName *string `pulumi:"displayName"`
	// These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that Stackdriver logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
	EnableAccessLogging *bool `pulumi:"enableAccessLogging"`
	// The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are /[0-9]/.
	Id *string `pulumi:"id"`
	// The name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint.
	Model *string `pulumi:"model"`
	// Output only. The version ID of the model that is deployed.
	ModelVersionId *string `pulumi:"modelVersionId"`
	// Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
	PrivateEndpoints *EndpointDeployedModelsPrivateEndpoints `pulumi:"privateEndpoints"`
	// The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

type EndpointDeployedModelsOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeployedModels)(nil)).Elem()
}

func (o EndpointDeployedModelsOutput) ToEndpointDeployedModelsOutput() EndpointDeployedModelsOutput {
	return o
}

func (o EndpointDeployedModelsOutput) ToEndpointDeployedModelsOutputWithContext(ctx context.Context) EndpointDeployedModelsOutput {
	return o
}

// A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
func (o EndpointDeployedModelsOutput) AutomaticResources() EndpointDeployedModelsAutomaticResourcesPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *EndpointDeployedModelsAutomaticResources { return v.AutomaticResources }).(EndpointDeployedModelsAutomaticResourcesPtrOutput)
}

// Output only. Timestamp when the DeployedModel was created.
func (o EndpointDeployedModelsOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
func (o EndpointDeployedModelsOutput) DedicatedResources() EndpointDeployedModelsDedicatedResourcesPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *EndpointDeployedModelsDedicatedResources { return v.DedicatedResources }).(EndpointDeployedModelsDedicatedResourcesPtrOutput)
}

// The display name of the DeployedModel. If not provided upon creation, the Model's display_name is used.
func (o EndpointDeployedModelsOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that Stackdriver logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
func (o EndpointDeployedModelsOutput) EnableAccessLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *bool { return v.EnableAccessLogging }).(pulumi.BoolPtrOutput)
}

// The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are /[0-9]/.
func (o EndpointDeployedModelsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint.
func (o EndpointDeployedModelsOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// Output only. The version ID of the model that is deployed.
func (o EndpointDeployedModelsOutput) ModelVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *string { return v.ModelVersionId }).(pulumi.StringPtrOutput)
}

// Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
func (o EndpointDeployedModelsOutput) PrivateEndpoints() EndpointDeployedModelsPrivateEndpointsPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *EndpointDeployedModelsPrivateEndpoints { return v.PrivateEndpoints }).(EndpointDeployedModelsPrivateEndpointsPtrOutput)
}

// The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
func (o EndpointDeployedModelsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModels) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

type EndpointDeployedModelsArrayOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointDeployedModels)(nil)).Elem()
}

func (o EndpointDeployedModelsArrayOutput) ToEndpointDeployedModelsArrayOutput() EndpointDeployedModelsArrayOutput {
	return o
}

func (o EndpointDeployedModelsArrayOutput) ToEndpointDeployedModelsArrayOutputWithContext(ctx context.Context) EndpointDeployedModelsArrayOutput {
	return o
}

func (o EndpointDeployedModelsArrayOutput) Index(i pulumi.IntInput) EndpointDeployedModelsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointDeployedModels {
		return vs[0].([]EndpointDeployedModels)[vs[1].(int)]
	}).(EndpointDeployedModelsOutput)
}

// A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
type EndpointDeployedModelsAutomaticResources struct {
	// The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
	MaxReplicaCount *int `pulumi:"maxReplicaCount"`
	// The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
	MinReplicaCount *int `pulumi:"minReplicaCount"`
}

// A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
type EndpointDeployedModelsAutomaticResourcesOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsAutomaticResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeployedModelsAutomaticResources)(nil)).Elem()
}

func (o EndpointDeployedModelsAutomaticResourcesOutput) ToEndpointDeployedModelsAutomaticResourcesOutput() EndpointDeployedModelsAutomaticResourcesOutput {
	return o
}

func (o EndpointDeployedModelsAutomaticResourcesOutput) ToEndpointDeployedModelsAutomaticResourcesOutputWithContext(ctx context.Context) EndpointDeployedModelsAutomaticResourcesOutput {
	return o
}

// The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
func (o EndpointDeployedModelsAutomaticResourcesOutput) MaxReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsAutomaticResources) *int { return v.MaxReplicaCount }).(pulumi.IntPtrOutput)
}

// The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
func (o EndpointDeployedModelsAutomaticResourcesOutput) MinReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsAutomaticResources) *int { return v.MinReplicaCount }).(pulumi.IntPtrOutput)
}

type EndpointDeployedModelsAutomaticResourcesPtrOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsAutomaticResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointDeployedModelsAutomaticResources)(nil)).Elem()
}

func (o EndpointDeployedModelsAutomaticResourcesPtrOutput) ToEndpointDeployedModelsAutomaticResourcesPtrOutput() EndpointDeployedModelsAutomaticResourcesPtrOutput {
	return o
}

func (o EndpointDeployedModelsAutomaticResourcesPtrOutput) ToEndpointDeployedModelsAutomaticResourcesPtrOutputWithContext(ctx context.Context) EndpointDeployedModelsAutomaticResourcesPtrOutput {
	return o
}

func (o EndpointDeployedModelsAutomaticResourcesPtrOutput) Elem() EndpointDeployedModelsAutomaticResourcesOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsAutomaticResources) EndpointDeployedModelsAutomaticResources {
		if v != nil {
			return *v
		}
		var ret EndpointDeployedModelsAutomaticResources
		return ret
	}).(EndpointDeployedModelsAutomaticResourcesOutput)
}

// The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
func (o EndpointDeployedModelsAutomaticResourcesPtrOutput) MaxReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsAutomaticResources) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicaCount
	}).(pulumi.IntPtrOutput)
}

// The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
func (o EndpointDeployedModelsAutomaticResourcesPtrOutput) MinReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsAutomaticResources) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicaCount
	}).(pulumi.IntPtrOutput)
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
type EndpointDeployedModelsDedicatedResources struct {
	// The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
	AutoscalingMetricSpecs []EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs `pulumi:"autoscalingMetricSpecs"`
	// The specification of a single machine used by the prediction.
	MachineSpec *EndpointDeployedModelsDedicatedResourcesMachineSpec `pulumi:"machineSpec"`
	// The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
	MaxReplicaCount *int `pulumi:"maxReplicaCount"`
	// The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
	MinReplicaCount *int `pulumi:"minReplicaCount"`
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
type EndpointDeployedModelsDedicatedResourcesOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsDedicatedResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeployedModelsDedicatedResources)(nil)).Elem()
}

func (o EndpointDeployedModelsDedicatedResourcesOutput) ToEndpointDeployedModelsDedicatedResourcesOutput() EndpointDeployedModelsDedicatedResourcesOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesOutput) ToEndpointDeployedModelsDedicatedResourcesOutputWithContext(ctx context.Context) EndpointDeployedModelsDedicatedResourcesOutput {
	return o
}

// The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
func (o EndpointDeployedModelsDedicatedResourcesOutput) AutoscalingMetricSpecs() EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResources) []EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs {
		return v.AutoscalingMetricSpecs
	}).(EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput)
}

// The specification of a single machine used by the prediction.
func (o EndpointDeployedModelsDedicatedResourcesOutput) MachineSpec() EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResources) *EndpointDeployedModelsDedicatedResourcesMachineSpec {
		return v.MachineSpec
	}).(EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput)
}

// The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
func (o EndpointDeployedModelsDedicatedResourcesOutput) MaxReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResources) *int { return v.MaxReplicaCount }).(pulumi.IntPtrOutput)
}

// The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
func (o EndpointDeployedModelsDedicatedResourcesOutput) MinReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResources) *int { return v.MinReplicaCount }).(pulumi.IntPtrOutput)
}

type EndpointDeployedModelsDedicatedResourcesPtrOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsDedicatedResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointDeployedModelsDedicatedResources)(nil)).Elem()
}

func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) ToEndpointDeployedModelsDedicatedResourcesPtrOutput() EndpointDeployedModelsDedicatedResourcesPtrOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) ToEndpointDeployedModelsDedicatedResourcesPtrOutputWithContext(ctx context.Context) EndpointDeployedModelsDedicatedResourcesPtrOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) Elem() EndpointDeployedModelsDedicatedResourcesOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResources) EndpointDeployedModelsDedicatedResources {
		if v != nil {
			return *v
		}
		var ret EndpointDeployedModelsDedicatedResources
		return ret
	}).(EndpointDeployedModelsDedicatedResourcesOutput)
}

// The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) AutoscalingMetricSpecs() EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResources) []EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs {
		if v == nil {
			return nil
		}
		return v.AutoscalingMetricSpecs
	}).(EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput)
}

// The specification of a single machine used by the prediction.
func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) MachineSpec() EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResources) *EndpointDeployedModelsDedicatedResourcesMachineSpec {
		if v == nil {
			return nil
		}
		return v.MachineSpec
	}).(EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput)
}

// The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) MaxReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResources) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicaCount
	}).(pulumi.IntPtrOutput)
}

// The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
func (o EndpointDeployedModelsDedicatedResourcesPtrOutput) MinReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResources) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicaCount
	}).(pulumi.IntPtrOutput)
}

type EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs struct {
	// The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
	MetricName *string `pulumi:"metricName"`
	// The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
	Target *int `pulumi:"target"`
}

type EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs)(nil)).Elem()
}

func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput) ToEndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput() EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput) ToEndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutputWithContext(ctx context.Context) EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput {
	return o
}

// The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput) Target() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs) *int { return v.Target }).(pulumi.IntPtrOutput)
}

type EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs)(nil)).Elem()
}

func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput) ToEndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput() EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput) ToEndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutputWithContext(ctx context.Context) EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput) Index(i pulumi.IntInput) EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs {
		return vs[0].([]EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecs)[vs[1].(int)]
	}).(EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput)
}

// The specification of a single machine used by the prediction.
type EndpointDeployedModelsDedicatedResourcesMachineSpec struct {
	// The number of accelerators to attach to the machine.
	AcceleratorCount *int `pulumi:"acceleratorCount"`
	// The type of accelerator(s) that may be attached to the machine as per accelerator_count. Possible values: ACCELERATOR_TYPE_UNSPECIFIED, NVIDIA_TESLA_K80, NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_A100, TPU_V2, TPU_V3
	AcceleratorType *EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnum `pulumi:"acceleratorType"`
	// The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
	MachineType *string `pulumi:"machineType"`
}

// The specification of a single machine used by the prediction.
type EndpointDeployedModelsDedicatedResourcesMachineSpecOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsDedicatedResourcesMachineSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeployedModelsDedicatedResourcesMachineSpec)(nil)).Elem()
}

func (o EndpointDeployedModelsDedicatedResourcesMachineSpecOutput) ToEndpointDeployedModelsDedicatedResourcesMachineSpecOutput() EndpointDeployedModelsDedicatedResourcesMachineSpecOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesMachineSpecOutput) ToEndpointDeployedModelsDedicatedResourcesMachineSpecOutputWithContext(ctx context.Context) EndpointDeployedModelsDedicatedResourcesMachineSpecOutput {
	return o
}

// The number of accelerators to attach to the machine.
func (o EndpointDeployedModelsDedicatedResourcesMachineSpecOutput) AcceleratorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResourcesMachineSpec) *int { return v.AcceleratorCount }).(pulumi.IntPtrOutput)
}

// The type of accelerator(s) that may be attached to the machine as per accelerator_count. Possible values: ACCELERATOR_TYPE_UNSPECIFIED, NVIDIA_TESLA_K80, NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_A100, TPU_V2, TPU_V3
func (o EndpointDeployedModelsDedicatedResourcesMachineSpecOutput) AcceleratorType() EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnumPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResourcesMachineSpec) *EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnum {
		return v.AcceleratorType
	}).(EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnumPtrOutput)
}

// The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
func (o EndpointDeployedModelsDedicatedResourcesMachineSpecOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsDedicatedResourcesMachineSpec) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

type EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointDeployedModelsDedicatedResourcesMachineSpec)(nil)).Elem()
}

func (o EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) ToEndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput() EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) ToEndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutputWithContext(ctx context.Context) EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput {
	return o
}

func (o EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) Elem() EndpointDeployedModelsDedicatedResourcesMachineSpecOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResourcesMachineSpec) EndpointDeployedModelsDedicatedResourcesMachineSpec {
		if v != nil {
			return *v
		}
		var ret EndpointDeployedModelsDedicatedResourcesMachineSpec
		return ret
	}).(EndpointDeployedModelsDedicatedResourcesMachineSpecOutput)
}

// The number of accelerators to attach to the machine.
func (o EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) AcceleratorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResourcesMachineSpec) *int {
		if v == nil {
			return nil
		}
		return v.AcceleratorCount
	}).(pulumi.IntPtrOutput)
}

// The type of accelerator(s) that may be attached to the machine as per accelerator_count. Possible values: ACCELERATOR_TYPE_UNSPECIFIED, NVIDIA_TESLA_K80, NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_A100, TPU_V2, TPU_V3
func (o EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) AcceleratorType() EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnumPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResourcesMachineSpec) *EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnum {
		if v == nil {
			return nil
		}
		return v.AcceleratorType
	}).(EndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorTypeEnumPtrOutput)
}

// The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
func (o EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsDedicatedResourcesMachineSpec) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
type EndpointDeployedModelsPrivateEndpoints struct {
	// Output only. Http(s) path to send explain requests.
	ExplainHttpUri *string `pulumi:"explainHttpUri"`
	// Output only. Http(s) path to send health check requests.
	HealthHttpUri *string `pulumi:"healthHttpUri"`
	// Output only. Http(s) path to send prediction requests.
	PredictHttpUri *string `pulumi:"predictHttpUri"`
	// Output only. The name of the service attachment resource. Populated if private service connect is enabled.
	ServiceAttachment *string `pulumi:"serviceAttachment"`
}

// Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
type EndpointDeployedModelsPrivateEndpointsOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsPrivateEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeployedModelsPrivateEndpoints)(nil)).Elem()
}

func (o EndpointDeployedModelsPrivateEndpointsOutput) ToEndpointDeployedModelsPrivateEndpointsOutput() EndpointDeployedModelsPrivateEndpointsOutput {
	return o
}

func (o EndpointDeployedModelsPrivateEndpointsOutput) ToEndpointDeployedModelsPrivateEndpointsOutputWithContext(ctx context.Context) EndpointDeployedModelsPrivateEndpointsOutput {
	return o
}

// Output only. Http(s) path to send explain requests.
func (o EndpointDeployedModelsPrivateEndpointsOutput) ExplainHttpUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsPrivateEndpoints) *string { return v.ExplainHttpUri }).(pulumi.StringPtrOutput)
}

// Output only. Http(s) path to send health check requests.
func (o EndpointDeployedModelsPrivateEndpointsOutput) HealthHttpUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsPrivateEndpoints) *string { return v.HealthHttpUri }).(pulumi.StringPtrOutput)
}

// Output only. Http(s) path to send prediction requests.
func (o EndpointDeployedModelsPrivateEndpointsOutput) PredictHttpUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsPrivateEndpoints) *string { return v.PredictHttpUri }).(pulumi.StringPtrOutput)
}

// Output only. The name of the service attachment resource. Populated if private service connect is enabled.
func (o EndpointDeployedModelsPrivateEndpointsOutput) ServiceAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeployedModelsPrivateEndpoints) *string { return v.ServiceAttachment }).(pulumi.StringPtrOutput)
}

type EndpointDeployedModelsPrivateEndpointsPtrOutput struct{ *pulumi.OutputState }

func (EndpointDeployedModelsPrivateEndpointsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointDeployedModelsPrivateEndpoints)(nil)).Elem()
}

func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) ToEndpointDeployedModelsPrivateEndpointsPtrOutput() EndpointDeployedModelsPrivateEndpointsPtrOutput {
	return o
}

func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) ToEndpointDeployedModelsPrivateEndpointsPtrOutputWithContext(ctx context.Context) EndpointDeployedModelsPrivateEndpointsPtrOutput {
	return o
}

func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) Elem() EndpointDeployedModelsPrivateEndpointsOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsPrivateEndpoints) EndpointDeployedModelsPrivateEndpoints {
		if v != nil {
			return *v
		}
		var ret EndpointDeployedModelsPrivateEndpoints
		return ret
	}).(EndpointDeployedModelsPrivateEndpointsOutput)
}

// Output only. Http(s) path to send explain requests.
func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) ExplainHttpUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsPrivateEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.ExplainHttpUri
	}).(pulumi.StringPtrOutput)
}

// Output only. Http(s) path to send health check requests.
func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) HealthHttpUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsPrivateEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.HealthHttpUri
	}).(pulumi.StringPtrOutput)
}

// Output only. Http(s) path to send prediction requests.
func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) PredictHttpUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsPrivateEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.PredictHttpUri
	}).(pulumi.StringPtrOutput)
}

// Output only. The name of the service attachment resource. Populated if private service connect is enabled.
func (o EndpointDeployedModelsPrivateEndpointsPtrOutput) ServiceAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointDeployedModelsPrivateEndpoints) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAttachment
	}).(pulumi.StringPtrOutput)
}

// Customer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
type EndpointEncryptionSpec struct {
	// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// EndpointEncryptionSpecInput is an input type that accepts EndpointEncryptionSpecArgs and EndpointEncryptionSpecOutput values.
// You can construct a concrete instance of `EndpointEncryptionSpecInput` via:
//
//	EndpointEncryptionSpecArgs{...}
type EndpointEncryptionSpecInput interface {
	pulumi.Input

	ToEndpointEncryptionSpecOutput() EndpointEncryptionSpecOutput
	ToEndpointEncryptionSpecOutputWithContext(context.Context) EndpointEncryptionSpecOutput
}

// Customer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
type EndpointEncryptionSpecArgs struct {
	// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (EndpointEncryptionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointEncryptionSpec)(nil)).Elem()
}

func (i EndpointEncryptionSpecArgs) ToEndpointEncryptionSpecOutput() EndpointEncryptionSpecOutput {
	return i.ToEndpointEncryptionSpecOutputWithContext(context.Background())
}

func (i EndpointEncryptionSpecArgs) ToEndpointEncryptionSpecOutputWithContext(ctx context.Context) EndpointEncryptionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEncryptionSpecOutput)
}

func (i EndpointEncryptionSpecArgs) ToEndpointEncryptionSpecPtrOutput() EndpointEncryptionSpecPtrOutput {
	return i.ToEndpointEncryptionSpecPtrOutputWithContext(context.Background())
}

func (i EndpointEncryptionSpecArgs) ToEndpointEncryptionSpecPtrOutputWithContext(ctx context.Context) EndpointEncryptionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEncryptionSpecOutput).ToEndpointEncryptionSpecPtrOutputWithContext(ctx)
}

// EndpointEncryptionSpecPtrInput is an input type that accepts EndpointEncryptionSpecArgs, EndpointEncryptionSpecPtr and EndpointEncryptionSpecPtrOutput values.
// You can construct a concrete instance of `EndpointEncryptionSpecPtrInput` via:
//
//	        EndpointEncryptionSpecArgs{...}
//
//	or:
//
//	        nil
type EndpointEncryptionSpecPtrInput interface {
	pulumi.Input

	ToEndpointEncryptionSpecPtrOutput() EndpointEncryptionSpecPtrOutput
	ToEndpointEncryptionSpecPtrOutputWithContext(context.Context) EndpointEncryptionSpecPtrOutput
}

type endpointEncryptionSpecPtrType EndpointEncryptionSpecArgs

func EndpointEncryptionSpecPtr(v *EndpointEncryptionSpecArgs) EndpointEncryptionSpecPtrInput {
	return (*endpointEncryptionSpecPtrType)(v)
}

func (*endpointEncryptionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointEncryptionSpec)(nil)).Elem()
}

func (i *endpointEncryptionSpecPtrType) ToEndpointEncryptionSpecPtrOutput() EndpointEncryptionSpecPtrOutput {
	return i.ToEndpointEncryptionSpecPtrOutputWithContext(context.Background())
}

func (i *endpointEncryptionSpecPtrType) ToEndpointEncryptionSpecPtrOutputWithContext(ctx context.Context) EndpointEncryptionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEncryptionSpecPtrOutput)
}

// Customer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
type EndpointEncryptionSpecOutput struct{ *pulumi.OutputState }

func (EndpointEncryptionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointEncryptionSpec)(nil)).Elem()
}

func (o EndpointEncryptionSpecOutput) ToEndpointEncryptionSpecOutput() EndpointEncryptionSpecOutput {
	return o
}

func (o EndpointEncryptionSpecOutput) ToEndpointEncryptionSpecOutputWithContext(ctx context.Context) EndpointEncryptionSpecOutput {
	return o
}

func (o EndpointEncryptionSpecOutput) ToEndpointEncryptionSpecPtrOutput() EndpointEncryptionSpecPtrOutput {
	return o.ToEndpointEncryptionSpecPtrOutputWithContext(context.Background())
}

func (o EndpointEncryptionSpecOutput) ToEndpointEncryptionSpecPtrOutputWithContext(ctx context.Context) EndpointEncryptionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointEncryptionSpec) *EndpointEncryptionSpec {
		return &v
	}).(EndpointEncryptionSpecPtrOutput)
}

// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
func (o EndpointEncryptionSpecOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointEncryptionSpec) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type EndpointEncryptionSpecPtrOutput struct{ *pulumi.OutputState }

func (EndpointEncryptionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointEncryptionSpec)(nil)).Elem()
}

func (o EndpointEncryptionSpecPtrOutput) ToEndpointEncryptionSpecPtrOutput() EndpointEncryptionSpecPtrOutput {
	return o
}

func (o EndpointEncryptionSpecPtrOutput) ToEndpointEncryptionSpecPtrOutputWithContext(ctx context.Context) EndpointEncryptionSpecPtrOutput {
	return o
}

func (o EndpointEncryptionSpecPtrOutput) Elem() EndpointEncryptionSpecOutput {
	return o.ApplyT(func(v *EndpointEncryptionSpec) EndpointEncryptionSpec {
		if v != nil {
			return *v
		}
		var ret EndpointEncryptionSpec
		return ret
	}).(EndpointEncryptionSpecOutput)
}

// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
func (o EndpointEncryptionSpecPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointEncryptionSpec) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type EndpointTrafficSplitTrafficSplit struct {
	// A deployed model's id.
	DeployedModelId string `pulumi:"deployedModelId"`
	// The percentage of this Endpoint's traffic that should be forwarded to the DeployedModel.
	TrafficPercentage int `pulumi:"trafficPercentage"`
}

// EndpointTrafficSplitTrafficSplitInput is an input type that accepts EndpointTrafficSplitTrafficSplitArgs and EndpointTrafficSplitTrafficSplitOutput values.
// You can construct a concrete instance of `EndpointTrafficSplitTrafficSplitInput` via:
//
//	EndpointTrafficSplitTrafficSplitArgs{...}
type EndpointTrafficSplitTrafficSplitInput interface {
	pulumi.Input

	ToEndpointTrafficSplitTrafficSplitOutput() EndpointTrafficSplitTrafficSplitOutput
	ToEndpointTrafficSplitTrafficSplitOutputWithContext(context.Context) EndpointTrafficSplitTrafficSplitOutput
}

type EndpointTrafficSplitTrafficSplitArgs struct {
	// A deployed model's id.
	DeployedModelId pulumi.StringInput `pulumi:"deployedModelId"`
	// The percentage of this Endpoint's traffic that should be forwarded to the DeployedModel.
	TrafficPercentage pulumi.IntInput `pulumi:"trafficPercentage"`
}

func (EndpointTrafficSplitTrafficSplitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointTrafficSplitTrafficSplit)(nil)).Elem()
}

func (i EndpointTrafficSplitTrafficSplitArgs) ToEndpointTrafficSplitTrafficSplitOutput() EndpointTrafficSplitTrafficSplitOutput {
	return i.ToEndpointTrafficSplitTrafficSplitOutputWithContext(context.Background())
}

func (i EndpointTrafficSplitTrafficSplitArgs) ToEndpointTrafficSplitTrafficSplitOutputWithContext(ctx context.Context) EndpointTrafficSplitTrafficSplitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointTrafficSplitTrafficSplitOutput)
}

// EndpointTrafficSplitTrafficSplitArrayInput is an input type that accepts EndpointTrafficSplitTrafficSplitArray and EndpointTrafficSplitTrafficSplitArrayOutput values.
// You can construct a concrete instance of `EndpointTrafficSplitTrafficSplitArrayInput` via:
//
//	EndpointTrafficSplitTrafficSplitArray{ EndpointTrafficSplitTrafficSplitArgs{...} }
type EndpointTrafficSplitTrafficSplitArrayInput interface {
	pulumi.Input

	ToEndpointTrafficSplitTrafficSplitArrayOutput() EndpointTrafficSplitTrafficSplitArrayOutput
	ToEndpointTrafficSplitTrafficSplitArrayOutputWithContext(context.Context) EndpointTrafficSplitTrafficSplitArrayOutput
}

type EndpointTrafficSplitTrafficSplitArray []EndpointTrafficSplitTrafficSplitInput

func (EndpointTrafficSplitTrafficSplitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointTrafficSplitTrafficSplit)(nil)).Elem()
}

func (i EndpointTrafficSplitTrafficSplitArray) ToEndpointTrafficSplitTrafficSplitArrayOutput() EndpointTrafficSplitTrafficSplitArrayOutput {
	return i.ToEndpointTrafficSplitTrafficSplitArrayOutputWithContext(context.Background())
}

func (i EndpointTrafficSplitTrafficSplitArray) ToEndpointTrafficSplitTrafficSplitArrayOutputWithContext(ctx context.Context) EndpointTrafficSplitTrafficSplitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointTrafficSplitTrafficSplitArrayOutput)
}

type EndpointTrafficSplitTrafficSplitOutput struct{ *pulumi.OutputState }

func (EndpointTrafficSplitTrafficSplitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointTrafficSplitTrafficSplit)(nil)).Elem()
}

func (o EndpointTrafficSplitTrafficSplitOutput) ToEndpointTrafficSplitTrafficSplitOutput() EndpointTrafficSplitTrafficSplitOutput {
	return o
}

func (o EndpointTrafficSplitTrafficSplitOutput) ToEndpointTrafficSplitTrafficSplitOutputWithContext(ctx context.Context) EndpointTrafficSplitTrafficSplitOutput {
	return o
}

// A deployed model's id.
func (o EndpointTrafficSplitTrafficSplitOutput) DeployedModelId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointTrafficSplitTrafficSplit) string { return v.DeployedModelId }).(pulumi.StringOutput)
}

// The percentage of this Endpoint's traffic that should be forwarded to the DeployedModel.
func (o EndpointTrafficSplitTrafficSplitOutput) TrafficPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointTrafficSplitTrafficSplit) int { return v.TrafficPercentage }).(pulumi.IntOutput)
}

type EndpointTrafficSplitTrafficSplitArrayOutput struct{ *pulumi.OutputState }

func (EndpointTrafficSplitTrafficSplitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointTrafficSplitTrafficSplit)(nil)).Elem()
}

func (o EndpointTrafficSplitTrafficSplitArrayOutput) ToEndpointTrafficSplitTrafficSplitArrayOutput() EndpointTrafficSplitTrafficSplitArrayOutput {
	return o
}

func (o EndpointTrafficSplitTrafficSplitArrayOutput) ToEndpointTrafficSplitTrafficSplitArrayOutputWithContext(ctx context.Context) EndpointTrafficSplitTrafficSplitArrayOutput {
	return o
}

func (o EndpointTrafficSplitTrafficSplitArrayOutput) Index(i pulumi.IntInput) EndpointTrafficSplitTrafficSplitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointTrafficSplitTrafficSplit {
		return vs[0].([]EndpointTrafficSplitTrafficSplit)[vs[1].(int)]
	}).(EndpointTrafficSplitTrafficSplitOutput)
}

// The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
type Labels struct {
}

// LabelsInput is an input type that accepts LabelsArgs and LabelsOutput values.
// You can construct a concrete instance of `LabelsInput` via:
//
//	LabelsArgs{...}
type LabelsInput interface {
	pulumi.Input

	ToLabelsOutput() LabelsOutput
	ToLabelsOutputWithContext(context.Context) LabelsOutput
}

// The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
type LabelsArgs struct {
}

func (LabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Labels)(nil)).Elem()
}

func (i LabelsArgs) ToLabelsOutput() LabelsOutput {
	return i.ToLabelsOutputWithContext(context.Background())
}

func (i LabelsArgs) ToLabelsOutputWithContext(ctx context.Context) LabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelsOutput)
}

func (i LabelsArgs) ToLabelsPtrOutput() LabelsPtrOutput {
	return i.ToLabelsPtrOutputWithContext(context.Background())
}

func (i LabelsArgs) ToLabelsPtrOutputWithContext(ctx context.Context) LabelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelsOutput).ToLabelsPtrOutputWithContext(ctx)
}

// LabelsPtrInput is an input type that accepts LabelsArgs, LabelsPtr and LabelsPtrOutput values.
// You can construct a concrete instance of `LabelsPtrInput` via:
//
//	        LabelsArgs{...}
//
//	or:
//
//	        nil
type LabelsPtrInput interface {
	pulumi.Input

	ToLabelsPtrOutput() LabelsPtrOutput
	ToLabelsPtrOutputWithContext(context.Context) LabelsPtrOutput
}

type labelsPtrType LabelsArgs

func LabelsPtr(v *LabelsArgs) LabelsPtrInput {
	return (*labelsPtrType)(v)
}

func (*labelsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Labels)(nil)).Elem()
}

func (i *labelsPtrType) ToLabelsPtrOutput() LabelsPtrOutput {
	return i.ToLabelsPtrOutputWithContext(context.Background())
}

func (i *labelsPtrType) ToLabelsPtrOutputWithContext(ctx context.Context) LabelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelsPtrOutput)
}

// The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
type LabelsOutput struct{ *pulumi.OutputState }

func (LabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Labels)(nil)).Elem()
}

func (o LabelsOutput) ToLabelsOutput() LabelsOutput {
	return o
}

func (o LabelsOutput) ToLabelsOutputWithContext(ctx context.Context) LabelsOutput {
	return o
}

func (o LabelsOutput) ToLabelsPtrOutput() LabelsPtrOutput {
	return o.ToLabelsPtrOutputWithContext(context.Background())
}

func (o LabelsOutput) ToLabelsPtrOutputWithContext(ctx context.Context) LabelsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Labels) *Labels {
		return &v
	}).(LabelsPtrOutput)
}

type LabelsPtrOutput struct{ *pulumi.OutputState }

func (LabelsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Labels)(nil)).Elem()
}

func (o LabelsPtrOutput) ToLabelsPtrOutput() LabelsPtrOutput {
	return o
}

func (o LabelsPtrOutput) ToLabelsPtrOutputWithContext(ctx context.Context) LabelsPtrOutput {
	return o
}

func (o LabelsPtrOutput) Elem() LabelsOutput {
	return o.ApplyT(func(v *Labels) Labels {
		if v != nil {
			return *v
		}
		var ret Labels
		return ret
	}).(LabelsOutput)
}

// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
type MetadataStoreEncryptionSpec struct {
	// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// MetadataStoreEncryptionSpecInput is an input type that accepts MetadataStoreEncryptionSpecArgs and MetadataStoreEncryptionSpecOutput values.
// You can construct a concrete instance of `MetadataStoreEncryptionSpecInput` via:
//
//	MetadataStoreEncryptionSpecArgs{...}
type MetadataStoreEncryptionSpecInput interface {
	pulumi.Input

	ToMetadataStoreEncryptionSpecOutput() MetadataStoreEncryptionSpecOutput
	ToMetadataStoreEncryptionSpecOutputWithContext(context.Context) MetadataStoreEncryptionSpecOutput
}

// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
type MetadataStoreEncryptionSpecArgs struct {
	// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (MetadataStoreEncryptionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataStoreEncryptionSpec)(nil)).Elem()
}

func (i MetadataStoreEncryptionSpecArgs) ToMetadataStoreEncryptionSpecOutput() MetadataStoreEncryptionSpecOutput {
	return i.ToMetadataStoreEncryptionSpecOutputWithContext(context.Background())
}

func (i MetadataStoreEncryptionSpecArgs) ToMetadataStoreEncryptionSpecOutputWithContext(ctx context.Context) MetadataStoreEncryptionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataStoreEncryptionSpecOutput)
}

func (i MetadataStoreEncryptionSpecArgs) ToMetadataStoreEncryptionSpecPtrOutput() MetadataStoreEncryptionSpecPtrOutput {
	return i.ToMetadataStoreEncryptionSpecPtrOutputWithContext(context.Background())
}

func (i MetadataStoreEncryptionSpecArgs) ToMetadataStoreEncryptionSpecPtrOutputWithContext(ctx context.Context) MetadataStoreEncryptionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataStoreEncryptionSpecOutput).ToMetadataStoreEncryptionSpecPtrOutputWithContext(ctx)
}

// MetadataStoreEncryptionSpecPtrInput is an input type that accepts MetadataStoreEncryptionSpecArgs, MetadataStoreEncryptionSpecPtr and MetadataStoreEncryptionSpecPtrOutput values.
// You can construct a concrete instance of `MetadataStoreEncryptionSpecPtrInput` via:
//
//	        MetadataStoreEncryptionSpecArgs{...}
//
//	or:
//
//	        nil
type MetadataStoreEncryptionSpecPtrInput interface {
	pulumi.Input

	ToMetadataStoreEncryptionSpecPtrOutput() MetadataStoreEncryptionSpecPtrOutput
	ToMetadataStoreEncryptionSpecPtrOutputWithContext(context.Context) MetadataStoreEncryptionSpecPtrOutput
}

type metadataStoreEncryptionSpecPtrType MetadataStoreEncryptionSpecArgs

func MetadataStoreEncryptionSpecPtr(v *MetadataStoreEncryptionSpecArgs) MetadataStoreEncryptionSpecPtrInput {
	return (*metadataStoreEncryptionSpecPtrType)(v)
}

func (*metadataStoreEncryptionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataStoreEncryptionSpec)(nil)).Elem()
}

func (i *metadataStoreEncryptionSpecPtrType) ToMetadataStoreEncryptionSpecPtrOutput() MetadataStoreEncryptionSpecPtrOutput {
	return i.ToMetadataStoreEncryptionSpecPtrOutputWithContext(context.Background())
}

func (i *metadataStoreEncryptionSpecPtrType) ToMetadataStoreEncryptionSpecPtrOutputWithContext(ctx context.Context) MetadataStoreEncryptionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataStoreEncryptionSpecPtrOutput)
}

// Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
type MetadataStoreEncryptionSpecOutput struct{ *pulumi.OutputState }

func (MetadataStoreEncryptionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataStoreEncryptionSpec)(nil)).Elem()
}

func (o MetadataStoreEncryptionSpecOutput) ToMetadataStoreEncryptionSpecOutput() MetadataStoreEncryptionSpecOutput {
	return o
}

func (o MetadataStoreEncryptionSpecOutput) ToMetadataStoreEncryptionSpecOutputWithContext(ctx context.Context) MetadataStoreEncryptionSpecOutput {
	return o
}

func (o MetadataStoreEncryptionSpecOutput) ToMetadataStoreEncryptionSpecPtrOutput() MetadataStoreEncryptionSpecPtrOutput {
	return o.ToMetadataStoreEncryptionSpecPtrOutputWithContext(context.Background())
}

func (o MetadataStoreEncryptionSpecOutput) ToMetadataStoreEncryptionSpecPtrOutputWithContext(ctx context.Context) MetadataStoreEncryptionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataStoreEncryptionSpec) *MetadataStoreEncryptionSpec {
		return &v
	}).(MetadataStoreEncryptionSpecPtrOutput)
}

// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
func (o MetadataStoreEncryptionSpecOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataStoreEncryptionSpec) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type MetadataStoreEncryptionSpecPtrOutput struct{ *pulumi.OutputState }

func (MetadataStoreEncryptionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataStoreEncryptionSpec)(nil)).Elem()
}

func (o MetadataStoreEncryptionSpecPtrOutput) ToMetadataStoreEncryptionSpecPtrOutput() MetadataStoreEncryptionSpecPtrOutput {
	return o
}

func (o MetadataStoreEncryptionSpecPtrOutput) ToMetadataStoreEncryptionSpecPtrOutputWithContext(ctx context.Context) MetadataStoreEncryptionSpecPtrOutput {
	return o
}

func (o MetadataStoreEncryptionSpecPtrOutput) Elem() MetadataStoreEncryptionSpecOutput {
	return o.ApplyT(func(v *MetadataStoreEncryptionSpec) MetadataStoreEncryptionSpec {
		if v != nil {
			return *v
		}
		var ret MetadataStoreEncryptionSpec
		return ret
	}).(MetadataStoreEncryptionSpecOutput)
}

// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
func (o MetadataStoreEncryptionSpecPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataStoreEncryptionSpec) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Output only. State information of the MetadataStore.
type MetadataStoreStateType struct {
	// The disk utilization of the MetadataStore in bytes.
	DiskUtilizationBytes *int `pulumi:"diskUtilizationBytes"`
}

// Output only. State information of the MetadataStore.
type MetadataStoreStateTypeOutput struct{ *pulumi.OutputState }

func (MetadataStoreStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataStoreStateType)(nil)).Elem()
}

func (o MetadataStoreStateTypeOutput) ToMetadataStoreStateTypeOutput() MetadataStoreStateTypeOutput {
	return o
}

func (o MetadataStoreStateTypeOutput) ToMetadataStoreStateTypeOutputWithContext(ctx context.Context) MetadataStoreStateTypeOutput {
	return o
}

// The disk utilization of the MetadataStore in bytes.
func (o MetadataStoreStateTypeOutput) DiskUtilizationBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetadataStoreStateType) *int { return v.DiskUtilizationBytes }).(pulumi.IntPtrOutput)
}

type MetadataStoreStateTypePtrOutput struct{ *pulumi.OutputState }

func (MetadataStoreStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataStoreStateType)(nil)).Elem()
}

func (o MetadataStoreStateTypePtrOutput) ToMetadataStoreStateTypePtrOutput() MetadataStoreStateTypePtrOutput {
	return o
}

func (o MetadataStoreStateTypePtrOutput) ToMetadataStoreStateTypePtrOutputWithContext(ctx context.Context) MetadataStoreStateTypePtrOutput {
	return o
}

func (o MetadataStoreStateTypePtrOutput) Elem() MetadataStoreStateTypeOutput {
	return o.ApplyT(func(v *MetadataStoreStateType) MetadataStoreStateType {
		if v != nil {
			return *v
		}
		var ret MetadataStoreStateType
		return ret
	}).(MetadataStoreStateTypeOutput)
}

// The disk utilization of the MetadataStore in bytes.
func (o MetadataStoreStateTypePtrOutput) DiskUtilizationBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetadataStoreStateType) *int {
		if v == nil {
			return nil
		}
		return v.DiskUtilizationBytes
	}).(pulumi.IntPtrOutput)
}

// The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not present for AutoML Models.
type ModelContainerSpec struct {
	// Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s "default parameters" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Args []string `pulumi:"args"`
	// Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec" form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Command []string `pulumi:"command"`
	// Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ``` json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value": "$(VAR_1) bar" } ]  ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Env []ModelContainerSpecEnv `pulumi:"env"`
	// Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
	HealthRoute *string `pulumi:"healthRoute"`
	// Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.
	ImageUri string `pulumi:"imageUri"`
	// Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ``` json [ { "containerPort": 8080 } ]  ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Ports []ModelContainerSpecPorts `pulumi:"ports"`
	// Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
	PredictRoute *string `pulumi:"predictRoute"`
}

// ModelContainerSpecInput is an input type that accepts ModelContainerSpecArgs and ModelContainerSpecOutput values.
// You can construct a concrete instance of `ModelContainerSpecInput` via:
//
//	ModelContainerSpecArgs{...}
type ModelContainerSpecInput interface {
	pulumi.Input

	ToModelContainerSpecOutput() ModelContainerSpecOutput
	ToModelContainerSpecOutputWithContext(context.Context) ModelContainerSpecOutput
}

// The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not present for AutoML Models.
type ModelContainerSpecArgs struct {
	// Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s "default parameters" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec" form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ``` json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value": "$(VAR_1) bar" } ]  ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Env ModelContainerSpecEnvArrayInput `pulumi:"env"`
	// Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
	HealthRoute pulumi.StringPtrInput `pulumi:"healthRoute"`
	// Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.
	ImageUri pulumi.StringInput `pulumi:"imageUri"`
	// Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ``` json [ { "containerPort": 8080 } ]  ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
	Ports ModelContainerSpecPortsArrayInput `pulumi:"ports"`
	// Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
	PredictRoute pulumi.StringPtrInput `pulumi:"predictRoute"`
}

func (ModelContainerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerSpec)(nil)).Elem()
}

func (i ModelContainerSpecArgs) ToModelContainerSpecOutput() ModelContainerSpecOutput {
	return i.ToModelContainerSpecOutputWithContext(context.Background())
}

func (i ModelContainerSpecArgs) ToModelContainerSpecOutputWithContext(ctx context.Context) ModelContainerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerSpecOutput)
}

// The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not present for AutoML Models.
type ModelContainerSpecOutput struct{ *pulumi.OutputState }

func (ModelContainerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerSpec)(nil)).Elem()
}

func (o ModelContainerSpecOutput) ToModelContainerSpecOutput() ModelContainerSpecOutput {
	return o
}

func (o ModelContainerSpecOutput) ToModelContainerSpecOutputWithContext(ctx context.Context) ModelContainerSpecOutput {
	return o
}

// Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s "default parameters" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelContainerSpec) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec" form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelContainerSpec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ``` json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value": "$(VAR_1) bar" } ]  ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecOutput) Env() ModelContainerSpecEnvArrayOutput {
	return o.ApplyT(func(v ModelContainerSpec) []ModelContainerSpecEnv { return v.Env }).(ModelContainerSpecEnvArrayOutput)
}

// Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
func (o ModelContainerSpecOutput) HealthRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerSpec) *string { return v.HealthRoute }).(pulumi.StringPtrOutput)
}

// Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.
func (o ModelContainerSpecOutput) ImageUri() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerSpec) string { return v.ImageUri }).(pulumi.StringOutput)
}

// Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ``` json [ { "containerPort": 8080 } ]  ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecOutput) Ports() ModelContainerSpecPortsArrayOutput {
	return o.ApplyT(func(v ModelContainerSpec) []ModelContainerSpecPorts { return v.Ports }).(ModelContainerSpecPortsArrayOutput)
}

// Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
func (o ModelContainerSpecOutput) PredictRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerSpec) *string { return v.PredictRoute }).(pulumi.StringPtrOutput)
}

type ModelContainerSpecPtrOutput struct{ *pulumi.OutputState }

func (ModelContainerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelContainerSpec)(nil)).Elem()
}

func (o ModelContainerSpecPtrOutput) ToModelContainerSpecPtrOutput() ModelContainerSpecPtrOutput {
	return o
}

func (o ModelContainerSpecPtrOutput) ToModelContainerSpecPtrOutputWithContext(ctx context.Context) ModelContainerSpecPtrOutput {
	return o
}

func (o ModelContainerSpecPtrOutput) Elem() ModelContainerSpecOutput {
	return o.ApplyT(func(v *ModelContainerSpec) ModelContainerSpec {
		if v != nil {
			return *v
		}
		var ret ModelContainerSpec
		return ret
	}).(ModelContainerSpecOutput)
}

// Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s "default parameters" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ModelContainerSpec) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s "exec" form, not its "shell" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: `$(VARIABLE_NAME)` Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: `$$(VARIABLE_NAME)` This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ModelContainerSpec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ``` json [ { "name": "VAR_1", "value": "foo" }, { "name": "VAR_2", "value": "$(VAR_1) bar" } ]  ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecPtrOutput) Env() ModelContainerSpecEnvArrayOutput {
	return o.ApplyT(func(v *ModelContainerSpec) []ModelContainerSpecEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(ModelContainerSpecEnvArrayOutput)
}

// Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
func (o ModelContainerSpecPtrOutput) HealthRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.HealthRoute
	}).(pulumi.StringPtrOutput)
}

// Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.
func (o ModelContainerSpecPtrOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelContainerSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ImageUri
	}).(pulumi.StringPtrOutput)
}

// Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ``` json [ { "containerPort": 8080 } ]  ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
func (o ModelContainerSpecPtrOutput) Ports() ModelContainerSpecPortsArrayOutput {
	return o.ApplyT(func(v *ModelContainerSpec) []ModelContainerSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ModelContainerSpecPortsArrayOutput)
}

// Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: `/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict` The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
func (o ModelContainerSpecPtrOutput) PredictRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelContainerSpec) *string {
		if v == nil {
			return nil
		}
		return v.PredictRoute
	}).(pulumi.StringPtrOutput)
}

type ModelContainerSpecEnv struct {
	// Required. Name of the environment variable. Must be a valid C identifier.
	Name string `pulumi:"name"`
	// Required. Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
	Value string `pulumi:"value"`
}

// ModelContainerSpecEnvInput is an input type that accepts ModelContainerSpecEnvArgs and ModelContainerSpecEnvOutput values.
// You can construct a concrete instance of `ModelContainerSpecEnvInput` via:
//
//	ModelContainerSpecEnvArgs{...}
type ModelContainerSpecEnvInput interface {
	pulumi.Input

	ToModelContainerSpecEnvOutput() ModelContainerSpecEnvOutput
	ToModelContainerSpecEnvOutputWithContext(context.Context) ModelContainerSpecEnvOutput
}

type ModelContainerSpecEnvArgs struct {
	// Required. Name of the environment variable. Must be a valid C identifier.
	Name pulumi.StringInput `pulumi:"name"`
	// Required. Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ModelContainerSpecEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerSpecEnv)(nil)).Elem()
}

func (i ModelContainerSpecEnvArgs) ToModelContainerSpecEnvOutput() ModelContainerSpecEnvOutput {
	return i.ToModelContainerSpecEnvOutputWithContext(context.Background())
}

func (i ModelContainerSpecEnvArgs) ToModelContainerSpecEnvOutputWithContext(ctx context.Context) ModelContainerSpecEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerSpecEnvOutput)
}

// ModelContainerSpecEnvArrayInput is an input type that accepts ModelContainerSpecEnvArray and ModelContainerSpecEnvArrayOutput values.
// You can construct a concrete instance of `ModelContainerSpecEnvArrayInput` via:
//
//	ModelContainerSpecEnvArray{ ModelContainerSpecEnvArgs{...} }
type ModelContainerSpecEnvArrayInput interface {
	pulumi.Input

	ToModelContainerSpecEnvArrayOutput() ModelContainerSpecEnvArrayOutput
	ToModelContainerSpecEnvArrayOutputWithContext(context.Context) ModelContainerSpecEnvArrayOutput
}

type ModelContainerSpecEnvArray []ModelContainerSpecEnvInput

func (ModelContainerSpecEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelContainerSpecEnv)(nil)).Elem()
}

func (i ModelContainerSpecEnvArray) ToModelContainerSpecEnvArrayOutput() ModelContainerSpecEnvArrayOutput {
	return i.ToModelContainerSpecEnvArrayOutputWithContext(context.Background())
}

func (i ModelContainerSpecEnvArray) ToModelContainerSpecEnvArrayOutputWithContext(ctx context.Context) ModelContainerSpecEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerSpecEnvArrayOutput)
}

type ModelContainerSpecEnvOutput struct{ *pulumi.OutputState }

func (ModelContainerSpecEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerSpecEnv)(nil)).Elem()
}

func (o ModelContainerSpecEnvOutput) ToModelContainerSpecEnvOutput() ModelContainerSpecEnvOutput {
	return o
}

func (o ModelContainerSpecEnvOutput) ToModelContainerSpecEnvOutputWithContext(ctx context.Context) ModelContainerSpecEnvOutput {
	return o
}

// Required. Name of the environment variable. Must be a valid C identifier.
func (o ModelContainerSpecEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerSpecEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Required. Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
func (o ModelContainerSpecEnvOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerSpecEnv) string { return v.Value }).(pulumi.StringOutput)
}

type ModelContainerSpecEnvArrayOutput struct{ *pulumi.OutputState }

func (ModelContainerSpecEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelContainerSpecEnv)(nil)).Elem()
}

func (o ModelContainerSpecEnvArrayOutput) ToModelContainerSpecEnvArrayOutput() ModelContainerSpecEnvArrayOutput {
	return o
}

func (o ModelContainerSpecEnvArrayOutput) ToModelContainerSpecEnvArrayOutputWithContext(ctx context.Context) ModelContainerSpecEnvArrayOutput {
	return o
}

func (o ModelContainerSpecEnvArrayOutput) Index(i pulumi.IntInput) ModelContainerSpecEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ModelContainerSpecEnv {
		return vs[0].([]ModelContainerSpecEnv)[vs[1].(int)]
	}).(ModelContainerSpecEnvOutput)
}

type ModelContainerSpecPorts struct {
	// The number of the port to expose on the pod's IP address. Must be a valid port number, between 1 and 65535 inclusive.
	ContainerPort *int `pulumi:"containerPort"`
}

// ModelContainerSpecPortsInput is an input type that accepts ModelContainerSpecPortsArgs and ModelContainerSpecPortsOutput values.
// You can construct a concrete instance of `ModelContainerSpecPortsInput` via:
//
//	ModelContainerSpecPortsArgs{...}
type ModelContainerSpecPortsInput interface {
	pulumi.Input

	ToModelContainerSpecPortsOutput() ModelContainerSpecPortsOutput
	ToModelContainerSpecPortsOutputWithContext(context.Context) ModelContainerSpecPortsOutput
}

type ModelContainerSpecPortsArgs struct {
	// The number of the port to expose on the pod's IP address. Must be a valid port number, between 1 and 65535 inclusive.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
}

func (ModelContainerSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerSpecPorts)(nil)).Elem()
}

func (i ModelContainerSpecPortsArgs) ToModelContainerSpecPortsOutput() ModelContainerSpecPortsOutput {
	return i.ToModelContainerSpecPortsOutputWithContext(context.Background())
}

func (i ModelContainerSpecPortsArgs) ToModelContainerSpecPortsOutputWithContext(ctx context.Context) ModelContainerSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerSpecPortsOutput)
}

// ModelContainerSpecPortsArrayInput is an input type that accepts ModelContainerSpecPortsArray and ModelContainerSpecPortsArrayOutput values.
// You can construct a concrete instance of `ModelContainerSpecPortsArrayInput` via:
//
//	ModelContainerSpecPortsArray{ ModelContainerSpecPortsArgs{...} }
type ModelContainerSpecPortsArrayInput interface {
	pulumi.Input

	ToModelContainerSpecPortsArrayOutput() ModelContainerSpecPortsArrayOutput
	ToModelContainerSpecPortsArrayOutputWithContext(context.Context) ModelContainerSpecPortsArrayOutput
}

type ModelContainerSpecPortsArray []ModelContainerSpecPortsInput

func (ModelContainerSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelContainerSpecPorts)(nil)).Elem()
}

func (i ModelContainerSpecPortsArray) ToModelContainerSpecPortsArrayOutput() ModelContainerSpecPortsArrayOutput {
	return i.ToModelContainerSpecPortsArrayOutputWithContext(context.Background())
}

func (i ModelContainerSpecPortsArray) ToModelContainerSpecPortsArrayOutputWithContext(ctx context.Context) ModelContainerSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerSpecPortsArrayOutput)
}

type ModelContainerSpecPortsOutput struct{ *pulumi.OutputState }

func (ModelContainerSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerSpecPorts)(nil)).Elem()
}

func (o ModelContainerSpecPortsOutput) ToModelContainerSpecPortsOutput() ModelContainerSpecPortsOutput {
	return o
}

func (o ModelContainerSpecPortsOutput) ToModelContainerSpecPortsOutputWithContext(ctx context.Context) ModelContainerSpecPortsOutput {
	return o
}

// The number of the port to expose on the pod's IP address. Must be a valid port number, between 1 and 65535 inclusive.
func (o ModelContainerSpecPortsOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ModelContainerSpecPorts) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

type ModelContainerSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ModelContainerSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelContainerSpecPorts)(nil)).Elem()
}

func (o ModelContainerSpecPortsArrayOutput) ToModelContainerSpecPortsArrayOutput() ModelContainerSpecPortsArrayOutput {
	return o
}

func (o ModelContainerSpecPortsArrayOutput) ToModelContainerSpecPortsArrayOutputWithContext(ctx context.Context) ModelContainerSpecPortsArrayOutput {
	return o
}

func (o ModelContainerSpecPortsArrayOutput) Index(i pulumi.IntInput) ModelContainerSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ModelContainerSpecPorts {
		return vs[0].([]ModelContainerSpecPorts)[vs[1].(int)]
	}).(ModelContainerSpecPortsOutput)
}

type ModelDeployedModels struct {
	// Immutable. An ID of a DeployedModel in the above Endpoint.
	DeployedModelId *string `pulumi:"deployedModelId"`
	// Immutable. A resource name of an Endpoint.
	Endpoint *string `pulumi:"endpoint"`
}

type ModelDeployedModelsOutput struct{ *pulumi.OutputState }

func (ModelDeployedModelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDeployedModels)(nil)).Elem()
}

func (o ModelDeployedModelsOutput) ToModelDeployedModelsOutput() ModelDeployedModelsOutput {
	return o
}

func (o ModelDeployedModelsOutput) ToModelDeployedModelsOutputWithContext(ctx context.Context) ModelDeployedModelsOutput {
	return o
}

// Immutable. An ID of a DeployedModel in the above Endpoint.
func (o ModelDeployedModelsOutput) DeployedModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDeployedModels) *string { return v.DeployedModelId }).(pulumi.StringPtrOutput)
}

// Immutable. A resource name of an Endpoint.
func (o ModelDeployedModelsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDeployedModels) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

type ModelDeployedModelsArrayOutput struct{ *pulumi.OutputState }

func (ModelDeployedModelsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelDeployedModels)(nil)).Elem()
}

func (o ModelDeployedModelsArrayOutput) ToModelDeployedModelsArrayOutput() ModelDeployedModelsArrayOutput {
	return o
}

func (o ModelDeployedModelsArrayOutput) ToModelDeployedModelsArrayOutputWithContext(ctx context.Context) ModelDeployedModelsArrayOutput {
	return o
}

func (o ModelDeployedModelsArrayOutput) Index(i pulumi.IntInput) ModelDeployedModelsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ModelDeployedModels {
		return vs[0].([]ModelDeployedModels)[vs[1].(int)]
	}).(ModelDeployedModelsOutput)
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
type ModelDeploymentDedicatedResources struct {
	// Required. Immutable. The specification of a single machine used by the prediction.
	MachineSpec ModelDeploymentDedicatedResourcesMachineSpec `pulumi:"machineSpec"`
	// Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
	MaxReplicaCount *int `pulumi:"maxReplicaCount"`
	// Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
	MinReplicaCount int `pulumi:"minReplicaCount"`
}

// ModelDeploymentDedicatedResourcesInput is an input type that accepts ModelDeploymentDedicatedResourcesArgs and ModelDeploymentDedicatedResourcesOutput values.
// You can construct a concrete instance of `ModelDeploymentDedicatedResourcesInput` via:
//
//	ModelDeploymentDedicatedResourcesArgs{...}
type ModelDeploymentDedicatedResourcesInput interface {
	pulumi.Input

	ToModelDeploymentDedicatedResourcesOutput() ModelDeploymentDedicatedResourcesOutput
	ToModelDeploymentDedicatedResourcesOutputWithContext(context.Context) ModelDeploymentDedicatedResourcesOutput
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
type ModelDeploymentDedicatedResourcesArgs struct {
	// Required. Immutable. The specification of a single machine used by the prediction.
	MachineSpec ModelDeploymentDedicatedResourcesMachineSpecInput `pulumi:"machineSpec"`
	// Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
	MaxReplicaCount pulumi.IntPtrInput `pulumi:"maxReplicaCount"`
	// Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
	MinReplicaCount pulumi.IntInput `pulumi:"minReplicaCount"`
}

func (ModelDeploymentDedicatedResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDeploymentDedicatedResources)(nil)).Elem()
}

func (i ModelDeploymentDedicatedResourcesArgs) ToModelDeploymentDedicatedResourcesOutput() ModelDeploymentDedicatedResourcesOutput {
	return i.ToModelDeploymentDedicatedResourcesOutputWithContext(context.Background())
}

func (i ModelDeploymentDedicatedResourcesArgs) ToModelDeploymentDedicatedResourcesOutputWithContext(ctx context.Context) ModelDeploymentDedicatedResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDeploymentDedicatedResourcesOutput)
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
type ModelDeploymentDedicatedResourcesOutput struct{ *pulumi.OutputState }

func (ModelDeploymentDedicatedResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDeploymentDedicatedResources)(nil)).Elem()
}

func (o ModelDeploymentDedicatedResourcesOutput) ToModelDeploymentDedicatedResourcesOutput() ModelDeploymentDedicatedResourcesOutput {
	return o
}

func (o ModelDeploymentDedicatedResourcesOutput) ToModelDeploymentDedicatedResourcesOutputWithContext(ctx context.Context) ModelDeploymentDedicatedResourcesOutput {
	return o
}

// Required. Immutable. The specification of a single machine used by the prediction.
func (o ModelDeploymentDedicatedResourcesOutput) MachineSpec() ModelDeploymentDedicatedResourcesMachineSpecOutput {
	return o.ApplyT(func(v ModelDeploymentDedicatedResources) ModelDeploymentDedicatedResourcesMachineSpec {
		return v.MachineSpec
	}).(ModelDeploymentDedicatedResourcesMachineSpecOutput)
}

// Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
func (o ModelDeploymentDedicatedResourcesOutput) MaxReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ModelDeploymentDedicatedResources) *int { return v.MaxReplicaCount }).(pulumi.IntPtrOutput)
}

// Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
func (o ModelDeploymentDedicatedResourcesOutput) MinReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v ModelDeploymentDedicatedResources) int { return v.MinReplicaCount }).(pulumi.IntOutput)
}

type ModelDeploymentDedicatedResourcesPtrOutput struct{ *pulumi.OutputState }

func (ModelDeploymentDedicatedResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDeploymentDedicatedResources)(nil)).Elem()
}

func (o ModelDeploymentDedicatedResourcesPtrOutput) ToModelDeploymentDedicatedResourcesPtrOutput() ModelDeploymentDedicatedResourcesPtrOutput {
	return o
}

func (o ModelDeploymentDedicatedResourcesPtrOutput) ToModelDeploymentDedicatedResourcesPtrOutputWithContext(ctx context.Context) ModelDeploymentDedicatedResourcesPtrOutput {
	return o
}

func (o ModelDeploymentDedicatedResourcesPtrOutput) Elem() ModelDeploymentDedicatedResourcesOutput {
	return o.ApplyT(func(v *ModelDeploymentDedicatedResources) ModelDeploymentDedicatedResources {
		if v != nil {
			return *v
		}
		var ret ModelDeploymentDedicatedResources
		return ret
	}).(ModelDeploymentDedicatedResourcesOutput)
}

// Required. Immutable. The specification of a single machine used by the prediction.
func (o ModelDeploymentDedicatedResourcesPtrOutput) MachineSpec() ModelDeploymentDedicatedResourcesMachineSpecPtrOutput {
	return o.ApplyT(func(v *ModelDeploymentDedicatedResources) *ModelDeploymentDedicatedResourcesMachineSpec {
		if v == nil {
			return nil
		}
		return &v.MachineSpec
	}).(ModelDeploymentDedicatedResourcesMachineSpecPtrOutput)
}

// Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
func (o ModelDeploymentDedicatedResourcesPtrOutput) MaxReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ModelDeploymentDedicatedResources) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicaCount
	}).(pulumi.IntPtrOutput)
}

// Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
func (o ModelDeploymentDedicatedResourcesPtrOutput) MinReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ModelDeploymentDedicatedResources) *int {
		if v == nil {
			return nil
		}
		return &v.MinReplicaCount
	}).(pulumi.IntPtrOutput)
}

// Required. Immutable. The specification of a single machine used by the prediction.
type ModelDeploymentDedicatedResourcesMachineSpec struct {
	// Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
	MachineType string `pulumi:"machineType"`
}

// ModelDeploymentDedicatedResourcesMachineSpecInput is an input type that accepts ModelDeploymentDedicatedResourcesMachineSpecArgs and ModelDeploymentDedicatedResourcesMachineSpecOutput values.
// You can construct a concrete instance of `ModelDeploymentDedicatedResourcesMachineSpecInput` via:
//
//	ModelDeploymentDedicatedResourcesMachineSpecArgs{...}
type ModelDeploymentDedicatedResourcesMachineSpecInput interface {
	pulumi.Input

	ToModelDeploymentDedicatedResourcesMachineSpecOutput() ModelDeploymentDedicatedResourcesMachineSpecOutput
	ToModelDeploymentDedicatedResourcesMachineSpecOutputWithContext(context.Context) ModelDeploymentDedicatedResourcesMachineSpecOutput
}

// Required. Immutable. The specification of a single machine used by the prediction.
type ModelDeploymentDedicatedResourcesMachineSpecArgs struct {
	// Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
	MachineType pulumi.StringInput `pulumi:"machineType"`
}

func (ModelDeploymentDedicatedResourcesMachineSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDeploymentDedicatedResourcesMachineSpec)(nil)).Elem()
}

func (i ModelDeploymentDedicatedResourcesMachineSpecArgs) ToModelDeploymentDedicatedResourcesMachineSpecOutput() ModelDeploymentDedicatedResourcesMachineSpecOutput {
	return i.ToModelDeploymentDedicatedResourcesMachineSpecOutputWithContext(context.Background())
}

func (i ModelDeploymentDedicatedResourcesMachineSpecArgs) ToModelDeploymentDedicatedResourcesMachineSpecOutputWithContext(ctx context.Context) ModelDeploymentDedicatedResourcesMachineSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDeploymentDedicatedResourcesMachineSpecOutput)
}

// Required. Immutable. The specification of a single machine used by the prediction.
type ModelDeploymentDedicatedResourcesMachineSpecOutput struct{ *pulumi.OutputState }

func (ModelDeploymentDedicatedResourcesMachineSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDeploymentDedicatedResourcesMachineSpec)(nil)).Elem()
}

func (o ModelDeploymentDedicatedResourcesMachineSpecOutput) ToModelDeploymentDedicatedResourcesMachineSpecOutput() ModelDeploymentDedicatedResourcesMachineSpecOutput {
	return o
}

func (o ModelDeploymentDedicatedResourcesMachineSpecOutput) ToModelDeploymentDedicatedResourcesMachineSpecOutputWithContext(ctx context.Context) ModelDeploymentDedicatedResourcesMachineSpecOutput {
	return o
}

// Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
func (o ModelDeploymentDedicatedResourcesMachineSpecOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDeploymentDedicatedResourcesMachineSpec) string { return v.MachineType }).(pulumi.StringOutput)
}

type ModelDeploymentDedicatedResourcesMachineSpecPtrOutput struct{ *pulumi.OutputState }

func (ModelDeploymentDedicatedResourcesMachineSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDeploymentDedicatedResourcesMachineSpec)(nil)).Elem()
}

func (o ModelDeploymentDedicatedResourcesMachineSpecPtrOutput) ToModelDeploymentDedicatedResourcesMachineSpecPtrOutput() ModelDeploymentDedicatedResourcesMachineSpecPtrOutput {
	return o
}

func (o ModelDeploymentDedicatedResourcesMachineSpecPtrOutput) ToModelDeploymentDedicatedResourcesMachineSpecPtrOutputWithContext(ctx context.Context) ModelDeploymentDedicatedResourcesMachineSpecPtrOutput {
	return o
}

func (o ModelDeploymentDedicatedResourcesMachineSpecPtrOutput) Elem() ModelDeploymentDedicatedResourcesMachineSpecOutput {
	return o.ApplyT(func(v *ModelDeploymentDedicatedResourcesMachineSpec) ModelDeploymentDedicatedResourcesMachineSpec {
		if v != nil {
			return *v
		}
		var ret ModelDeploymentDedicatedResourcesMachineSpec
		return ret
	}).(ModelDeploymentDedicatedResourcesMachineSpecOutput)
}

// Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
func (o ModelDeploymentDedicatedResourcesMachineSpecPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDeploymentDedicatedResourcesMachineSpec) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
type ModelEncryptionSpec struct {
	// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// ModelEncryptionSpecInput is an input type that accepts ModelEncryptionSpecArgs and ModelEncryptionSpecOutput values.
// You can construct a concrete instance of `ModelEncryptionSpecInput` via:
//
//	ModelEncryptionSpecArgs{...}
type ModelEncryptionSpecInput interface {
	pulumi.Input

	ToModelEncryptionSpecOutput() ModelEncryptionSpecOutput
	ToModelEncryptionSpecOutputWithContext(context.Context) ModelEncryptionSpecOutput
}

// Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
type ModelEncryptionSpecArgs struct {
	// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (ModelEncryptionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelEncryptionSpec)(nil)).Elem()
}

func (i ModelEncryptionSpecArgs) ToModelEncryptionSpecOutput() ModelEncryptionSpecOutput {
	return i.ToModelEncryptionSpecOutputWithContext(context.Background())
}

func (i ModelEncryptionSpecArgs) ToModelEncryptionSpecOutputWithContext(ctx context.Context) ModelEncryptionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelEncryptionSpecOutput)
}

func (i ModelEncryptionSpecArgs) ToModelEncryptionSpecPtrOutput() ModelEncryptionSpecPtrOutput {
	return i.ToModelEncryptionSpecPtrOutputWithContext(context.Background())
}

func (i ModelEncryptionSpecArgs) ToModelEncryptionSpecPtrOutputWithContext(ctx context.Context) ModelEncryptionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelEncryptionSpecOutput).ToModelEncryptionSpecPtrOutputWithContext(ctx)
}

// ModelEncryptionSpecPtrInput is an input type that accepts ModelEncryptionSpecArgs, ModelEncryptionSpecPtr and ModelEncryptionSpecPtrOutput values.
// You can construct a concrete instance of `ModelEncryptionSpecPtrInput` via:
//
//	        ModelEncryptionSpecArgs{...}
//
//	or:
//
//	        nil
type ModelEncryptionSpecPtrInput interface {
	pulumi.Input

	ToModelEncryptionSpecPtrOutput() ModelEncryptionSpecPtrOutput
	ToModelEncryptionSpecPtrOutputWithContext(context.Context) ModelEncryptionSpecPtrOutput
}

type modelEncryptionSpecPtrType ModelEncryptionSpecArgs

func ModelEncryptionSpecPtr(v *ModelEncryptionSpecArgs) ModelEncryptionSpecPtrInput {
	return (*modelEncryptionSpecPtrType)(v)
}

func (*modelEncryptionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelEncryptionSpec)(nil)).Elem()
}

func (i *modelEncryptionSpecPtrType) ToModelEncryptionSpecPtrOutput() ModelEncryptionSpecPtrOutput {
	return i.ToModelEncryptionSpecPtrOutputWithContext(context.Background())
}

func (i *modelEncryptionSpecPtrType) ToModelEncryptionSpecPtrOutputWithContext(ctx context.Context) ModelEncryptionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelEncryptionSpecPtrOutput)
}

// Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
type ModelEncryptionSpecOutput struct{ *pulumi.OutputState }

func (ModelEncryptionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelEncryptionSpec)(nil)).Elem()
}

func (o ModelEncryptionSpecOutput) ToModelEncryptionSpecOutput() ModelEncryptionSpecOutput {
	return o
}

func (o ModelEncryptionSpecOutput) ToModelEncryptionSpecOutputWithContext(ctx context.Context) ModelEncryptionSpecOutput {
	return o
}

func (o ModelEncryptionSpecOutput) ToModelEncryptionSpecPtrOutput() ModelEncryptionSpecPtrOutput {
	return o.ToModelEncryptionSpecPtrOutputWithContext(context.Background())
}

func (o ModelEncryptionSpecOutput) ToModelEncryptionSpecPtrOutputWithContext(ctx context.Context) ModelEncryptionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelEncryptionSpec) *ModelEncryptionSpec {
		return &v
	}).(ModelEncryptionSpecPtrOutput)
}

// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
func (o ModelEncryptionSpecOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v ModelEncryptionSpec) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type ModelEncryptionSpecPtrOutput struct{ *pulumi.OutputState }

func (ModelEncryptionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelEncryptionSpec)(nil)).Elem()
}

func (o ModelEncryptionSpecPtrOutput) ToModelEncryptionSpecPtrOutput() ModelEncryptionSpecPtrOutput {
	return o
}

func (o ModelEncryptionSpecPtrOutput) ToModelEncryptionSpecPtrOutputWithContext(ctx context.Context) ModelEncryptionSpecPtrOutput {
	return o
}

func (o ModelEncryptionSpecPtrOutput) Elem() ModelEncryptionSpecOutput {
	return o.ApplyT(func(v *ModelEncryptionSpec) ModelEncryptionSpec {
		if v != nil {
			return *v
		}
		var ret ModelEncryptionSpec
		return ret
	}).(ModelEncryptionSpecOutput)
}

// Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
func (o ModelEncryptionSpecPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelEncryptionSpec) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Output only. If this Model is a copy of another Model, this contains info about the original.
type ModelOriginalModelInfo struct {
	// Output only. The resource name of the Model this Model is a copy of, including the revision. Format: `projects/{project}/locations/{location}/models/{model_id}@{version_id}`
	Model *string `pulumi:"model"`
}

// Output only. If this Model is a copy of another Model, this contains info about the original.
type ModelOriginalModelInfoOutput struct{ *pulumi.OutputState }

func (ModelOriginalModelInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelOriginalModelInfo)(nil)).Elem()
}

func (o ModelOriginalModelInfoOutput) ToModelOriginalModelInfoOutput() ModelOriginalModelInfoOutput {
	return o
}

func (o ModelOriginalModelInfoOutput) ToModelOriginalModelInfoOutputWithContext(ctx context.Context) ModelOriginalModelInfoOutput {
	return o
}

// Output only. The resource name of the Model this Model is a copy of, including the revision. Format: `projects/{project}/locations/{location}/models/{model_id}@{version_id}`
func (o ModelOriginalModelInfoOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelOriginalModelInfo) *string { return v.Model }).(pulumi.StringPtrOutput)
}

type ModelOriginalModelInfoPtrOutput struct{ *pulumi.OutputState }

func (ModelOriginalModelInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelOriginalModelInfo)(nil)).Elem()
}

func (o ModelOriginalModelInfoPtrOutput) ToModelOriginalModelInfoPtrOutput() ModelOriginalModelInfoPtrOutput {
	return o
}

func (o ModelOriginalModelInfoPtrOutput) ToModelOriginalModelInfoPtrOutputWithContext(ctx context.Context) ModelOriginalModelInfoPtrOutput {
	return o
}

func (o ModelOriginalModelInfoPtrOutput) Elem() ModelOriginalModelInfoOutput {
	return o.ApplyT(func(v *ModelOriginalModelInfo) ModelOriginalModelInfo {
		if v != nil {
			return *v
		}
		var ret ModelOriginalModelInfo
		return ret
	}).(ModelOriginalModelInfoOutput)
}

// Output only. The resource name of the Model this Model is a copy of, including the revision. Format: `projects/{project}/locations/{location}/models/{model_id}@{version_id}`
func (o ModelOriginalModelInfoPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelOriginalModelInfo) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

type ModelSupportedExportFormats struct {
	// Output only. The content of this Model that may be exported.
	ExportableContents []ModelSupportedExportFormatsExportableContentsEnum `pulumi:"exportableContents"`
	// Output only. The ID of the export format. The possible format IDs are: * `tflite` Used for Android mobile devices. * `edgetpu-tflite` Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices. * `tf-saved-model` A tensorflow model in SavedModel format. * `tf-js` A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript. * `core-ml` Used for iOS mobile devices. * `custom-trained` A Model that was uploaded or trained by custom code.
	Id *string `pulumi:"id"`
}

type ModelSupportedExportFormatsOutput struct{ *pulumi.OutputState }

func (ModelSupportedExportFormatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelSupportedExportFormats)(nil)).Elem()
}

func (o ModelSupportedExportFormatsOutput) ToModelSupportedExportFormatsOutput() ModelSupportedExportFormatsOutput {
	return o
}

func (o ModelSupportedExportFormatsOutput) ToModelSupportedExportFormatsOutputWithContext(ctx context.Context) ModelSupportedExportFormatsOutput {
	return o
}

// Output only. The content of this Model that may be exported.
func (o ModelSupportedExportFormatsOutput) ExportableContents() ModelSupportedExportFormatsExportableContentsEnumArrayOutput {
	return o.ApplyT(func(v ModelSupportedExportFormats) []ModelSupportedExportFormatsExportableContentsEnum {
		return v.ExportableContents
	}).(ModelSupportedExportFormatsExportableContentsEnumArrayOutput)
}

// Output only. The ID of the export format. The possible format IDs are: * `tflite` Used for Android mobile devices. * `edgetpu-tflite` Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices. * `tf-saved-model` A tensorflow model in SavedModel format. * `tf-js` A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript. * `core-ml` Used for iOS mobile devices. * `custom-trained` A Model that was uploaded or trained by custom code.
func (o ModelSupportedExportFormatsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelSupportedExportFormats) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ModelSupportedExportFormatsArrayOutput struct{ *pulumi.OutputState }

func (ModelSupportedExportFormatsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModelSupportedExportFormats)(nil)).Elem()
}

func (o ModelSupportedExportFormatsArrayOutput) ToModelSupportedExportFormatsArrayOutput() ModelSupportedExportFormatsArrayOutput {
	return o
}

func (o ModelSupportedExportFormatsArrayOutput) ToModelSupportedExportFormatsArrayOutputWithContext(ctx context.Context) ModelSupportedExportFormatsArrayOutput {
	return o
}

func (o ModelSupportedExportFormatsArrayOutput) Index(i pulumi.IntInput) ModelSupportedExportFormatsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ModelSupportedExportFormats {
		return vs[0].([]ModelSupportedExportFormats)[vs[1].(int)]
	}).(ModelSupportedExportFormatsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEncryptionSpecInput)(nil)).Elem(), EndpointEncryptionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEncryptionSpecPtrInput)(nil)).Elem(), EndpointEncryptionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointTrafficSplitTrafficSplitInput)(nil)).Elem(), EndpointTrafficSplitTrafficSplitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointTrafficSplitTrafficSplitArrayInput)(nil)).Elem(), EndpointTrafficSplitTrafficSplitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LabelsInput)(nil)).Elem(), LabelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LabelsPtrInput)(nil)).Elem(), LabelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataStoreEncryptionSpecInput)(nil)).Elem(), MetadataStoreEncryptionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataStoreEncryptionSpecPtrInput)(nil)).Elem(), MetadataStoreEncryptionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelContainerSpecInput)(nil)).Elem(), ModelContainerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelContainerSpecEnvInput)(nil)).Elem(), ModelContainerSpecEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelContainerSpecEnvArrayInput)(nil)).Elem(), ModelContainerSpecEnvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelContainerSpecPortsInput)(nil)).Elem(), ModelContainerSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelContainerSpecPortsArrayInput)(nil)).Elem(), ModelContainerSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDeploymentDedicatedResourcesInput)(nil)).Elem(), ModelDeploymentDedicatedResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDeploymentDedicatedResourcesMachineSpecInput)(nil)).Elem(), ModelDeploymentDedicatedResourcesMachineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelEncryptionSpecInput)(nil)).Elem(), ModelEncryptionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelEncryptionSpecPtrInput)(nil)).Elem(), ModelEncryptionSpecArgs{})
	pulumi.RegisterOutputType(EndpointDeployedModelsOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsArrayOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsAutomaticResourcesOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsAutomaticResourcesPtrOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsDedicatedResourcesOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsDedicatedResourcesPtrOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsDedicatedResourcesAutoscalingMetricSpecsArrayOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsDedicatedResourcesMachineSpecOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsDedicatedResourcesMachineSpecPtrOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsPrivateEndpointsOutput{})
	pulumi.RegisterOutputType(EndpointDeployedModelsPrivateEndpointsPtrOutput{})
	pulumi.RegisterOutputType(EndpointEncryptionSpecOutput{})
	pulumi.RegisterOutputType(EndpointEncryptionSpecPtrOutput{})
	pulumi.RegisterOutputType(EndpointTrafficSplitTrafficSplitOutput{})
	pulumi.RegisterOutputType(EndpointTrafficSplitTrafficSplitArrayOutput{})
	pulumi.RegisterOutputType(LabelsOutput{})
	pulumi.RegisterOutputType(LabelsPtrOutput{})
	pulumi.RegisterOutputType(MetadataStoreEncryptionSpecOutput{})
	pulumi.RegisterOutputType(MetadataStoreEncryptionSpecPtrOutput{})
	pulumi.RegisterOutputType(MetadataStoreStateTypeOutput{})
	pulumi.RegisterOutputType(MetadataStoreStateTypePtrOutput{})
	pulumi.RegisterOutputType(ModelContainerSpecOutput{})
	pulumi.RegisterOutputType(ModelContainerSpecPtrOutput{})
	pulumi.RegisterOutputType(ModelContainerSpecEnvOutput{})
	pulumi.RegisterOutputType(ModelContainerSpecEnvArrayOutput{})
	pulumi.RegisterOutputType(ModelContainerSpecPortsOutput{})
	pulumi.RegisterOutputType(ModelContainerSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ModelDeployedModelsOutput{})
	pulumi.RegisterOutputType(ModelDeployedModelsArrayOutput{})
	pulumi.RegisterOutputType(ModelDeploymentDedicatedResourcesOutput{})
	pulumi.RegisterOutputType(ModelDeploymentDedicatedResourcesPtrOutput{})
	pulumi.RegisterOutputType(ModelDeploymentDedicatedResourcesMachineSpecOutput{})
	pulumi.RegisterOutputType(ModelDeploymentDedicatedResourcesMachineSpecPtrOutput{})
	pulumi.RegisterOutputType(ModelEncryptionSpecOutput{})
	pulumi.RegisterOutputType(ModelEncryptionSpecPtrOutput{})
	pulumi.RegisterOutputType(ModelOriginalModelInfoOutput{})
	pulumi.RegisterOutputType(ModelOriginalModelInfoPtrOutput{})
	pulumi.RegisterOutputType(ModelSupportedExportFormatsOutput{})
	pulumi.RegisterOutputType(ModelSupportedExportFormatsArrayOutput{})
}
