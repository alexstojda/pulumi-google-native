// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ModelDeployment struct {
	pulumi.CustomResourceState

	// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
	DedicatedResources ModelDeploymentDedicatedResourcesPtrOutput `pulumi:"dedicatedResources"`
	// The deployed ID of the model in the endpoint
	DeployedModelId pulumi.StringPtrOutput `pulumi:"deployedModelId"`
	// The name of the endpoint to deploy to
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// The location of the endpoint
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the model to deploy
	Model pulumi.StringPtrOutput `pulumi:"model"`
	// The project of the endpoint
	Project pulumi.StringPtrOutput `pulumi:"project"`
}

// NewModelDeployment registers a new resource with the given unique name, arguments, and options.
func NewModelDeployment(ctx *pulumi.Context,
	name string, args *ModelDeploymentArgs, opts ...pulumi.ResourceOption) (*ModelDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DedicatedResources == nil {
		return nil, errors.New("invalid value for required argument 'DedicatedResources'")
	}
	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Model == nil {
		return nil, errors.New("invalid value for required argument 'Model'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dedicatedResources",
		"deployedModelId",
		"endpoint",
		"location",
		"model",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource ModelDeployment
	err := ctx.RegisterResource("google-native:vertexai/v1:ModelDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelDeployment gets an existing ModelDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelDeploymentState, opts ...pulumi.ResourceOption) (*ModelDeployment, error) {
	var resource ModelDeployment
	err := ctx.ReadResource("google-native:vertexai/v1:ModelDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelDeployment resources.
type modelDeploymentState struct {
}

type ModelDeploymentState struct {
}

func (ModelDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelDeploymentState)(nil)).Elem()
}

type modelDeploymentArgs struct {
	// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
	DedicatedResources ModelDeploymentDedicatedResources `pulumi:"dedicatedResources"`
	// The name of the endpoint to deploy to
	Endpoint string `pulumi:"endpoint"`
	// The location of the endpoint
	Location *string `pulumi:"location"`
	// The name of the model to deploy
	Model string `pulumi:"model"`
	// The project of the endpoint
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ModelDeployment resource.
type ModelDeploymentArgs struct {
	// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
	DedicatedResources ModelDeploymentDedicatedResourcesInput
	// The name of the endpoint to deploy to
	Endpoint pulumi.StringInput
	// The location of the endpoint
	Location pulumi.StringPtrInput
	// The name of the model to deploy
	Model pulumi.StringInput
	// The project of the endpoint
	Project pulumi.StringPtrInput
}

func (ModelDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelDeploymentArgs)(nil)).Elem()
}

type ModelDeploymentInput interface {
	pulumi.Input

	ToModelDeploymentOutput() ModelDeploymentOutput
	ToModelDeploymentOutputWithContext(ctx context.Context) ModelDeploymentOutput
}

func (*ModelDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDeployment)(nil)).Elem()
}

func (i *ModelDeployment) ToModelDeploymentOutput() ModelDeploymentOutput {
	return i.ToModelDeploymentOutputWithContext(context.Background())
}

func (i *ModelDeployment) ToModelDeploymentOutputWithContext(ctx context.Context) ModelDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDeploymentOutput)
}

type ModelDeploymentOutput struct{ *pulumi.OutputState }

func (ModelDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDeployment)(nil)).Elem()
}

func (o ModelDeploymentOutput) ToModelDeploymentOutput() ModelDeploymentOutput {
	return o
}

func (o ModelDeploymentOutput) ToModelDeploymentOutputWithContext(ctx context.Context) ModelDeploymentOutput {
	return o
}

// A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
func (o ModelDeploymentOutput) DedicatedResources() ModelDeploymentDedicatedResourcesPtrOutput {
	return o.ApplyT(func(v *ModelDeployment) ModelDeploymentDedicatedResourcesPtrOutput { return v.DedicatedResources }).(ModelDeploymentDedicatedResourcesPtrOutput)
}

// The deployed ID of the model in the endpoint
func (o ModelDeploymentOutput) DeployedModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDeployment) pulumi.StringPtrOutput { return v.DeployedModelId }).(pulumi.StringPtrOutput)
}

// The name of the endpoint to deploy to
func (o ModelDeploymentOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDeployment) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The location of the endpoint
func (o ModelDeploymentOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDeployment) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the model to deploy
func (o ModelDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDeployment) pulumi.StringPtrOutput { return v.Model }).(pulumi.StringPtrOutput)
}

// The project of the endpoint
func (o ModelDeploymentOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDeployment) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDeploymentInput)(nil)).Elem(), &ModelDeployment{})
	pulumi.RegisterOutputType(ModelDeploymentOutput{})
}
