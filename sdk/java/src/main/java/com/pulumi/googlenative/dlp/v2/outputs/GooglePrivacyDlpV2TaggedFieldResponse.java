// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2FieldIdResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2InfoTypeResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GoogleProtobufEmptyResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GooglePrivacyDlpV2TaggedFieldResponse {
    /**
     * @return A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
     * 
     */
    private String customTag;
    /**
     * @return Identifies the column.
     * 
     */
    private GooglePrivacyDlpV2FieldIdResponse field;
    /**
     * @return If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
     * 
     */
    private GoogleProtobufEmptyResponse inferred;
    /**
     * @return A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
     * 
     */
    private GooglePrivacyDlpV2InfoTypeResponse infoType;

    private GooglePrivacyDlpV2TaggedFieldResponse() {}
    /**
     * @return A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
     * 
     */
    public String customTag() {
        return this.customTag;
    }
    /**
     * @return Identifies the column.
     * 
     */
    public GooglePrivacyDlpV2FieldIdResponse field() {
        return this.field;
    }
    /**
     * @return If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
     * 
     */
    public GoogleProtobufEmptyResponse inferred() {
        return this.inferred;
    }
    /**
     * @return A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
     * 
     */
    public GooglePrivacyDlpV2InfoTypeResponse infoType() {
        return this.infoType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2TaggedFieldResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customTag;
        private GooglePrivacyDlpV2FieldIdResponse field;
        private GoogleProtobufEmptyResponse inferred;
        private GooglePrivacyDlpV2InfoTypeResponse infoType;
        public Builder() {}
        public Builder(GooglePrivacyDlpV2TaggedFieldResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customTag = defaults.customTag;
    	      this.field = defaults.field;
    	      this.inferred = defaults.inferred;
    	      this.infoType = defaults.infoType;
        }

        @CustomType.Setter
        public Builder customTag(String customTag) {
            this.customTag = Objects.requireNonNull(customTag);
            return this;
        }
        @CustomType.Setter
        public Builder field(GooglePrivacyDlpV2FieldIdResponse field) {
            this.field = Objects.requireNonNull(field);
            return this;
        }
        @CustomType.Setter
        public Builder inferred(GoogleProtobufEmptyResponse inferred) {
            this.inferred = Objects.requireNonNull(inferred);
            return this;
        }
        @CustomType.Setter
        public Builder infoType(GooglePrivacyDlpV2InfoTypeResponse infoType) {
            this.infoType = Objects.requireNonNull(infoType);
            return this;
        }
        public GooglePrivacyDlpV2TaggedFieldResponse build() {
            final var o = new GooglePrivacyDlpV2TaggedFieldResponse();
            o.customTag = customTag;
            o.field = field;
            o.inferred = inferred;
            o.infoType = infoType;
            return o;
        }
    }
}
