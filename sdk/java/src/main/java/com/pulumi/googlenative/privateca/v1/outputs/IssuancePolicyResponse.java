// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.privateca.v1.outputs.AllowedKeyTypeResponse;
import com.pulumi.googlenative.privateca.v1.outputs.CertificateExtensionConstraintsResponse;
import com.pulumi.googlenative.privateca.v1.outputs.CertificateIdentityConstraintsResponse;
import com.pulumi.googlenative.privateca.v1.outputs.IssuanceModesResponse;
import com.pulumi.googlenative.privateca.v1.outputs.X509ParametersResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class IssuancePolicyResponse {
    /**
     * @return Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    private IssuanceModesResponse allowedIssuanceModes;
    /**
     * @return Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
     * 
     */
    private List<AllowedKeyTypeResponse> allowedKeyTypes;
    /**
     * @return Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
     * 
     */
    private X509ParametersResponse baselineValues;
    /**
     * @return Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
     * 
     */
    private CertificateIdentityConstraintsResponse identityConstraints;
    /**
     * @return Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    private String maximumLifetime;
    /**
     * @return Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool&#39;s baseline_values.
     * 
     */
    private CertificateExtensionConstraintsResponse passthroughExtensions;

    private IssuancePolicyResponse() {}
    /**
     * @return Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     * 
     */
    public IssuanceModesResponse allowedIssuanceModes() {
        return this.allowedIssuanceModes;
    }
    /**
     * @return Optional. If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here. Otherwise, any key may be used.
     * 
     */
    public List<AllowedKeyTypeResponse> allowedKeyTypes() {
        return this.allowedKeyTypes;
    }
    /**
     * @return Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
     * 
     */
    public X509ParametersResponse baselineValues() {
        return this.baselineValues;
    }
    /**
     * @return Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
     * 
     */
    public CertificateIdentityConstraintsResponse identityConstraints() {
        return this.identityConstraints;
    }
    /**
     * @return Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate&#39;s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    public String maximumLifetime() {
        return this.maximumLifetime;
    }
    /**
     * @return Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool&#39;s baseline_values.
     * 
     */
    public CertificateExtensionConstraintsResponse passthroughExtensions() {
        return this.passthroughExtensions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IssuancePolicyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private IssuanceModesResponse allowedIssuanceModes;
        private List<AllowedKeyTypeResponse> allowedKeyTypes;
        private X509ParametersResponse baselineValues;
        private CertificateIdentityConstraintsResponse identityConstraints;
        private String maximumLifetime;
        private CertificateExtensionConstraintsResponse passthroughExtensions;
        public Builder() {}
        public Builder(IssuancePolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedIssuanceModes = defaults.allowedIssuanceModes;
    	      this.allowedKeyTypes = defaults.allowedKeyTypes;
    	      this.baselineValues = defaults.baselineValues;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.maximumLifetime = defaults.maximumLifetime;
    	      this.passthroughExtensions = defaults.passthroughExtensions;
        }

        @CustomType.Setter
        public Builder allowedIssuanceModes(IssuanceModesResponse allowedIssuanceModes) {
            this.allowedIssuanceModes = Objects.requireNonNull(allowedIssuanceModes);
            return this;
        }
        @CustomType.Setter
        public Builder allowedKeyTypes(List<AllowedKeyTypeResponse> allowedKeyTypes) {
            this.allowedKeyTypes = Objects.requireNonNull(allowedKeyTypes);
            return this;
        }
        public Builder allowedKeyTypes(AllowedKeyTypeResponse... allowedKeyTypes) {
            return allowedKeyTypes(List.of(allowedKeyTypes));
        }
        @CustomType.Setter
        public Builder baselineValues(X509ParametersResponse baselineValues) {
            this.baselineValues = Objects.requireNonNull(baselineValues);
            return this;
        }
        @CustomType.Setter
        public Builder identityConstraints(CertificateIdentityConstraintsResponse identityConstraints) {
            this.identityConstraints = Objects.requireNonNull(identityConstraints);
            return this;
        }
        @CustomType.Setter
        public Builder maximumLifetime(String maximumLifetime) {
            this.maximumLifetime = Objects.requireNonNull(maximumLifetime);
            return this;
        }
        @CustomType.Setter
        public Builder passthroughExtensions(CertificateExtensionConstraintsResponse passthroughExtensions) {
            this.passthroughExtensions = Objects.requireNonNull(passthroughExtensions);
            return this;
        }
        public IssuancePolicyResponse build() {
            final var o = new IssuancePolicyResponse();
            o.allowedIssuanceModes = allowedIssuanceModes;
            o.allowedKeyTypes = allowedKeyTypes;
            o.baselineValues = baselineValues;
            o.identityConstraints = identityConstraints;
            o.maximumLifetime = maximumLifetime;
            o.passthroughExtensions = passthroughExtensions;
            return o;
        }
    }
}
