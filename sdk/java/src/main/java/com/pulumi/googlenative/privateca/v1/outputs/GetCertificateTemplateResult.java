// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.privateca.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.privateca.v1.outputs.CertificateExtensionConstraintsResponse;
import com.pulumi.googlenative.privateca.v1.outputs.CertificateIdentityConstraintsResponse;
import com.pulumi.googlenative.privateca.v1.outputs.X509ParametersResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificateTemplateResult {
    /**
     * @return The time at which this CertificateTemplate was created.
     * 
     */
    private String createTime;
    /**
     * @return Optional. A human-readable description of scenarios this template is intended for.
     * 
     */
    private String description;
    /**
     * @return Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
     * 
     */
    private CertificateIdentityConstraintsResponse identityConstraints;
    /**
     * @return Optional. Labels with user-defined metadata.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The resource name for this CertificateTemplate in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`.
     * 
     */
    private String name;
    /**
     * @return Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
     * 
     */
    private CertificateExtensionConstraintsResponse passthroughExtensions;
    /**
     * @return Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    private X509ParametersResponse predefinedValues;
    /**
     * @return The time at which this CertificateTemplate was updated.
     * 
     */
    private String updateTime;

    private GetCertificateTemplateResult() {}
    /**
     * @return The time at which this CertificateTemplate was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. A human-readable description of scenarios this template is intended for.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate&#39;s identity.
     * 
     */
    public CertificateIdentityConstraintsResponse identityConstraints() {
        return this.identityConstraints;
    }
    /**
     * @return Optional. Labels with user-defined metadata.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name for this CertificateTemplate in the format `projects/*{@literal /}locations/*{@literal /}certificateTemplates/*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don&#39;t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool&#39;s IssuancePolicy defines baseline_values that don&#39;t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate&#39;s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate&#39;s predefined_values.
     * 
     */
    public CertificateExtensionConstraintsResponse passthroughExtensions() {
        return this.passthroughExtensions;
    }
    /**
     * @return Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool&#39;s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     * 
     */
    public X509ParametersResponse predefinedValues() {
        return this.predefinedValues;
    }
    /**
     * @return The time at which this CertificateTemplate was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private CertificateIdentityConstraintsResponse identityConstraints;
        private Map<String,String> labels;
        private String name;
        private CertificateExtensionConstraintsResponse passthroughExtensions;
        private X509ParametersResponse predefinedValues;
        private String updateTime;
        public Builder() {}
        public Builder(GetCertificateTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.passthroughExtensions = defaults.passthroughExtensions;
    	      this.predefinedValues = defaults.predefinedValues;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder identityConstraints(CertificateIdentityConstraintsResponse identityConstraints) {
            this.identityConstraints = Objects.requireNonNull(identityConstraints);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder passthroughExtensions(CertificateExtensionConstraintsResponse passthroughExtensions) {
            this.passthroughExtensions = Objects.requireNonNull(passthroughExtensions);
            return this;
        }
        @CustomType.Setter
        public Builder predefinedValues(X509ParametersResponse predefinedValues) {
            this.predefinedValues = Objects.requireNonNull(predefinedValues);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetCertificateTemplateResult build() {
            final var o = new GetCertificateTemplateResult();
            o.createTime = createTime;
            o.description = description;
            o.identityConstraints = identityConstraints;
            o.labels = labels;
            o.name = name;
            o.passthroughExtensions = passthroughExtensions;
            o.predefinedValues = predefinedValues;
            o.updateTime = updateTime;
            return o;
        }
    }
}
