// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.iam.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKeyResult {
    /**
     * @return The key status.
     * 
     */
    private Boolean disabled;
    /**
     * @return Specifies the algorithm (and possibly key size) for the key.
     * 
     */
    private String keyAlgorithm;
    /**
     * @return The key origin.
     * 
     */
    private String keyOrigin;
    /**
     * @return The key type.
     * 
     */
    private String keyType;
    /**
     * @return The resource name of the service account key in the following format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
     * 
     */
    private String name;
    /**
     * @return The private key data. Only provided in `CreateServiceAccountKey` responses. Make sure to keep the private key data secure because it allows for the assertion of the service account identity. When base64 decoded, the private key data can be used to authenticate with Google API client libraries and with gcloud auth activate-service-account.
     * 
     */
    private String privateKeyData;
    /**
     * @return The output format for the private key. Only provided in `CreateServiceAccountKey` responses, not in `GetServiceAccountKey` or `ListServiceAccountKey` responses. Google never exposes system-managed private keys, and never retains user-managed private keys.
     * 
     */
    private String privateKeyType;
    /**
     * @return The public key data. Only provided in `GetServiceAccountKey` responses.
     * 
     */
    private String publicKeyData;
    /**
     * @return The key can be used after this timestamp.
     * 
     */
    private String validAfterTime;
    /**
     * @return The key can be used before this timestamp. For system-managed key pairs, this timestamp is the end time for the private key signing operation. The public key could still be used for verification for a few hours after this time.
     * 
     */
    private String validBeforeTime;

    private GetKeyResult() {}
    /**
     * @return The key status.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Specifies the algorithm (and possibly key size) for the key.
     * 
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }
    /**
     * @return The key origin.
     * 
     */
    public String keyOrigin() {
        return this.keyOrigin;
    }
    /**
     * @return The key type.
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return The resource name of the service account key in the following format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The private key data. Only provided in `CreateServiceAccountKey` responses. Make sure to keep the private key data secure because it allows for the assertion of the service account identity. When base64 decoded, the private key data can be used to authenticate with Google API client libraries and with gcloud auth activate-service-account.
     * 
     */
    public String privateKeyData() {
        return this.privateKeyData;
    }
    /**
     * @return The output format for the private key. Only provided in `CreateServiceAccountKey` responses, not in `GetServiceAccountKey` or `ListServiceAccountKey` responses. Google never exposes system-managed private keys, and never retains user-managed private keys.
     * 
     */
    public String privateKeyType() {
        return this.privateKeyType;
    }
    /**
     * @return The public key data. Only provided in `GetServiceAccountKey` responses.
     * 
     */
    public String publicKeyData() {
        return this.publicKeyData;
    }
    /**
     * @return The key can be used after this timestamp.
     * 
     */
    public String validAfterTime() {
        return this.validAfterTime;
    }
    /**
     * @return The key can be used before this timestamp. For system-managed key pairs, this timestamp is the end time for the private key signing operation. The public key could still be used for verification for a few hours after this time.
     * 
     */
    public String validBeforeTime() {
        return this.validBeforeTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean disabled;
        private String keyAlgorithm;
        private String keyOrigin;
        private String keyType;
        private String name;
        private String privateKeyData;
        private String privateKeyType;
        private String publicKeyData;
        private String validAfterTime;
        private String validBeforeTime;
        public Builder() {}
        public Builder(GetKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabled = defaults.disabled;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keyOrigin = defaults.keyOrigin;
    	      this.keyType = defaults.keyType;
    	      this.name = defaults.name;
    	      this.privateKeyData = defaults.privateKeyData;
    	      this.privateKeyType = defaults.privateKeyType;
    	      this.publicKeyData = defaults.publicKeyData;
    	      this.validAfterTime = defaults.validAfterTime;
    	      this.validBeforeTime = defaults.validBeforeTime;
        }

        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(String keyAlgorithm) {
            this.keyAlgorithm = Objects.requireNonNull(keyAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder keyOrigin(String keyOrigin) {
            this.keyOrigin = Objects.requireNonNull(keyOrigin);
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            this.keyType = Objects.requireNonNull(keyType);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyData(String privateKeyData) {
            this.privateKeyData = Objects.requireNonNull(privateKeyData);
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyType(String privateKeyType) {
            this.privateKeyType = Objects.requireNonNull(privateKeyType);
            return this;
        }
        @CustomType.Setter
        public Builder publicKeyData(String publicKeyData) {
            this.publicKeyData = Objects.requireNonNull(publicKeyData);
            return this;
        }
        @CustomType.Setter
        public Builder validAfterTime(String validAfterTime) {
            this.validAfterTime = Objects.requireNonNull(validAfterTime);
            return this;
        }
        @CustomType.Setter
        public Builder validBeforeTime(String validBeforeTime) {
            this.validBeforeTime = Objects.requireNonNull(validBeforeTime);
            return this;
        }
        public GetKeyResult build() {
            final var o = new GetKeyResult();
            o.disabled = disabled;
            o.keyAlgorithm = keyAlgorithm;
            o.keyOrigin = keyOrigin;
            o.keyType = keyType;
            o.name = name;
            o.privateKeyData = privateKeyData;
            o.privateKeyType = privateKeyType;
            o.publicKeyData = publicKeyData;
            o.validAfterTime = validAfterTime;
            o.validBeforeTime = validBeforeTime;
            return o;
        }
    }
}
