// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.bigquery.v2.outputs.TableFieldSchemaCategoriesResponse;
import com.pulumi.googlenative.bigquery.v2.outputs.TableFieldSchemaPolicyTagsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TableFieldSchemaResponse {
    /**
     * @return [Optional] The categories attached to this field, used for field-level access control.
     * 
     */
    private TableFieldSchemaCategoriesResponse categories;
    /**
     * @return Optional. Collation specification of the field. It only can be set on string type field.
     * 
     */
    private String collation;
    /**
     * @return Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE &#39;2020-01-01&#39;]
     * 
     */
    private String defaultValueExpression;
    /**
     * @return [Optional] The field description. The maximum length is 1,024 characters.
     * 
     */
    private String description;
    /**
     * @return [Optional] Describes the nested schema fields if the type property is set to RECORD.
     * 
     */
    private List<TableFieldSchemaResponse> fields;
    /**
     * @return [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = &#34;STRING&#34;, then max_length represents the maximum UTF-8 length of strings in this field. If type = &#34;BYTES&#34;, then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ &#34;STRING&#34; and ≠ &#34;BYTES&#34;.
     * 
     */
    private String maxLength;
    /**
     * @return [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
     * 
     */
    private String mode;
    /**
     * @return [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
     * 
     */
    private String name;
    private TableFieldSchemaPolicyTagsResponse policyTags;
    /**
     * @return [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ &#34;NUMERIC&#34; and ≠ &#34;BIGNUMERIC&#34;. If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = &#34;NUMERIC&#34;: 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = &#34;NUMERIC&#34;: 1 ≤ precision ≤ 29. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
     * 
     */
    private String precision;
    /**
     * @return [Optional] See documentation for precision.
     * 
     */
    private String scale;
    /**
     * @return [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
     * 
     */
    private String type;

    private TableFieldSchemaResponse() {}
    /**
     * @return [Optional] The categories attached to this field, used for field-level access control.
     * 
     */
    public TableFieldSchemaCategoriesResponse categories() {
        return this.categories;
    }
    /**
     * @return Optional. Collation specification of the field. It only can be set on string type field.
     * 
     */
    public String collation() {
        return this.collation;
    }
    /**
     * @return Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE &#39;2020-01-01&#39;]
     * 
     */
    public String defaultValueExpression() {
        return this.defaultValueExpression;
    }
    /**
     * @return [Optional] The field description. The maximum length is 1,024 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return [Optional] Describes the nested schema fields if the type property is set to RECORD.
     * 
     */
    public List<TableFieldSchemaResponse> fields() {
        return this.fields;
    }
    /**
     * @return [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = &#34;STRING&#34;, then max_length represents the maximum UTF-8 length of strings in this field. If type = &#34;BYTES&#34;, then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ &#34;STRING&#34; and ≠ &#34;BYTES&#34;.
     * 
     */
    public String maxLength() {
        return this.maxLength;
    }
    /**
     * @return [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    public TableFieldSchemaPolicyTagsResponse policyTags() {
        return this.policyTags;
    }
    /**
     * @return [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ &#34;NUMERIC&#34; and ≠ &#34;BIGNUMERIC&#34;. If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = &#34;NUMERIC&#34;: 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = &#34;NUMERIC&#34;: 1 ≤ precision ≤ 29. - If type = &#34;BIGNUMERIC&#34;: 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
     * 
     */
    public String precision() {
        return this.precision;
    }
    /**
     * @return [Optional] See documentation for precision.
     * 
     */
    public String scale() {
        return this.scale;
    }
    /**
     * @return [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableFieldSchemaResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private TableFieldSchemaCategoriesResponse categories;
        private String collation;
        private String defaultValueExpression;
        private String description;
        private List<TableFieldSchemaResponse> fields;
        private String maxLength;
        private String mode;
        private String name;
        private TableFieldSchemaPolicyTagsResponse policyTags;
        private String precision;
        private String scale;
        private String type;
        public Builder() {}
        public Builder(TableFieldSchemaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.collation = defaults.collation;
    	      this.defaultValueExpression = defaults.defaultValueExpression;
    	      this.description = defaults.description;
    	      this.fields = defaults.fields;
    	      this.maxLength = defaults.maxLength;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.policyTags = defaults.policyTags;
    	      this.precision = defaults.precision;
    	      this.scale = defaults.scale;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder categories(TableFieldSchemaCategoriesResponse categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }
        @CustomType.Setter
        public Builder collation(String collation) {
            this.collation = Objects.requireNonNull(collation);
            return this;
        }
        @CustomType.Setter
        public Builder defaultValueExpression(String defaultValueExpression) {
            this.defaultValueExpression = Objects.requireNonNull(defaultValueExpression);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder fields(List<TableFieldSchemaResponse> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(TableFieldSchemaResponse... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder maxLength(String maxLength) {
            this.maxLength = Objects.requireNonNull(maxLength);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder policyTags(TableFieldSchemaPolicyTagsResponse policyTags) {
            this.policyTags = Objects.requireNonNull(policyTags);
            return this;
        }
        @CustomType.Setter
        public Builder precision(String precision) {
            this.precision = Objects.requireNonNull(precision);
            return this;
        }
        @CustomType.Setter
        public Builder scale(String scale) {
            this.scale = Objects.requireNonNull(scale);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public TableFieldSchemaResponse build() {
            final var o = new TableFieldSchemaResponse();
            o.categories = categories;
            o.collation = collation;
            o.defaultValueExpression = defaultValueExpression;
            o.description = description;
            o.fields = fields;
            o.maxLength = maxLength;
            o.mode = mode;
            o.name = name;
            o.policyTags = policyTags;
            o.precision = precision;
            o.scale = scale;
            o.type = type;
            return o;
        }
    }
}
