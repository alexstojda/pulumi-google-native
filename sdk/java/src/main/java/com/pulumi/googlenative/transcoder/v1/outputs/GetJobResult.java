// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.transcoder.v1.outputs.JobConfigResponse;
import com.pulumi.googlenative.transcoder.v1.outputs.StatusResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetJobResult {
    /**
     * @return The configuration for this job.
     * 
     */
    private JobConfigResponse config;
    /**
     * @return The time the job was created.
     * 
     */
    private String createTime;
    /**
     * @return The time the transcoding finished.
     * 
     */
    private String endTime;
    /**
     * @return An error object that describes the reason for the failure. This property is always present when `state` is `FAILED`.
     * 
     */
    private StatusResponse error;
    /**
     * @return Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
     * 
     */
    private String inputUri;
    /**
     * @return The labels associated with this job. You can use these to organize and group your jobs.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`
     * 
     */
    private String name;
    /**
     * @return Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
     * 
     */
    private String outputUri;
    /**
     * @return The time the transcoding started.
     * 
     */
    private String startTime;
    /**
     * @return The current state of the job.
     * 
     */
    private String state;
    /**
     * @return Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`
     * 
     */
    private String templateId;
    /**
     * @return Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
     * 
     */
    private Integer ttlAfterCompletionDays;

    private GetJobResult() {}
    /**
     * @return The configuration for this job.
     * 
     */
    public JobConfigResponse config() {
        return this.config;
    }
    /**
     * @return The time the job was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The time the transcoding finished.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return An error object that describes the reason for the failure. This property is always present when `state` is `FAILED`.
     * 
     */
    public StatusResponse error() {
        return this.error;
    }
    /**
     * @return Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
     * 
     */
    public String inputUri() {
        return this.inputUri;
    }
    /**
     * @return The labels associated with this job. You can use these to organize and group your jobs.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
     * 
     */
    public String outputUri() {
        return this.outputUri;
    }
    /**
     * @return The time the transcoding started.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The current state of the job.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`. Preset Transcoder templates: - `preset/{preset_id}` - User defined JobTemplate: `{job_template_id}`
     * 
     */
    public String templateId() {
        return this.templateId;
    }
    /**
     * @return Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.
     * 
     */
    public Integer ttlAfterCompletionDays() {
        return this.ttlAfterCompletionDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetJobResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private JobConfigResponse config;
        private String createTime;
        private String endTime;
        private StatusResponse error;
        private String inputUri;
        private Map<String,String> labels;
        private String name;
        private String outputUri;
        private String startTime;
        private String state;
        private String templateId;
        private Integer ttlAfterCompletionDays;
        public Builder() {}
        public Builder(GetJobResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.createTime = defaults.createTime;
    	      this.endTime = defaults.endTime;
    	      this.error = defaults.error;
    	      this.inputUri = defaults.inputUri;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.outputUri = defaults.outputUri;
    	      this.startTime = defaults.startTime;
    	      this.state = defaults.state;
    	      this.templateId = defaults.templateId;
    	      this.ttlAfterCompletionDays = defaults.ttlAfterCompletionDays;
        }

        @CustomType.Setter
        public Builder config(JobConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        @CustomType.Setter
        public Builder error(StatusResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        @CustomType.Setter
        public Builder inputUri(String inputUri) {
            this.inputUri = Objects.requireNonNull(inputUri);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outputUri(String outputUri) {
            this.outputUri = Objects.requireNonNull(outputUri);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            this.templateId = Objects.requireNonNull(templateId);
            return this;
        }
        @CustomType.Setter
        public Builder ttlAfterCompletionDays(Integer ttlAfterCompletionDays) {
            this.ttlAfterCompletionDays = Objects.requireNonNull(ttlAfterCompletionDays);
            return this;
        }
        public GetJobResult build() {
            final var o = new GetJobResult();
            o.config = config;
            o.createTime = createTime;
            o.endTime = endTime;
            o.error = error;
            o.inputUri = inputUri;
            o.labels = labels;
            o.name = name;
            o.outputUri = outputUri;
            o.startTime = startTime;
            o.state = state;
            o.templateId = templateId;
            o.ttlAfterCompletionDays = ttlAfterCompletionDays;
            return o;
        }
    }
}
