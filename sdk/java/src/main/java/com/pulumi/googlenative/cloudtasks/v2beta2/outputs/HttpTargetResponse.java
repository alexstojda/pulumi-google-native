// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudtasks.v2beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudtasks.v2beta2.outputs.HeaderOverrideResponse;
import com.pulumi.googlenative.cloudtasks.v2beta2.outputs.OAuthTokenResponse;
import com.pulumi.googlenative.cloudtasks.v2beta2.outputs.OidcTokenResponse;
import com.pulumi.googlenative.cloudtasks.v2beta2.outputs.UriOverrideResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class HttpTargetResponse {
    /**
     * @return HTTP target headers. This map contains the header field names and values. Headers will be set when running the task is created and/or task is created. These headers represent a subset of the headers that will accompany the task&#39;s HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Any header that is prefixed with &#34;X-Google-Cloud-Tasks-&#34; will be treated as service header. Service headers define properties of the task and are predefined in CloudTask. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `&#34;Google-Cloud-Tasks&#34;`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won&#39;t be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `&#34;application/octet-stream&#34;` or `&#34;application/json&#34;`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.
     * 
     */
    private List<HeaderOverrideResponse> headerOverrides;
    /**
     * @return The HTTP method to use for the request. When specified, it will override HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.
     * 
     */
    private String httpMethod;
    /**
     * @return If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
     * 
     */
    private OAuthTokenResponse oauthToken;
    /**
     * @return If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
     * 
     */
    private OidcTokenResponse oidcToken;
    /**
     * @return Uri override. When specified modifies the execution Uri for all the tasks in the queue.
     * 
     */
    private UriOverrideResponse uriOverride;

    private HttpTargetResponse() {}
    /**
     * @return HTTP target headers. This map contains the header field names and values. Headers will be set when running the task is created and/or task is created. These headers represent a subset of the headers that will accompany the task&#39;s HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Any header that is prefixed with &#34;X-Google-Cloud-Tasks-&#34; will be treated as service header. Service headers define properties of the task and are predefined in CloudTask. * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `&#34;Google-Cloud-Tasks&#34;`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won&#39;t be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `&#34;application/octet-stream&#34;` or `&#34;application/json&#34;`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB. Queue-level headers to override headers of all the tasks in the queue.
     * 
     */
    public List<HeaderOverrideResponse> headerOverrides() {
        return this.headerOverrides;
    }
    /**
     * @return The HTTP method to use for the request. When specified, it will override HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.
     * 
     */
    public String httpMethod() {
        return this.httpMethod;
    }
    /**
     * @return If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
     * 
     */
    public OAuthTokenResponse oauthToken() {
        return this.oauthToken;
    }
    /**
     * @return If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
     * 
     */
    public OidcTokenResponse oidcToken() {
        return this.oidcToken;
    }
    /**
     * @return Uri override. When specified modifies the execution Uri for all the tasks in the queue.
     * 
     */
    public UriOverrideResponse uriOverride() {
        return this.uriOverride;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpTargetResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<HeaderOverrideResponse> headerOverrides;
        private String httpMethod;
        private OAuthTokenResponse oauthToken;
        private OidcTokenResponse oidcToken;
        private UriOverrideResponse uriOverride;
        public Builder() {}
        public Builder(HttpTargetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headerOverrides = defaults.headerOverrides;
    	      this.httpMethod = defaults.httpMethod;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oidcToken = defaults.oidcToken;
    	      this.uriOverride = defaults.uriOverride;
        }

        @CustomType.Setter
        public Builder headerOverrides(List<HeaderOverrideResponse> headerOverrides) {
            this.headerOverrides = Objects.requireNonNull(headerOverrides);
            return this;
        }
        public Builder headerOverrides(HeaderOverrideResponse... headerOverrides) {
            return headerOverrides(List.of(headerOverrides));
        }
        @CustomType.Setter
        public Builder httpMethod(String httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }
        @CustomType.Setter
        public Builder oauthToken(OAuthTokenResponse oauthToken) {
            this.oauthToken = Objects.requireNonNull(oauthToken);
            return this;
        }
        @CustomType.Setter
        public Builder oidcToken(OidcTokenResponse oidcToken) {
            this.oidcToken = Objects.requireNonNull(oidcToken);
            return this;
        }
        @CustomType.Setter
        public Builder uriOverride(UriOverrideResponse uriOverride) {
            this.uriOverride = Objects.requireNonNull(uriOverride);
            return this;
        }
        public HttpTargetResponse build() {
            final var o = new HttpTargetResponse();
            o.headerOverrides = headerOverrides;
            o.httpMethod = httpMethod;
            o.oauthToken = oauthToken;
            o.oidcToken = oidcToken;
            o.uriOverride = uriOverride;
            return o;
        }
    }
}
