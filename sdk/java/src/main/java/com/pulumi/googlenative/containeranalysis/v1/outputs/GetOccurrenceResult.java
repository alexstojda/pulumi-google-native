// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1.outputs.AttestationOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.BuildOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.ComplianceOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.DSSEAttestationOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.DeploymentOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.DiscoveryOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.EnvelopeResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.ImageOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.PackageOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.UpgradeOccurrenceResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.VulnerabilityOccurrenceResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetOccurrenceResult {
    /**
     * @return Describes an attestation of an artifact.
     * 
     */
    private AttestationOccurrenceResponse attestation;
    /**
     * @return Describes a verifiable build.
     * 
     */
    private BuildOccurrenceResponse build;
    /**
     * @return Describes a compliance violation on a linked resource.
     * 
     */
    private ComplianceOccurrenceResponse compliance;
    /**
     * @return The time this occurrence was created.
     * 
     */
    private String createTime;
    /**
     * @return Describes the deployment of an artifact on a runtime.
     * 
     */
    private DeploymentOccurrenceResponse deployment;
    /**
     * @return Describes when a resource was discovered.
     * 
     */
    private DiscoveryOccurrenceResponse discovery;
    /**
     * @return Describes an attestation of an artifact using dsse.
     * 
     */
    private DSSEAttestationOccurrenceResponse dsseAttestation;
    /**
     * @return https://github.com/secure-systems-lab/dsse
     * 
     */
    private EnvelopeResponse envelope;
    /**
     * @return Describes how this resource derives from the basis in the associated note.
     * 
     */
    private ImageOccurrenceResponse image;
    /**
     * @return This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
     * 
     */
    private String kind;
    /**
     * @return The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
     * 
     */
    private String name;
    /**
     * @return Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
     * 
     */
    private String noteName;
    /**
     * @return Describes the installation of a package on the linked resource.
     * 
     */
    private PackageOccurrenceResponse package_;
    /**
     * @return A description of actions that can be taken to remedy the note.
     * 
     */
    private String remediation;
    /**
     * @return Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
     * 
     */
    private String resourceUri;
    /**
     * @return The time this occurrence was last updated.
     * 
     */
    private String updateTime;
    /**
     * @return Describes an available package upgrade on the linked resource.
     * 
     */
    private UpgradeOccurrenceResponse upgrade;
    /**
     * @return Describes a security vulnerability.
     * 
     */
    private VulnerabilityOccurrenceResponse vulnerability;

    private GetOccurrenceResult() {}
    /**
     * @return Describes an attestation of an artifact.
     * 
     */
    public AttestationOccurrenceResponse attestation() {
        return this.attestation;
    }
    /**
     * @return Describes a verifiable build.
     * 
     */
    public BuildOccurrenceResponse build() {
        return this.build;
    }
    /**
     * @return Describes a compliance violation on a linked resource.
     * 
     */
    public ComplianceOccurrenceResponse compliance() {
        return this.compliance;
    }
    /**
     * @return The time this occurrence was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Describes the deployment of an artifact on a runtime.
     * 
     */
    public DeploymentOccurrenceResponse deployment() {
        return this.deployment;
    }
    /**
     * @return Describes when a resource was discovered.
     * 
     */
    public DiscoveryOccurrenceResponse discovery() {
        return this.discovery;
    }
    /**
     * @return Describes an attestation of an artifact using dsse.
     * 
     */
    public DSSEAttestationOccurrenceResponse dsseAttestation() {
        return this.dsseAttestation;
    }
    /**
     * @return https://github.com/secure-systems-lab/dsse
     * 
     */
    public EnvelopeResponse envelope() {
        return this.envelope;
    }
    /**
     * @return Describes how this resource derives from the basis in the associated note.
     * 
     */
    public ImageOccurrenceResponse image() {
        return this.image;
    }
    /**
     * @return This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
     * 
     */
    public String noteName() {
        return this.noteName;
    }
    /**
     * @return Describes the installation of a package on the linked resource.
     * 
     */
    public PackageOccurrenceResponse package_() {
        return this.package_;
    }
    /**
     * @return A description of actions that can be taken to remedy the note.
     * 
     */
    public String remediation() {
        return this.remediation;
    }
    /**
     * @return Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
     * 
     */
    public String resourceUri() {
        return this.resourceUri;
    }
    /**
     * @return The time this occurrence was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return Describes an available package upgrade on the linked resource.
     * 
     */
    public UpgradeOccurrenceResponse upgrade() {
        return this.upgrade;
    }
    /**
     * @return Describes a security vulnerability.
     * 
     */
    public VulnerabilityOccurrenceResponse vulnerability() {
        return this.vulnerability;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOccurrenceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private AttestationOccurrenceResponse attestation;
        private BuildOccurrenceResponse build;
        private ComplianceOccurrenceResponse compliance;
        private String createTime;
        private DeploymentOccurrenceResponse deployment;
        private DiscoveryOccurrenceResponse discovery;
        private DSSEAttestationOccurrenceResponse dsseAttestation;
        private EnvelopeResponse envelope;
        private ImageOccurrenceResponse image;
        private String kind;
        private String name;
        private String noteName;
        private PackageOccurrenceResponse package_;
        private String remediation;
        private String resourceUri;
        private String updateTime;
        private UpgradeOccurrenceResponse upgrade;
        private VulnerabilityOccurrenceResponse vulnerability;
        public Builder() {}
        public Builder(GetOccurrenceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attestation = defaults.attestation;
    	      this.build = defaults.build;
    	      this.compliance = defaults.compliance;
    	      this.createTime = defaults.createTime;
    	      this.deployment = defaults.deployment;
    	      this.discovery = defaults.discovery;
    	      this.dsseAttestation = defaults.dsseAttestation;
    	      this.envelope = defaults.envelope;
    	      this.image = defaults.image;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.noteName = defaults.noteName;
    	      this.package_ = defaults.package_;
    	      this.remediation = defaults.remediation;
    	      this.resourceUri = defaults.resourceUri;
    	      this.updateTime = defaults.updateTime;
    	      this.upgrade = defaults.upgrade;
    	      this.vulnerability = defaults.vulnerability;
        }

        @CustomType.Setter
        public Builder attestation(AttestationOccurrenceResponse attestation) {
            this.attestation = Objects.requireNonNull(attestation);
            return this;
        }
        @CustomType.Setter
        public Builder build(BuildOccurrenceResponse build) {
            this.build = Objects.requireNonNull(build);
            return this;
        }
        @CustomType.Setter
        public Builder compliance(ComplianceOccurrenceResponse compliance) {
            this.compliance = Objects.requireNonNull(compliance);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder deployment(DeploymentOccurrenceResponse deployment) {
            this.deployment = Objects.requireNonNull(deployment);
            return this;
        }
        @CustomType.Setter
        public Builder discovery(DiscoveryOccurrenceResponse discovery) {
            this.discovery = Objects.requireNonNull(discovery);
            return this;
        }
        @CustomType.Setter
        public Builder dsseAttestation(DSSEAttestationOccurrenceResponse dsseAttestation) {
            this.dsseAttestation = Objects.requireNonNull(dsseAttestation);
            return this;
        }
        @CustomType.Setter
        public Builder envelope(EnvelopeResponse envelope) {
            this.envelope = Objects.requireNonNull(envelope);
            return this;
        }
        @CustomType.Setter
        public Builder image(ImageOccurrenceResponse image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder noteName(String noteName) {
            this.noteName = Objects.requireNonNull(noteName);
            return this;
        }
        @CustomType.Setter("package")
        public Builder package_(PackageOccurrenceResponse package_) {
            this.package_ = Objects.requireNonNull(package_);
            return this;
        }
        @CustomType.Setter
        public Builder remediation(String remediation) {
            this.remediation = Objects.requireNonNull(remediation);
            return this;
        }
        @CustomType.Setter
        public Builder resourceUri(String resourceUri) {
            this.resourceUri = Objects.requireNonNull(resourceUri);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        @CustomType.Setter
        public Builder upgrade(UpgradeOccurrenceResponse upgrade) {
            this.upgrade = Objects.requireNonNull(upgrade);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerability(VulnerabilityOccurrenceResponse vulnerability) {
            this.vulnerability = Objects.requireNonNull(vulnerability);
            return this;
        }
        public GetOccurrenceResult build() {
            final var o = new GetOccurrenceResult();
            o.attestation = attestation;
            o.build = build;
            o.compliance = compliance;
            o.createTime = createTime;
            o.deployment = deployment;
            o.discovery = discovery;
            o.dsseAttestation = dsseAttestation;
            o.envelope = envelope;
            o.image = image;
            o.kind = kind;
            o.name = name;
            o.noteName = noteName;
            o.package_ = package_;
            o.remediation = remediation;
            o.resourceUri = resourceUri;
            o.updateTime = updateTime;
            o.upgrade = upgrade;
            o.vulnerability = vulnerability;
            return o;
        }
    }
}
