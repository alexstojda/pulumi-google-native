// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2LikelihoodAdjustmentResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2ProximityResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2RegexResponse;
import java.util.Objects;

@CustomType
public final class GooglePrivacyDlpV2HotwordRuleResponse {
    /**
     * @return Regular expression pattern defining what qualifies as a hotword.
     * 
     */
    private GooglePrivacyDlpV2RegexResponse hotwordRegex;
    /**
     * @return Likelihood adjustment to apply to all matching findings.
     * 
     */
    private GooglePrivacyDlpV2LikelihoodAdjustmentResponse likelihoodAdjustment;
    /**
     * @return Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex &#34;\(\d{3}\) \d{3}-\d{4}&#34; if the area code is known to be the area code of a company&#39;s office. In this case, use the hotword regex &#34;\(xxx\)&#34;, where &#34;xxx&#34; is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
     * 
     */
    private GooglePrivacyDlpV2ProximityResponse proximity;

    private GooglePrivacyDlpV2HotwordRuleResponse() {}
    /**
     * @return Regular expression pattern defining what qualifies as a hotword.
     * 
     */
    public GooglePrivacyDlpV2RegexResponse hotwordRegex() {
        return this.hotwordRegex;
    }
    /**
     * @return Likelihood adjustment to apply to all matching findings.
     * 
     */
    public GooglePrivacyDlpV2LikelihoodAdjustmentResponse likelihoodAdjustment() {
        return this.likelihoodAdjustment;
    }
    /**
     * @return Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex &#34;\(\d{3}\) \d{3}-\d{4}&#34; if the area code is known to be the area code of a company&#39;s office. In this case, use the hotword regex &#34;\(xxx\)&#34;, where &#34;xxx&#34; is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
     * 
     */
    public GooglePrivacyDlpV2ProximityResponse proximity() {
        return this.proximity;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2HotwordRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GooglePrivacyDlpV2RegexResponse hotwordRegex;
        private GooglePrivacyDlpV2LikelihoodAdjustmentResponse likelihoodAdjustment;
        private GooglePrivacyDlpV2ProximityResponse proximity;
        public Builder() {}
        public Builder(GooglePrivacyDlpV2HotwordRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hotwordRegex = defaults.hotwordRegex;
    	      this.likelihoodAdjustment = defaults.likelihoodAdjustment;
    	      this.proximity = defaults.proximity;
        }

        @CustomType.Setter
        public Builder hotwordRegex(GooglePrivacyDlpV2RegexResponse hotwordRegex) {
            this.hotwordRegex = Objects.requireNonNull(hotwordRegex);
            return this;
        }
        @CustomType.Setter
        public Builder likelihoodAdjustment(GooglePrivacyDlpV2LikelihoodAdjustmentResponse likelihoodAdjustment) {
            this.likelihoodAdjustment = Objects.requireNonNull(likelihoodAdjustment);
            return this;
        }
        @CustomType.Setter
        public Builder proximity(GooglePrivacyDlpV2ProximityResponse proximity) {
            this.proximity = Objects.requireNonNull(proximity);
            return this;
        }
        public GooglePrivacyDlpV2HotwordRuleResponse build() {
            final var o = new GooglePrivacyDlpV2HotwordRuleResponse();
            o.hotwordRegex = hotwordRegex;
            o.likelihoodAdjustment = likelihoodAdjustment;
            o.proximity = proximity;
            return o;
        }
    }
}
