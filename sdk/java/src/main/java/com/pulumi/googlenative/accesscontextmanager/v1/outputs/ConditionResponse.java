// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.accesscontextmanager.v1.outputs.DevicePolicyResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ConditionResponse {
    /**
     * @return Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed.
     * 
     */
    private DevicePolicyResponse devicePolicy;
    /**
     * @return CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, &#34;192.0.2.0/24&#34; is accepted but &#34;192.0.2.1/24&#34; is not. Similarly, for IPv6, &#34;2001:db8::/32&#34; is accepted whereas &#34;2001:db8::1/32&#34; is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
     * 
     */
    private List<String> ipSubnetworks;
    /**
     * @return The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.
     * 
     */
    private List<String> members;
    /**
     * @return Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.
     * 
     */
    private Boolean negate;
    /**
     * @return The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
     * 
     */
    private List<String> regions;
    /**
     * @return A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: &#34;`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME&#34;`
     * 
     */
    private List<String> requiredAccessLevels;

    private ConditionResponse() {}
    /**
     * @return Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed.
     * 
     */
    public DevicePolicyResponse devicePolicy() {
        return this.devicePolicy;
    }
    /**
     * @return CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, &#34;192.0.2.0/24&#34; is accepted but &#34;192.0.2.1/24&#34; is not. Similarly, for IPv6, &#34;2001:db8::/32&#34; is accepted whereas &#34;2001:db8::1/32&#34; is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
     * 
     */
    public List<String> ipSubnetworks() {
        return this.ipSubnetworks;
    }
    /**
     * @return The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.
     * 
     */
    public List<String> members() {
        return this.members;
    }
    /**
     * @return Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to false.
     * 
     */
    public Boolean negate() {
        return this.negate;
    }
    /**
     * @return The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
     * 
     */
    public List<String> regions() {
        return this.regions;
    }
    /**
     * @return A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: &#34;`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME&#34;`
     * 
     */
    public List<String> requiredAccessLevels() {
        return this.requiredAccessLevels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private DevicePolicyResponse devicePolicy;
        private List<String> ipSubnetworks;
        private List<String> members;
        private Boolean negate;
        private List<String> regions;
        private List<String> requiredAccessLevels;
        public Builder() {}
        public Builder(ConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.devicePolicy = defaults.devicePolicy;
    	      this.ipSubnetworks = defaults.ipSubnetworks;
    	      this.members = defaults.members;
    	      this.negate = defaults.negate;
    	      this.regions = defaults.regions;
    	      this.requiredAccessLevels = defaults.requiredAccessLevels;
        }

        @CustomType.Setter
        public Builder devicePolicy(DevicePolicyResponse devicePolicy) {
            this.devicePolicy = Objects.requireNonNull(devicePolicy);
            return this;
        }
        @CustomType.Setter
        public Builder ipSubnetworks(List<String> ipSubnetworks) {
            this.ipSubnetworks = Objects.requireNonNull(ipSubnetworks);
            return this;
        }
        public Builder ipSubnetworks(String... ipSubnetworks) {
            return ipSubnetworks(List.of(ipSubnetworks));
        }
        @CustomType.Setter
        public Builder members(List<String> members) {
            this.members = Objects.requireNonNull(members);
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder negate(Boolean negate) {
            this.negate = Objects.requireNonNull(negate);
            return this;
        }
        @CustomType.Setter
        public Builder regions(List<String> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder requiredAccessLevels(List<String> requiredAccessLevels) {
            this.requiredAccessLevels = Objects.requireNonNull(requiredAccessLevels);
            return this;
        }
        public Builder requiredAccessLevels(String... requiredAccessLevels) {
            return requiredAccessLevels(List.of(requiredAccessLevels));
        }
        public ConditionResponse build() {
            final var o = new ConditionResponse();
            o.devicePolicy = devicePolicy;
            o.ipSubnetworks = ipSubnetworks;
            o.members = members;
            o.negate = negate;
            o.regions = regions;
            o.requiredAccessLevels = requiredAccessLevels;
            return o;
        }
    }
}
