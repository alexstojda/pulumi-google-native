// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CommandResponse {
    /**
     * @return Command-line arguments used when executing this command.
     * 
     */
    private List<String> args;
    /**
     * @return Working directory (relative to project source root) used when running this command.
     * 
     */
    private String dir;
    /**
     * @return Environment variables set before running this command.
     * 
     */
    private List<String> env;
    /**
     * @return Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     * 
     */
    private String name;
    /**
     * @return The ID(s) of the command(s) that this command depends on.
     * 
     */
    private List<String> waitFor;

    private CommandResponse() {}
    /**
     * @return Command-line arguments used when executing this command.
     * 
     */
    public List<String> args() {
        return this.args;
    }
    /**
     * @return Working directory (relative to project source root) used when running this command.
     * 
     */
    public String dir() {
        return this.dir;
    }
    /**
     * @return Environment variables set before running this command.
     * 
     */
    public List<String> env() {
        return this.env;
    }
    /**
     * @return Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID(s) of the command(s) that this command depends on.
     * 
     */
    public List<String> waitFor() {
        return this.waitFor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommandResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> args;
        private String dir;
        private List<String> env;
        private String name;
        private List<String> waitFor;
        public Builder() {}
        public Builder(CommandResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.args = defaults.args;
    	      this.dir = defaults.dir;
    	      this.env = defaults.env;
    	      this.name = defaults.name;
    	      this.waitFor = defaults.waitFor;
        }

        @CustomType.Setter
        public Builder args(List<String> args) {
            this.args = Objects.requireNonNull(args);
            return this;
        }
        public Builder args(String... args) {
            return args(List.of(args));
        }
        @CustomType.Setter
        public Builder dir(String dir) {
            this.dir = Objects.requireNonNull(dir);
            return this;
        }
        @CustomType.Setter
        public Builder env(List<String> env) {
            this.env = Objects.requireNonNull(env);
            return this;
        }
        public Builder env(String... env) {
            return env(List.of(env));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder waitFor(List<String> waitFor) {
            this.waitFor = Objects.requireNonNull(waitFor);
            return this;
        }
        public Builder waitFor(String... waitFor) {
            return waitFor(List.of(waitFor));
        }
        public CommandResponse build() {
            final var o = new CommandResponse();
            o.args = args;
            o.dir = dir;
            o.env = env;
            o.name = name;
            o.waitFor = waitFor;
            return o;
        }
    }
}
