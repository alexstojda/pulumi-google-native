// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.transcoder.v1.outputs.PreprocessingConfigResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class InputResponse {
    /**
     * @return A unique key for this input. Must be specified when using advanced mapping and edit lists.
     * 
     */
    private String key;
    /**
     * @return Preprocessing configurations.
     * 
     */
    private PreprocessingConfigResponse preprocessingConfig;
    /**
     * @return URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from `Job.input_uri`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
     * 
     */
    private String uri;

    private InputResponse() {}
    /**
     * @return A unique key for this input. Must be specified when using advanced mapping and edit lists.
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Preprocessing configurations.
     * 
     */
    public PreprocessingConfigResponse preprocessingConfig() {
        return this.preprocessingConfig;
    }
    /**
     * @return URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from `Job.input_uri`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InputResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String key;
        private PreprocessingConfigResponse preprocessingConfig;
        private String uri;
        public Builder() {}
        public Builder(InputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.key = defaults.key;
    	      this.preprocessingConfig = defaults.preprocessingConfig;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder preprocessingConfig(PreprocessingConfigResponse preprocessingConfig) {
            this.preprocessingConfig = Objects.requireNonNull(preprocessingConfig);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public InputResponse build() {
            final var o = new InputResponse();
            o.key = key;
            o.preprocessingConfig = preprocessingConfig;
            o.uri = uri;
            return o;
        }
    }
}
