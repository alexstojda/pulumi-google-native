// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.FieldMetadataArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies how to handle de-identification of a FHIR store.
 * 
 */
public final class FhirConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FhirConfigArgs Empty = new FhirConfigArgs();

    /**
     * The behaviour for handling FHIR extensions that aren&#39;t otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
     * 
     */
    @Import(name="defaultKeepExtensions")
    private @Nullable Output<Boolean> defaultKeepExtensions;

    /**
     * @return The behaviour for handling FHIR extensions that aren&#39;t otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
     * 
     */
    public Optional<Output<Boolean>> defaultKeepExtensions() {
        return Optional.ofNullable(this.defaultKeepExtensions);
    }

    /**
     * Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`. If a field can be matched by more than one FieldMetadata, the first FieldMetadata.Action is applied.
     * 
     */
    @Import(name="fieldMetadataList")
    private @Nullable Output<List<FieldMetadataArgs>> fieldMetadataList;

    /**
     * @return Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`. If a field can be matched by more than one FieldMetadata, the first FieldMetadata.Action is applied.
     * 
     */
    public Optional<Output<List<FieldMetadataArgs>>> fieldMetadataList() {
        return Optional.ofNullable(this.fieldMetadataList);
    }

    private FhirConfigArgs() {}

    private FhirConfigArgs(FhirConfigArgs $) {
        this.defaultKeepExtensions = $.defaultKeepExtensions;
        this.fieldMetadataList = $.fieldMetadataList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FhirConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FhirConfigArgs $;

        public Builder() {
            $ = new FhirConfigArgs();
        }

        public Builder(FhirConfigArgs defaults) {
            $ = new FhirConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultKeepExtensions The behaviour for handling FHIR extensions that aren&#39;t otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeepExtensions(@Nullable Output<Boolean> defaultKeepExtensions) {
            $.defaultKeepExtensions = defaultKeepExtensions;
            return this;
        }

        /**
         * @param defaultKeepExtensions The behaviour for handling FHIR extensions that aren&#39;t otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
         * 
         * @return builder
         * 
         */
        public Builder defaultKeepExtensions(Boolean defaultKeepExtensions) {
            return defaultKeepExtensions(Output.of(defaultKeepExtensions));
        }

        /**
         * @param fieldMetadataList Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`. If a field can be matched by more than one FieldMetadata, the first FieldMetadata.Action is applied.
         * 
         * @return builder
         * 
         */
        public Builder fieldMetadataList(@Nullable Output<List<FieldMetadataArgs>> fieldMetadataList) {
            $.fieldMetadataList = fieldMetadataList;
            return this;
        }

        /**
         * @param fieldMetadataList Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`. If a field can be matched by more than one FieldMetadata, the first FieldMetadata.Action is applied.
         * 
         * @return builder
         * 
         */
        public Builder fieldMetadataList(List<FieldMetadataArgs> fieldMetadataList) {
            return fieldMetadataList(Output.of(fieldMetadataList));
        }

        /**
         * @param fieldMetadataList Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`. If a field can be matched by more than one FieldMetadata, the first FieldMetadata.Action is applied.
         * 
         * @return builder
         * 
         */
        public Builder fieldMetadataList(FieldMetadataArgs... fieldMetadataList) {
            return fieldMetadataList(List.of(fieldMetadataList));
        }

        public FhirConfigArgs build() {
            return $;
        }
    }

}
