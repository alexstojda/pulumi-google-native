// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.inputs.InstanceArgs;
import com.pulumi.googlenative.compute.alpha.inputs.InstancePropertiesArgs;
import com.pulumi.googlenative.compute.alpha.inputs.LocationPolicyArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A transient resource used in compute.instances.bulkInsert and compute.regionInstances.bulkInsert . This resource is not persisted anywhere, it is used only for processing the requests.
 * 
 */
public final class BulkInsertInstanceResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final BulkInsertInstanceResourceArgs Empty = new BulkInsertInstanceResourceArgs();

    /**
     * The maximum number of instances to create.
     * 
     */
    @Import(name="count")
    private @Nullable Output<String> count;

    /**
     * @return The maximum number of instances to create.
     * 
     */
    public Optional<Output<String>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * DEPRECATED: Please use instance_properties instead.
     * 
     * @deprecated
     * DEPRECATED: Please use instance_properties instead.
     * 
     */
    @Deprecated /* DEPRECATED: Please use instance_properties instead. */
    @Import(name="instance")
    private @Nullable Output<InstanceArgs> instance;

    /**
     * @return DEPRECATED: Please use instance_properties instead.
     * 
     * @deprecated
     * DEPRECATED: Please use instance_properties instead.
     * 
     */
    @Deprecated /* DEPRECATED: Please use instance_properties instead. */
    public Optional<Output<InstanceArgs>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided.
     * 
     */
    @Import(name="instanceProperties")
    private @Nullable Output<InstancePropertiesArgs> instanceProperties;

    /**
     * @return The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided.
     * 
     */
    public Optional<Output<InstancePropertiesArgs>> instanceProperties() {
        return Optional.ofNullable(this.instanceProperties);
    }

    /**
     * Policy for chosing target zone. For more information, see Create VMs in bulk .
     * 
     */
    @Import(name="locationPolicy")
    private @Nullable Output<LocationPolicyArgs> locationPolicy;

    /**
     * @return Policy for chosing target zone. For more information, see Create VMs in bulk .
     * 
     */
    public Optional<Output<LocationPolicyArgs>> locationPolicy() {
        return Optional.ofNullable(this.locationPolicy);
    }

    /**
     * The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted.
     * 
     */
    @Import(name="minCount")
    private @Nullable Output<String> minCount;

    /**
     * @return The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted.
     * 
     */
    public Optional<Output<String>> minCount() {
        return Optional.ofNullable(this.minCount);
    }

    /**
     * The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters.
     * 
     */
    @Import(name="namePattern")
    private @Nullable Output<String> namePattern;

    /**
     * @return The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters.
     * 
     */
    public Optional<Output<String>> namePattern() {
        return Optional.ofNullable(this.namePattern);
    }

    /**
     * Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
     * 
     */
    @Import(name="perInstanceProperties")
    private @Nullable Output<Map<String,String>> perInstanceProperties;

    /**
     * @return Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
     * 
     */
    public Optional<Output<Map<String,String>>> perInstanceProperties() {
        return Optional.ofNullable(this.perInstanceProperties);
    }

    /**
     * Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional.
     * 
     */
    @Import(name="sourceInstanceTemplate")
    private @Nullable Output<String> sourceInstanceTemplate;

    /**
     * @return Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional.
     * 
     */
    public Optional<Output<String>> sourceInstanceTemplate() {
        return Optional.ofNullable(this.sourceInstanceTemplate);
    }

    private BulkInsertInstanceResourceArgs() {}

    private BulkInsertInstanceResourceArgs(BulkInsertInstanceResourceArgs $) {
        this.count = $.count;
        this.instance = $.instance;
        this.instanceProperties = $.instanceProperties;
        this.locationPolicy = $.locationPolicy;
        this.minCount = $.minCount;
        this.namePattern = $.namePattern;
        this.perInstanceProperties = $.perInstanceProperties;
        this.sourceInstanceTemplate = $.sourceInstanceTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BulkInsertInstanceResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BulkInsertInstanceResourceArgs $;

        public Builder() {
            $ = new BulkInsertInstanceResourceArgs();
        }

        public Builder(BulkInsertInstanceResourceArgs defaults) {
            $ = new BulkInsertInstanceResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count The maximum number of instances to create.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<String> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The maximum number of instances to create.
         * 
         * @return builder
         * 
         */
        public Builder count(String count) {
            return count(Output.of(count));
        }

        /**
         * @param instance DEPRECATED: Please use instance_properties instead.
         * 
         * @return builder
         * 
         * @deprecated
         * DEPRECATED: Please use instance_properties instead.
         * 
         */
        @Deprecated /* DEPRECATED: Please use instance_properties instead. */
        public Builder instance(@Nullable Output<InstanceArgs> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance DEPRECATED: Please use instance_properties instead.
         * 
         * @return builder
         * 
         * @deprecated
         * DEPRECATED: Please use instance_properties instead.
         * 
         */
        @Deprecated /* DEPRECATED: Please use instance_properties instead. */
        public Builder instance(InstanceArgs instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param instanceProperties The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided.
         * 
         * @return builder
         * 
         */
        public Builder instanceProperties(@Nullable Output<InstancePropertiesArgs> instanceProperties) {
            $.instanceProperties = instanceProperties;
            return this;
        }

        /**
         * @param instanceProperties The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided.
         * 
         * @return builder
         * 
         */
        public Builder instanceProperties(InstancePropertiesArgs instanceProperties) {
            return instanceProperties(Output.of(instanceProperties));
        }

        /**
         * @param locationPolicy Policy for chosing target zone. For more information, see Create VMs in bulk .
         * 
         * @return builder
         * 
         */
        public Builder locationPolicy(@Nullable Output<LocationPolicyArgs> locationPolicy) {
            $.locationPolicy = locationPolicy;
            return this;
        }

        /**
         * @param locationPolicy Policy for chosing target zone. For more information, see Create VMs in bulk .
         * 
         * @return builder
         * 
         */
        public Builder locationPolicy(LocationPolicyArgs locationPolicy) {
            return locationPolicy(Output.of(locationPolicy));
        }

        /**
         * @param minCount The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder minCount(@Nullable Output<String> minCount) {
            $.minCount = minCount;
            return this;
        }

        /**
         * @param minCount The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be created and instances already created will be deleted.
         * 
         * @return builder
         * 
         */
        public Builder minCount(String minCount) {
            return minCount(Output.of(minCount));
        }

        /**
         * @param namePattern The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters.
         * 
         * @return builder
         * 
         */
        public Builder namePattern(@Nullable Output<String> namePattern) {
            $.namePattern = namePattern;
            return this;
        }

        /**
         * @param namePattern The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters.
         * 
         * @return builder
         * 
         */
        public Builder namePattern(String namePattern) {
            return namePattern(Output.of(namePattern));
        }

        /**
         * @param perInstanceProperties Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
         * 
         * @return builder
         * 
         */
        public Builder perInstanceProperties(@Nullable Output<Map<String,String>> perInstanceProperties) {
            $.perInstanceProperties = perInstanceProperties;
            return this;
        }

        /**
         * @param perInstanceProperties Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
         * 
         * @return builder
         * 
         */
        public Builder perInstanceProperties(Map<String,String> perInstanceProperties) {
            return perInstanceProperties(Output.of(perInstanceProperties));
        }

        /**
         * @param sourceInstanceTemplate Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceTemplate(@Nullable Output<String> sourceInstanceTemplate) {
            $.sourceInstanceTemplate = sourceInstanceTemplate;
            return this;
        }

        /**
         * @param sourceInstanceTemplate Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate This field is optional.
         * 
         * @return builder
         * 
         */
        public Builder sourceInstanceTemplate(String sourceInstanceTemplate) {
            return sourceInstanceTemplate(Output.of(sourceInstanceTemplate));
        }

        public BulkInsertInstanceResourceArgs build() {
            return $;
        }
    }

}
