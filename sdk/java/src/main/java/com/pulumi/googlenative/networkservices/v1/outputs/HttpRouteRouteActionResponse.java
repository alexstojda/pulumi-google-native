// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteCorsPolicyResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteDestinationResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteFaultInjectionPolicyResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteHeaderModifierResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteRedirectResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteRequestMirrorPolicyResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteRetryPolicyResponse;
import com.pulumi.googlenative.networkservices.v1.outputs.HttpRouteURLRewriteResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class HttpRouteRouteActionResponse {
    /**
     * @return The specification for allowing client side cross-origin requests.
     * 
     */
    private HttpRouteCorsPolicyResponse corsPolicy;
    /**
     * @return The destination to which traffic should be forwarded.
     * 
     */
    private List<HttpRouteDestinationResponse> destinations;
    /**
     * @return The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     * 
     */
    private HttpRouteFaultInjectionPolicyResponse faultInjectionPolicy;
    /**
     * @return If set, the request is directed as configured by this field.
     * 
     */
    private HttpRouteRedirectResponse redirect;
    /**
     * @return The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * 
     */
    private HttpRouteHeaderModifierResponse requestHeaderModifier;
    /**
     * @return Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
     * 
     */
    private HttpRouteRequestMirrorPolicyResponse requestMirrorPolicy;
    /**
     * @return The specification for modifying the headers of a response prior to sending the response back to the client.
     * 
     */
    private HttpRouteHeaderModifierResponse responseHeaderModifier;
    /**
     * @return Specifies the retry policy associated with this route.
     * 
     */
    private HttpRouteRetryPolicyResponse retryPolicy;
    /**
     * @return Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     * 
     */
    private String timeout;
    /**
     * @return The specification for rewrite URL before forwarding requests to the destination.
     * 
     */
    private HttpRouteURLRewriteResponse urlRewrite;

    private HttpRouteRouteActionResponse() {}
    /**
     * @return The specification for allowing client side cross-origin requests.
     * 
     */
    public HttpRouteCorsPolicyResponse corsPolicy() {
        return this.corsPolicy;
    }
    /**
     * @return The destination to which traffic should be forwarded.
     * 
     */
    public List<HttpRouteDestinationResponse> destinations() {
        return this.destinations;
    }
    /**
     * @return The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     * 
     */
    public HttpRouteFaultInjectionPolicyResponse faultInjectionPolicy() {
        return this.faultInjectionPolicy;
    }
    /**
     * @return If set, the request is directed as configured by this field.
     * 
     */
    public HttpRouteRedirectResponse redirect() {
        return this.redirect;
    }
    /**
     * @return The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     * 
     */
    public HttpRouteHeaderModifierResponse requestHeaderModifier() {
        return this.requestHeaderModifier;
    }
    /**
     * @return Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
     * 
     */
    public HttpRouteRequestMirrorPolicyResponse requestMirrorPolicy() {
        return this.requestMirrorPolicy;
    }
    /**
     * @return The specification for modifying the headers of a response prior to sending the response back to the client.
     * 
     */
    public HttpRouteHeaderModifierResponse responseHeaderModifier() {
        return this.responseHeaderModifier;
    }
    /**
     * @return Specifies the retry policy associated with this route.
     * 
     */
    public HttpRouteRetryPolicyResponse retryPolicy() {
        return this.retryPolicy;
    }
    /**
     * @return Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     * 
     */
    public String timeout() {
        return this.timeout;
    }
    /**
     * @return The specification for rewrite URL before forwarding requests to the destination.
     * 
     */
    public HttpRouteURLRewriteResponse urlRewrite() {
        return this.urlRewrite;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteRouteActionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private HttpRouteCorsPolicyResponse corsPolicy;
        private List<HttpRouteDestinationResponse> destinations;
        private HttpRouteFaultInjectionPolicyResponse faultInjectionPolicy;
        private HttpRouteRedirectResponse redirect;
        private HttpRouteHeaderModifierResponse requestHeaderModifier;
        private HttpRouteRequestMirrorPolicyResponse requestMirrorPolicy;
        private HttpRouteHeaderModifierResponse responseHeaderModifier;
        private HttpRouteRetryPolicyResponse retryPolicy;
        private String timeout;
        private HttpRouteURLRewriteResponse urlRewrite;
        public Builder() {}
        public Builder(HttpRouteRouteActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.corsPolicy = defaults.corsPolicy;
    	      this.destinations = defaults.destinations;
    	      this.faultInjectionPolicy = defaults.faultInjectionPolicy;
    	      this.redirect = defaults.redirect;
    	      this.requestHeaderModifier = defaults.requestHeaderModifier;
    	      this.requestMirrorPolicy = defaults.requestMirrorPolicy;
    	      this.responseHeaderModifier = defaults.responseHeaderModifier;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.timeout = defaults.timeout;
    	      this.urlRewrite = defaults.urlRewrite;
        }

        @CustomType.Setter
        public Builder corsPolicy(HttpRouteCorsPolicyResponse corsPolicy) {
            this.corsPolicy = Objects.requireNonNull(corsPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder destinations(List<HttpRouteDestinationResponse> destinations) {
            this.destinations = Objects.requireNonNull(destinations);
            return this;
        }
        public Builder destinations(HttpRouteDestinationResponse... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder faultInjectionPolicy(HttpRouteFaultInjectionPolicyResponse faultInjectionPolicy) {
            this.faultInjectionPolicy = Objects.requireNonNull(faultInjectionPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder redirect(HttpRouteRedirectResponse redirect) {
            this.redirect = Objects.requireNonNull(redirect);
            return this;
        }
        @CustomType.Setter
        public Builder requestHeaderModifier(HttpRouteHeaderModifierResponse requestHeaderModifier) {
            this.requestHeaderModifier = Objects.requireNonNull(requestHeaderModifier);
            return this;
        }
        @CustomType.Setter
        public Builder requestMirrorPolicy(HttpRouteRequestMirrorPolicyResponse requestMirrorPolicy) {
            this.requestMirrorPolicy = Objects.requireNonNull(requestMirrorPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder responseHeaderModifier(HttpRouteHeaderModifierResponse responseHeaderModifier) {
            this.responseHeaderModifier = Objects.requireNonNull(responseHeaderModifier);
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicy(HttpRouteRetryPolicyResponse retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        @CustomType.Setter
        public Builder urlRewrite(HttpRouteURLRewriteResponse urlRewrite) {
            this.urlRewrite = Objects.requireNonNull(urlRewrite);
            return this;
        }
        public HttpRouteRouteActionResponse build() {
            final var o = new HttpRouteRouteActionResponse();
            o.corsPolicy = corsPolicy;
            o.destinations = destinations;
            o.faultInjectionPolicy = faultInjectionPolicy;
            o.redirect = redirect;
            o.requestHeaderModifier = requestHeaderModifier;
            o.requestMirrorPolicy = requestMirrorPolicy;
            o.responseHeaderModifier = responseHeaderModifier;
            o.retryPolicy = retryPolicy;
            o.timeout = timeout;
            o.urlRewrite = urlRewrite;
            return o;
        }
    }
}
