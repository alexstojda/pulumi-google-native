// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.certificatemanager.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCertificateMapEntryResult {
    /**
     * @return A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
     * 
     */
    private List<String> certificates;
    /**
     * @return The creation timestamp of a Certificate Map Entry.
     * 
     */
    private String createTime;
    /**
     * @return One or more paragraphs of text description of a certificate map entry.
     * 
     */
    private String description;
    /**
     * @return A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
     * 
     */
    private String hostname;
    /**
     * @return Set of labels associated with a Certificate Map Entry.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return A predefined matcher for particular cases, other than SNI selection.
     * 
     */
    private String matcher;
    /**
     * @return A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}certificateMaps/*{@literal /}certificateMapEntries/*`.
     * 
     */
    private String name;
    /**
     * @return A serving state of this Certificate Map Entry.
     * 
     */
    private String state;
    /**
     * @return The update timestamp of a Certificate Map Entry.
     * 
     */
    private String updateTime;

    private GetCertificateMapEntryResult() {}
    /**
     * @return A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*{@literal /}locations/*{@literal /}certificates/*`.
     * 
     */
    public List<String> certificates() {
        return this.certificates;
    }
    /**
     * @return The creation timestamp of a Certificate Map Entry.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return One or more paragraphs of text description of a certificate map entry.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Set of labels associated with a Certificate Map Entry.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return A predefined matcher for particular cases, other than SNI selection.
     * 
     */
    public String matcher() {
        return this.matcher;
    }
    /**
     * @return A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*{@literal /}locations/*{@literal /}certificateMaps/*{@literal /}certificateMapEntries/*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A serving state of this Certificate Map Entry.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The update timestamp of a Certificate Map Entry.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateMapEntryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> certificates;
        private String createTime;
        private String description;
        private String hostname;
        private Map<String,String> labels;
        private String matcher;
        private String name;
        private String state;
        private String updateTime;
        public Builder() {}
        public Builder(GetCertificateMapEntryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificates = defaults.certificates;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.hostname = defaults.hostname;
    	      this.labels = defaults.labels;
    	      this.matcher = defaults.matcher;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder certificates(List<String> certificates) {
            this.certificates = Objects.requireNonNull(certificates);
            return this;
        }
        public Builder certificates(String... certificates) {
            return certificates(List.of(certificates));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder matcher(String matcher) {
            this.matcher = Objects.requireNonNull(matcher);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetCertificateMapEntryResult build() {
            final var o = new GetCertificateMapEntryResult();
            o.certificates = certificates;
            o.createTime = createTime;
            o.description = description;
            o.hostname = hostname;
            o.labels = labels;
            o.matcher = matcher;
            o.name = name;
            o.state = state;
            o.updateTime = updateTime;
            return o;
        }
    }
}
