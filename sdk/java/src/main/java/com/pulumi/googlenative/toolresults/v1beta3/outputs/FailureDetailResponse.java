// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class FailureDetailResponse {
    /**
     * @return If the failure was severe because the system (app) under test crashed.
     * 
     */
    private Boolean crashed;
    /**
     * @return If the device ran out of memory during a test, causing the test to crash.
     * 
     */
    private Boolean deviceOutOfMemory;
    /**
     * @return If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
     * 
     */
    private Boolean failedRoboscript;
    /**
     * @return If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
     * 
     */
    private Boolean notInstalled;
    /**
     * @return If a native process (including any other than the app) crashed.
     * 
     */
    private Boolean otherNativeCrash;
    /**
     * @return If the test overran some time limit, and that is why it failed.
     * 
     */
    private Boolean timedOut;
    /**
     * @return If the robo was unable to crawl the app; perhaps because the app did not start.
     * 
     */
    private Boolean unableToCrawl;

    private FailureDetailResponse() {}
    /**
     * @return If the failure was severe because the system (app) under test crashed.
     * 
     */
    public Boolean crashed() {
        return this.crashed;
    }
    /**
     * @return If the device ran out of memory during a test, causing the test to crash.
     * 
     */
    public Boolean deviceOutOfMemory() {
        return this.deviceOutOfMemory;
    }
    /**
     * @return If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
     * 
     */
    public Boolean failedRoboscript() {
        return this.failedRoboscript;
    }
    /**
     * @return If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
     * 
     */
    public Boolean notInstalled() {
        return this.notInstalled;
    }
    /**
     * @return If a native process (including any other than the app) crashed.
     * 
     */
    public Boolean otherNativeCrash() {
        return this.otherNativeCrash;
    }
    /**
     * @return If the test overran some time limit, and that is why it failed.
     * 
     */
    public Boolean timedOut() {
        return this.timedOut;
    }
    /**
     * @return If the robo was unable to crawl the app; perhaps because the app did not start.
     * 
     */
    public Boolean unableToCrawl() {
        return this.unableToCrawl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FailureDetailResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean crashed;
        private Boolean deviceOutOfMemory;
        private Boolean failedRoboscript;
        private Boolean notInstalled;
        private Boolean otherNativeCrash;
        private Boolean timedOut;
        private Boolean unableToCrawl;
        public Builder() {}
        public Builder(FailureDetailResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.crashed = defaults.crashed;
    	      this.deviceOutOfMemory = defaults.deviceOutOfMemory;
    	      this.failedRoboscript = defaults.failedRoboscript;
    	      this.notInstalled = defaults.notInstalled;
    	      this.otherNativeCrash = defaults.otherNativeCrash;
    	      this.timedOut = defaults.timedOut;
    	      this.unableToCrawl = defaults.unableToCrawl;
        }

        @CustomType.Setter
        public Builder crashed(Boolean crashed) {
            this.crashed = Objects.requireNonNull(crashed);
            return this;
        }
        @CustomType.Setter
        public Builder deviceOutOfMemory(Boolean deviceOutOfMemory) {
            this.deviceOutOfMemory = Objects.requireNonNull(deviceOutOfMemory);
            return this;
        }
        @CustomType.Setter
        public Builder failedRoboscript(Boolean failedRoboscript) {
            this.failedRoboscript = Objects.requireNonNull(failedRoboscript);
            return this;
        }
        @CustomType.Setter
        public Builder notInstalled(Boolean notInstalled) {
            this.notInstalled = Objects.requireNonNull(notInstalled);
            return this;
        }
        @CustomType.Setter
        public Builder otherNativeCrash(Boolean otherNativeCrash) {
            this.otherNativeCrash = Objects.requireNonNull(otherNativeCrash);
            return this;
        }
        @CustomType.Setter
        public Builder timedOut(Boolean timedOut) {
            this.timedOut = Objects.requireNonNull(timedOut);
            return this;
        }
        @CustomType.Setter
        public Builder unableToCrawl(Boolean unableToCrawl) {
            this.unableToCrawl = Objects.requireNonNull(unableToCrawl);
            return this;
        }
        public FailureDetailResponse build() {
            final var o = new FailureDetailResponse();
            o.crashed = crashed;
            o.deviceOutOfMemory = deviceOutOfMemory;
            o.failedRoboscript = failedRoboscript;
            o.notInstalled = notInstalled;
            o.otherNativeCrash = otherNativeCrash;
            o.timedOut = timedOut;
            o.unableToCrawl = unableToCrawl;
            return o;
        }
    }
}
