// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.iam.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceAccountResult {
    /**
     * @return Optional. A user-specified, human-readable description of the service account. The maximum length is 256 UTF-8 bytes.
     * 
     */
    private String description;
    /**
     * @return Whether the service account is disabled.
     * 
     */
    private Boolean disabled;
    /**
     * @return Optional. A user-specified, human-readable name for the service account. The maximum length is 100 UTF-8 bytes.
     * 
     */
    private String displayName;
    /**
     * @return The email address of the service account.
     * 
     */
    private String email;
    /**
     * @return Deprecated. Do not use.
     * 
     * @deprecated
     * Deprecated. Do not use.
     * 
     */
    @Deprecated /* Deprecated. Do not use. */
    private String etag;
    /**
     * @return The resource name of the service account. Use one of the following formats: * `projects/{PROJECT_ID}/serviceAccounts/{EMAIL_ADDRESS}` * `projects/{PROJECT_ID}/serviceAccounts/{UNIQUE_ID}` As an alternative, you can use the `-` wildcard character instead of the project ID: * `projects/-/serviceAccounts/{EMAIL_ADDRESS}` * `projects/-/serviceAccounts/{UNIQUE_ID}` When possible, avoid using the `-` wildcard character, because it can cause response messages to contain misleading error codes. For example, if you try to get the service account `projects/-/serviceAccounts/fake@example.com`, which does not exist, the response contains an HTTP `403 Forbidden` error instead of a `404 Not Found` error.
     * 
     */
    private String name;
    /**
     * @return The OAuth 2.0 client ID for the service account.
     * 
     */
    private String oauth2ClientId;
    /**
     * @return The ID of the project that owns the service account.
     * 
     */
    private String project;
    /**
     * @return The unique, stable numeric ID for the service account. Each service account retains its unique ID even if you delete the service account. For example, if you delete a service account, then create a new service account with the same name, the new service account has a different unique ID than the deleted service account.
     * 
     */
    private String uniqueId;

    private GetServiceAccountResult() {}
    /**
     * @return Optional. A user-specified, human-readable description of the service account. The maximum length is 256 UTF-8 bytes.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the service account is disabled.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Optional. A user-specified, human-readable name for the service account. The maximum length is 100 UTF-8 bytes.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The email address of the service account.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Deprecated. Do not use.
     * 
     * @deprecated
     * Deprecated. Do not use.
     * 
     */
    @Deprecated /* Deprecated. Do not use. */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The resource name of the service account. Use one of the following formats: * `projects/{PROJECT_ID}/serviceAccounts/{EMAIL_ADDRESS}` * `projects/{PROJECT_ID}/serviceAccounts/{UNIQUE_ID}` As an alternative, you can use the `-` wildcard character instead of the project ID: * `projects/-/serviceAccounts/{EMAIL_ADDRESS}` * `projects/-/serviceAccounts/{UNIQUE_ID}` When possible, avoid using the `-` wildcard character, because it can cause response messages to contain misleading error codes. For example, if you try to get the service account `projects/-/serviceAccounts/fake@example.com`, which does not exist, the response contains an HTTP `403 Forbidden` error instead of a `404 Not Found` error.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The OAuth 2.0 client ID for the service account.
     * 
     */
    public String oauth2ClientId() {
        return this.oauth2ClientId;
    }
    /**
     * @return The ID of the project that owns the service account.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The unique, stable numeric ID for the service account. Each service account retains its unique ID even if you delete the service account. For example, if you delete a service account, then create a new service account with the same name, the new service account has a different unique ID than the deleted service account.
     * 
     */
    public String uniqueId() {
        return this.uniqueId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Boolean disabled;
        private String displayName;
        private String email;
        private String etag;
        private String name;
        private String oauth2ClientId;
        private String project;
        private String uniqueId;
        public Builder() {}
        public Builder(GetServiceAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.displayName = defaults.displayName;
    	      this.email = defaults.email;
    	      this.etag = defaults.etag;
    	      this.name = defaults.name;
    	      this.oauth2ClientId = defaults.oauth2ClientId;
    	      this.project = defaults.project;
    	      this.uniqueId = defaults.uniqueId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder oauth2ClientId(String oauth2ClientId) {
            this.oauth2ClientId = Objects.requireNonNull(oauth2ClientId);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(String uniqueId) {
            this.uniqueId = Objects.requireNonNull(uniqueId);
            return this;
        }
        public GetServiceAccountResult build() {
            final var o = new GetServiceAccountResult();
            o.description = description;
            o.disabled = disabled;
            o.displayName = displayName;
            o.email = email;
            o.etag = etag;
            o.name = name;
            o.oauth2ClientId = oauth2ClientId;
            o.project = project;
            o.uniqueId = uniqueId;
            return o;
        }
    }
}
