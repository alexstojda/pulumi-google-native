// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.deploymentmanager.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.deploymentmanager.alpha.outputs.OperationErrorResponse;
import com.pulumi.googlenative.deploymentmanager.alpha.outputs.OperationWarningsItemResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class OperationResponse {
    /**
     * @return The value of `requestId` if you provided it in the request. Not present otherwise.
     * 
     */
    private String clientOperationId;
    /**
     * @return [Deprecated] This field is deprecated.
     * 
     * @deprecated
     * [Deprecated] This field is deprecated.
     * 
     */
    @Deprecated /* [Deprecated] This field is deprecated. */
    private String creationTimestamp;
    /**
     * @return A textual description of the operation, which is set when the operation is created.
     * 
     */
    private String description;
    /**
     * @return The time that this operation was completed. This value is in RFC3339 text format.
     * 
     */
    private String endTime;
    /**
     * @return If errors are generated during processing of the operation, this field will be populated.
     * 
     */
    private OperationErrorResponse error;
    /**
     * @return If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
     * 
     */
    private String httpErrorMessage;
    /**
     * @return If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
     * 
     */
    private Integer httpErrorStatusCode;
    /**
     * @return The time that this operation was requested. This value is in RFC3339 text format.
     * 
     */
    private String insertTime;
    /**
     * @return Type of the resource. Always `compute#operation` for Operation resources.
     * 
     */
    private String kind;
    /**
     * @return Name of the operation.
     * 
     */
    private String name;
    /**
     * @return An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
     * 
     */
    private String operationGroupId;
    /**
     * @return The type of operation, such as `insert`, `update`, or `delete`, and so on.
     * 
     */
    private String operationType;
    /**
     * @return An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
     * 
     */
    private Integer progress;
    /**
     * @return The URL of the region where the operation resides. Only applicable when performing regional operations.
     * 
     */
    private String region;
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    private String selfLink;
    /**
     * @return The time that this operation was started by the server. This value is in RFC3339 text format.
     * 
     */
    private String startTime;
    /**
     * @return The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
     * 
     */
    private String status;
    /**
     * @return An optional textual description of the current status of the operation.
     * 
     */
    private String statusMessage;
    /**
     * @return The unique target ID, which identifies a specific incarnation of the target resource.
     * 
     */
    private String targetId;
    /**
     * @return The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
     * 
     */
    private String targetLink;
    /**
     * @return User who requested the operation, for example: `user@example.com`.
     * 
     */
    private String user;
    /**
     * @return If warning messages are generated during processing of the operation, this field will be populated.
     * 
     */
    private List<OperationWarningsItemResponse> warnings;
    /**
     * @return The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
     * 
     */
    private String zone;

    private OperationResponse() {}
    /**
     * @return The value of `requestId` if you provided it in the request. Not present otherwise.
     * 
     */
    public String clientOperationId() {
        return this.clientOperationId;
    }
    /**
     * @return [Deprecated] This field is deprecated.
     * 
     * @deprecated
     * [Deprecated] This field is deprecated.
     * 
     */
    @Deprecated /* [Deprecated] This field is deprecated. */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return A textual description of the operation, which is set when the operation is created.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The time that this operation was completed. This value is in RFC3339 text format.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return If errors are generated during processing of the operation, this field will be populated.
     * 
     */
    public OperationErrorResponse error() {
        return this.error;
    }
    /**
     * @return If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
     * 
     */
    public String httpErrorMessage() {
        return this.httpErrorMessage;
    }
    /**
     * @return If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
     * 
     */
    public Integer httpErrorStatusCode() {
        return this.httpErrorStatusCode;
    }
    /**
     * @return The time that this operation was requested. This value is in RFC3339 text format.
     * 
     */
    public String insertTime() {
        return this.insertTime;
    }
    /**
     * @return Type of the resource. Always `compute#operation` for Operation resources.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Name of the operation.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
     * 
     */
    public String operationGroupId() {
        return this.operationGroupId;
    }
    /**
     * @return The type of operation, such as `insert`, `update`, or `delete`, and so on.
     * 
     */
    public String operationType() {
        return this.operationType;
    }
    /**
     * @return An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
     * 
     */
    public Integer progress() {
        return this.progress;
    }
    /**
     * @return The URL of the region where the operation resides. Only applicable when performing regional operations.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The time that this operation was started by the server. This value is in RFC3339 text format.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return An optional textual description of the current status of the operation.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return The unique target ID, which identifies a specific incarnation of the target resource.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
     * 
     */
    public String targetLink() {
        return this.targetLink;
    }
    /**
     * @return User who requested the operation, for example: `user@example.com`.
     * 
     */
    public String user() {
        return this.user;
    }
    /**
     * @return If warning messages are generated during processing of the operation, this field will be populated.
     * 
     */
    public List<OperationWarningsItemResponse> warnings() {
        return this.warnings;
    }
    /**
     * @return The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OperationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientOperationId;
        private String creationTimestamp;
        private String description;
        private String endTime;
        private OperationErrorResponse error;
        private String httpErrorMessage;
        private Integer httpErrorStatusCode;
        private String insertTime;
        private String kind;
        private String name;
        private String operationGroupId;
        private String operationType;
        private Integer progress;
        private String region;
        private String selfLink;
        private String startTime;
        private String status;
        private String statusMessage;
        private String targetId;
        private String targetLink;
        private String user;
        private List<OperationWarningsItemResponse> warnings;
        private String zone;
        public Builder() {}
        public Builder(OperationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientOperationId = defaults.clientOperationId;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.endTime = defaults.endTime;
    	      this.error = defaults.error;
    	      this.httpErrorMessage = defaults.httpErrorMessage;
    	      this.httpErrorStatusCode = defaults.httpErrorStatusCode;
    	      this.insertTime = defaults.insertTime;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.operationGroupId = defaults.operationGroupId;
    	      this.operationType = defaults.operationType;
    	      this.progress = defaults.progress;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.targetId = defaults.targetId;
    	      this.targetLink = defaults.targetLink;
    	      this.user = defaults.user;
    	      this.warnings = defaults.warnings;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder clientOperationId(String clientOperationId) {
            this.clientOperationId = Objects.requireNonNull(clientOperationId);
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        @CustomType.Setter
        public Builder error(OperationErrorResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        @CustomType.Setter
        public Builder httpErrorMessage(String httpErrorMessage) {
            this.httpErrorMessage = Objects.requireNonNull(httpErrorMessage);
            return this;
        }
        @CustomType.Setter
        public Builder httpErrorStatusCode(Integer httpErrorStatusCode) {
            this.httpErrorStatusCode = Objects.requireNonNull(httpErrorStatusCode);
            return this;
        }
        @CustomType.Setter
        public Builder insertTime(String insertTime) {
            this.insertTime = Objects.requireNonNull(insertTime);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder operationGroupId(String operationGroupId) {
            this.operationGroupId = Objects.requireNonNull(operationGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder operationType(String operationType) {
            this.operationType = Objects.requireNonNull(operationType);
            return this;
        }
        @CustomType.Setter
        public Builder progress(Integer progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        @CustomType.Setter
        public Builder targetLink(String targetLink) {
            this.targetLink = Objects.requireNonNull(targetLink);
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }
        @CustomType.Setter
        public Builder warnings(List<OperationWarningsItemResponse> warnings) {
            this.warnings = Objects.requireNonNull(warnings);
            return this;
        }
        public Builder warnings(OperationWarningsItemResponse... warnings) {
            return warnings(List.of(warnings));
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public OperationResponse build() {
            final var o = new OperationResponse();
            o.clientOperationId = clientOperationId;
            o.creationTimestamp = creationTimestamp;
            o.description = description;
            o.endTime = endTime;
            o.error = error;
            o.httpErrorMessage = httpErrorMessage;
            o.httpErrorStatusCode = httpErrorStatusCode;
            o.insertTime = insertTime;
            o.kind = kind;
            o.name = name;
            o.operationGroupId = operationGroupId;
            o.operationType = operationType;
            o.progress = progress;
            o.region = region;
            o.selfLink = selfLink;
            o.startTime = startTime;
            o.status = status;
            o.statusMessage = statusMessage;
            o.targetId = targetId;
            o.targetLink = targetLink;
            o.user = user;
            o.warnings = warnings;
            o.zone = zone;
            return o;
        }
    }
}
