// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.transcoder.v1.outputs.AudioResponse;
import com.pulumi.googlenative.transcoder.v1.outputs.ColorResponse;
import com.pulumi.googlenative.transcoder.v1.outputs.CropResponse;
import com.pulumi.googlenative.transcoder.v1.outputs.DeblockResponse;
import com.pulumi.googlenative.transcoder.v1.outputs.DenoiseResponse;
import com.pulumi.googlenative.transcoder.v1.outputs.PadResponse;
import java.util.Objects;

@CustomType
public final class PreprocessingConfigResponse {
    /**
     * @return Audio preprocessing configuration.
     * 
     */
    private AudioResponse audio;
    /**
     * @return Color preprocessing configuration.
     * 
     */
    private ColorResponse color;
    /**
     * @return Specify the video cropping configuration.
     * 
     */
    private CropResponse crop;
    /**
     * @return Deblock preprocessing configuration.
     * 
     */
    private DeblockResponse deblock;
    /**
     * @return Denoise preprocessing configuration.
     * 
     */
    private DenoiseResponse denoise;
    /**
     * @return Specify the video pad filter configuration.
     * 
     */
    private PadResponse pad;

    private PreprocessingConfigResponse() {}
    /**
     * @return Audio preprocessing configuration.
     * 
     */
    public AudioResponse audio() {
        return this.audio;
    }
    /**
     * @return Color preprocessing configuration.
     * 
     */
    public ColorResponse color() {
        return this.color;
    }
    /**
     * @return Specify the video cropping configuration.
     * 
     */
    public CropResponse crop() {
        return this.crop;
    }
    /**
     * @return Deblock preprocessing configuration.
     * 
     */
    public DeblockResponse deblock() {
        return this.deblock;
    }
    /**
     * @return Denoise preprocessing configuration.
     * 
     */
    public DenoiseResponse denoise() {
        return this.denoise;
    }
    /**
     * @return Specify the video pad filter configuration.
     * 
     */
    public PadResponse pad() {
        return this.pad;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreprocessingConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private AudioResponse audio;
        private ColorResponse color;
        private CropResponse crop;
        private DeblockResponse deblock;
        private DenoiseResponse denoise;
        private PadResponse pad;
        public Builder() {}
        public Builder(PreprocessingConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audio = defaults.audio;
    	      this.color = defaults.color;
    	      this.crop = defaults.crop;
    	      this.deblock = defaults.deblock;
    	      this.denoise = defaults.denoise;
    	      this.pad = defaults.pad;
        }

        @CustomType.Setter
        public Builder audio(AudioResponse audio) {
            this.audio = Objects.requireNonNull(audio);
            return this;
        }
        @CustomType.Setter
        public Builder color(ColorResponse color) {
            this.color = Objects.requireNonNull(color);
            return this;
        }
        @CustomType.Setter
        public Builder crop(CropResponse crop) {
            this.crop = Objects.requireNonNull(crop);
            return this;
        }
        @CustomType.Setter
        public Builder deblock(DeblockResponse deblock) {
            this.deblock = Objects.requireNonNull(deblock);
            return this;
        }
        @CustomType.Setter
        public Builder denoise(DenoiseResponse denoise) {
            this.denoise = Objects.requireNonNull(denoise);
            return this;
        }
        @CustomType.Setter
        public Builder pad(PadResponse pad) {
            this.pad = Objects.requireNonNull(pad);
            return this;
        }
        public PreprocessingConfigResponse build() {
            final var o = new PreprocessingConfigResponse();
            o.audio = audio;
            o.color = color;
            o.crop = crop;
            o.deblock = deblock;
            o.denoise = denoise;
            o.pad = pad;
            return o;
        }
    }
}
