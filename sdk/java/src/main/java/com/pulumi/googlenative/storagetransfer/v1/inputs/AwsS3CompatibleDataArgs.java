// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.storagetransfer.v1.inputs.S3CompatibleMetadataArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An AwsS3CompatibleData resource.
 * 
 */
public final class AwsS3CompatibleDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final AwsS3CompatibleDataArgs Empty = new AwsS3CompatibleDataArgs();

    /**
     * Specifies the name of the bucket.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Specifies the name of the bucket.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Specifies the endpoint of the storage service.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return Specifies the endpoint of the storage service.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A S3 compatible metadata.
     * 
     */
    @Import(name="s3Metadata")
    private @Nullable Output<S3CompatibleMetadataArgs> s3Metadata;

    /**
     * @return A S3 compatible metadata.
     * 
     */
    public Optional<Output<S3CompatibleMetadataArgs>> s3Metadata() {
        return Optional.ofNullable(this.s3Metadata);
    }

    private AwsS3CompatibleDataArgs() {}

    private AwsS3CompatibleDataArgs(AwsS3CompatibleDataArgs $) {
        this.bucketName = $.bucketName;
        this.endpoint = $.endpoint;
        this.path = $.path;
        this.region = $.region;
        this.s3Metadata = $.s3Metadata;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsS3CompatibleDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsS3CompatibleDataArgs $;

        public Builder() {
            $ = new AwsS3CompatibleDataArgs();
        }

        public Builder(AwsS3CompatibleDataArgs defaults) {
            $ = new AwsS3CompatibleDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName Specifies the name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Specifies the name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param endpoint Specifies the endpoint of the storage service.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Specifies the endpoint of the storage service.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param path Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param region Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param s3Metadata A S3 compatible metadata.
         * 
         * @return builder
         * 
         */
        public Builder s3Metadata(@Nullable Output<S3CompatibleMetadataArgs> s3Metadata) {
            $.s3Metadata = s3Metadata;
            return this;
        }

        /**
         * @param s3Metadata A S3 compatible metadata.
         * 
         * @return builder
         * 
         */
        public Builder s3Metadata(S3CompatibleMetadataArgs s3Metadata) {
            return s3Metadata(Output.of(s3Metadata));
        }

        public AwsS3CompatibleDataArgs build() {
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            return $;
        }
    }

}
