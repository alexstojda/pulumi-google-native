// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.genomics.v1alpha2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.genomics.v1alpha2.outputs.DockerExecutorResponse;
import com.pulumi.googlenative.genomics.v1alpha2.outputs.PipelineParameterResponse;
import com.pulumi.googlenative.genomics.v1alpha2.outputs.PipelineResourcesResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPipelineResult {
    /**
     * @return User-specified description.
     * 
     */
    private String description;
    /**
     * @return Specifies the docker run information.
     * 
     */
    private DockerExecutorResponse docker;
    /**
     * @return Input parameters of the pipeline.
     * 
     */
    private List<PipelineParameterResponse> inputParameters;
    /**
     * @return A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
     * 
     */
    private String name;
    /**
     * @return Output parameters of the pipeline.
     * 
     */
    private List<PipelineParameterResponse> outputParameters;
    /**
     * @return Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
     * 
     */
    private String pipelineId;
    /**
     * @return The project in which to create the pipeline. The caller must have WRITE access.
     * 
     */
    private String project;
    /**
     * @return Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
     * 
     */
    private PipelineResourcesResponse resources;

    private GetPipelineResult() {}
    /**
     * @return User-specified description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Specifies the docker run information.
     * 
     */
    public DockerExecutorResponse docker() {
        return this.docker;
    }
    /**
     * @return Input parameters of the pipeline.
     * 
     */
    public List<PipelineParameterResponse> inputParameters() {
        return this.inputParameters;
    }
    /**
     * @return A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Output parameters of the pipeline.
     * 
     */
    public List<PipelineParameterResponse> outputParameters() {
        return this.outputParameters;
    }
    /**
     * @return Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
     * 
     */
    public String pipelineId() {
        return this.pipelineId;
    }
    /**
     * @return The project in which to create the pipeline. The caller must have WRITE access.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
     * 
     */
    public PipelineResourcesResponse resources() {
        return this.resources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private DockerExecutorResponse docker;
        private List<PipelineParameterResponse> inputParameters;
        private String name;
        private List<PipelineParameterResponse> outputParameters;
        private String pipelineId;
        private String project;
        private PipelineResourcesResponse resources;
        public Builder() {}
        public Builder(GetPipelineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.docker = defaults.docker;
    	      this.inputParameters = defaults.inputParameters;
    	      this.name = defaults.name;
    	      this.outputParameters = defaults.outputParameters;
    	      this.pipelineId = defaults.pipelineId;
    	      this.project = defaults.project;
    	      this.resources = defaults.resources;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder docker(DockerExecutorResponse docker) {
            this.docker = Objects.requireNonNull(docker);
            return this;
        }
        @CustomType.Setter
        public Builder inputParameters(List<PipelineParameterResponse> inputParameters) {
            this.inputParameters = Objects.requireNonNull(inputParameters);
            return this;
        }
        public Builder inputParameters(PipelineParameterResponse... inputParameters) {
            return inputParameters(List.of(inputParameters));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outputParameters(List<PipelineParameterResponse> outputParameters) {
            this.outputParameters = Objects.requireNonNull(outputParameters);
            return this;
        }
        public Builder outputParameters(PipelineParameterResponse... outputParameters) {
            return outputParameters(List.of(outputParameters));
        }
        @CustomType.Setter
        public Builder pipelineId(String pipelineId) {
            this.pipelineId = Objects.requireNonNull(pipelineId);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder resources(PipelineResourcesResponse resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public GetPipelineResult build() {
            final var o = new GetPipelineResult();
            o.description = description;
            o.docker = docker;
            o.inputParameters = inputParameters;
            o.name = name;
            o.outputParameters = outputParameters;
            o.pipelineId = pipelineId;
            o.project = project;
            o.resources = resources;
            return o;
        }
    }
}
