// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.tpu.v2alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.tpu.v2alpha1.outputs.AttachedDiskResponse;
import com.pulumi.googlenative.tpu.v2alpha1.outputs.NetworkConfigResponse;
import com.pulumi.googlenative.tpu.v2alpha1.outputs.NetworkEndpointResponse;
import com.pulumi.googlenative.tpu.v2alpha1.outputs.SchedulingConfigResponse;
import com.pulumi.googlenative.tpu.v2alpha1.outputs.ServiceAccountResponse;
import com.pulumi.googlenative.tpu.v2alpha1.outputs.SymptomResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodeResult {
    /**
     * @return The type of hardware accelerators associated with this node.
     * 
     */
    private String acceleratorType;
    /**
     * @return The API version that created this Node.
     * 
     */
    private String apiVersion;
    /**
     * @return The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user&#39;s provided network, or the provided network is peered with another network that is using that CIDR block.
     * 
     */
    private String cidrBlock;
    /**
     * @return The time when the node was created.
     * 
     */
    private String createTime;
    /**
     * @return The additional data disks for the Node.
     * 
     */
    private List<AttachedDiskResponse> dataDisks;
    /**
     * @return The user-supplied description of the TPU. Maximum of 512 characters.
     * 
     */
    private String description;
    /**
     * @return The health status of the TPU node.
     * 
     */
    private String health;
    /**
     * @return If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    private String healthDescription;
    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     * 
     */
    private Map<String,String> metadata;
    /**
     * @return Immutable. The name of the TPU.
     * 
     */
    private String name;
    /**
     * @return Network configurations for the TPU node.
     * 
     */
    private NetworkConfigResponse networkConfig;
    /**
     * @return The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     * 
     */
    private List<NetworkEndpointResponse> networkEndpoints;
    /**
     * @return The runtime version running in the Node.
     * 
     */
    private String runtimeVersion;
    /**
     * @return The scheduling options for this node.
     * 
     */
    private SchedulingConfigResponse schedulingConfig;
    /**
     * @return The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     * 
     */
    private ServiceAccountResponse serviceAccount;
    /**
     * @return The current state for the TPU Node.
     * 
     */
    private String state;
    /**
     * @return The Symptoms that have occurred to the TPU Node.
     * 
     */
    private List<SymptomResponse> symptoms;
    /**
     * @return Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    private List<String> tags;

    private GetNodeResult() {}
    /**
     * @return The type of hardware accelerators associated with this node.
     * 
     */
    public String acceleratorType() {
        return this.acceleratorType;
    }
    /**
     * @return The API version that created this Node.
     * 
     */
    public String apiVersion() {
        return this.apiVersion;
    }
    /**
     * @return The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user&#39;s provided network, or the provided network is peered with another network that is using that CIDR block.
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return The time when the node was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The additional data disks for the Node.
     * 
     */
    public List<AttachedDiskResponse> dataDisks() {
        return this.dataDisks;
    }
    /**
     * @return The user-supplied description of the TPU. Maximum of 512 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The health status of the TPU node.
     * 
     */
    public String health() {
        return this.health;
    }
    /**
     * @return If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    public String healthDescription() {
        return this.healthDescription;
    }
    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return Immutable. The name of the TPU.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network configurations for the TPU node.
     * 
     */
    public NetworkConfigResponse networkConfig() {
        return this.networkConfig;
    }
    /**
     * @return The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     * 
     */
    public List<NetworkEndpointResponse> networkEndpoints() {
        return this.networkEndpoints;
    }
    /**
     * @return The runtime version running in the Node.
     * 
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * @return The scheduling options for this node.
     * 
     */
    public SchedulingConfigResponse schedulingConfig() {
        return this.schedulingConfig;
    }
    /**
     * @return The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     * 
     */
    public ServiceAccountResponse serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The current state for the TPU Node.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The Symptoms that have occurred to the TPU Node.
     * 
     */
    public List<SymptomResponse> symptoms() {
        return this.symptoms;
    }
    /**
     * @return Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceleratorType;
        private String apiVersion;
        private String cidrBlock;
        private String createTime;
        private List<AttachedDiskResponse> dataDisks;
        private String description;
        private String health;
        private String healthDescription;
        private Map<String,String> labels;
        private Map<String,String> metadata;
        private String name;
        private NetworkConfigResponse networkConfig;
        private List<NetworkEndpointResponse> networkEndpoints;
        private String runtimeVersion;
        private SchedulingConfigResponse schedulingConfig;
        private ServiceAccountResponse serviceAccount;
        private String state;
        private List<SymptomResponse> symptoms;
        private List<String> tags;
        public Builder() {}
        public Builder(GetNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.apiVersion = defaults.apiVersion;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.createTime = defaults.createTime;
    	      this.dataDisks = defaults.dataDisks;
    	      this.description = defaults.description;
    	      this.health = defaults.health;
    	      this.healthDescription = defaults.healthDescription;
    	      this.labels = defaults.labels;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.networkConfig = defaults.networkConfig;
    	      this.networkEndpoints = defaults.networkEndpoints;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.schedulingConfig = defaults.schedulingConfig;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.state = defaults.state;
    	      this.symptoms = defaults.symptoms;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder acceleratorType(String acceleratorType) {
            this.acceleratorType = Objects.requireNonNull(acceleratorType);
            return this;
        }
        @CustomType.Setter
        public Builder apiVersion(String apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlock(String cidrBlock) {
            this.cidrBlock = Objects.requireNonNull(cidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder dataDisks(List<AttachedDiskResponse> dataDisks) {
            this.dataDisks = Objects.requireNonNull(dataDisks);
            return this;
        }
        public Builder dataDisks(AttachedDiskResponse... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder health(String health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }
        @CustomType.Setter
        public Builder healthDescription(String healthDescription) {
            this.healthDescription = Objects.requireNonNull(healthDescription);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkConfig(NetworkConfigResponse networkConfig) {
            this.networkConfig = Objects.requireNonNull(networkConfig);
            return this;
        }
        @CustomType.Setter
        public Builder networkEndpoints(List<NetworkEndpointResponse> networkEndpoints) {
            this.networkEndpoints = Objects.requireNonNull(networkEndpoints);
            return this;
        }
        public Builder networkEndpoints(NetworkEndpointResponse... networkEndpoints) {
            return networkEndpoints(List.of(networkEndpoints));
        }
        @CustomType.Setter
        public Builder runtimeVersion(String runtimeVersion) {
            this.runtimeVersion = Objects.requireNonNull(runtimeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder schedulingConfig(SchedulingConfigResponse schedulingConfig) {
            this.schedulingConfig = Objects.requireNonNull(schedulingConfig);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(ServiceAccountResponse serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder symptoms(List<SymptomResponse> symptoms) {
            this.symptoms = Objects.requireNonNull(symptoms);
            return this;
        }
        public Builder symptoms(SymptomResponse... symptoms) {
            return symptoms(List.of(symptoms));
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetNodeResult build() {
            final var o = new GetNodeResult();
            o.acceleratorType = acceleratorType;
            o.apiVersion = apiVersion;
            o.cidrBlock = cidrBlock;
            o.createTime = createTime;
            o.dataDisks = dataDisks;
            o.description = description;
            o.health = health;
            o.healthDescription = healthDescription;
            o.labels = labels;
            o.metadata = metadata;
            o.name = name;
            o.networkConfig = networkConfig;
            o.networkEndpoints = networkEndpoints;
            o.runtimeVersion = runtimeVersion;
            o.schedulingConfig = schedulingConfig;
            o.serviceAccount = serviceAccount;
            o.state = state;
            o.symptoms = symptoms;
            o.tags = tags;
            return o;
        }
    }
}
