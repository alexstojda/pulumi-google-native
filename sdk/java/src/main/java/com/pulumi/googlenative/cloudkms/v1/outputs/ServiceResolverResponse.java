// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudkms.v1.outputs.CertificateResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ServiceResolverResponse {
    /**
     * @return Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    private String endpointFilter;
    /**
     * @return The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    private String hostname;
    /**
     * @return A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
     * 
     */
    private List<CertificateResponse> serverCertificates;
    /**
     * @return The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
     * 
     */
    private String serviceDirectoryService;

    private ServiceResolverResponse() {}
    /**
     * @return Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
     * 
     */
    public String endpointFilter() {
        return this.endpointFilter;
    }
    /**
     * @return The hostname of the EKM replica used at TLS and HTTP layers.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
     * 
     */
    public List<CertificateResponse> serverCertificates() {
        return this.serverCertificates;
    }
    /**
     * @return The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*{@literal /}locations/*{@literal /}namespaces/*{@literal /}services/*`.
     * 
     */
    public String serviceDirectoryService() {
        return this.serviceDirectoryService;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceResolverResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String endpointFilter;
        private String hostname;
        private List<CertificateResponse> serverCertificates;
        private String serviceDirectoryService;
        public Builder() {}
        public Builder(ServiceResolverResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointFilter = defaults.endpointFilter;
    	      this.hostname = defaults.hostname;
    	      this.serverCertificates = defaults.serverCertificates;
    	      this.serviceDirectoryService = defaults.serviceDirectoryService;
        }

        @CustomType.Setter
        public Builder endpointFilter(String endpointFilter) {
            this.endpointFilter = Objects.requireNonNull(endpointFilter);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            this.hostname = Objects.requireNonNull(hostname);
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificates(List<CertificateResponse> serverCertificates) {
            this.serverCertificates = Objects.requireNonNull(serverCertificates);
            return this;
        }
        public Builder serverCertificates(CertificateResponse... serverCertificates) {
            return serverCertificates(List.of(serverCertificates));
        }
        @CustomType.Setter
        public Builder serviceDirectoryService(String serviceDirectoryService) {
            this.serviceDirectoryService = Objects.requireNonNull(serviceDirectoryService);
            return this;
        }
        public ServiceResolverResponse build() {
            final var o = new ServiceResolverResponse();
            o.endpointFilter = endpointFilter;
            o.hostname = hostname;
            o.serverCertificates = serverCertificates;
            o.serviceDirectoryService = serviceDirectoryService;
            return o;
        }
    }
}
