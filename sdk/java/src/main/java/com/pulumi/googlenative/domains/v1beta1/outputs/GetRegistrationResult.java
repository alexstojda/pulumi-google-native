// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.domains.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.domains.v1beta1.outputs.ContactSettingsResponse;
import com.pulumi.googlenative.domains.v1beta1.outputs.DnsSettingsResponse;
import com.pulumi.googlenative.domains.v1beta1.outputs.ManagementSettingsResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRegistrationResult {
    /**
     * @return Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.
     * 
     */
    private ContactSettingsResponse contactSettings;
    /**
     * @return The creation timestamp of the `Registration` resource.
     * 
     */
    private String createTime;
    /**
     * @return Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.
     * 
     */
    private DnsSettingsResponse dnsSettings;
    /**
     * @return Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    private String domainName;
    /**
     * @return The expiration timestamp of the `Registration`.
     * 
     */
    private String expireTime;
    /**
     * @return The set of issues with the `Registration` that require attention.
     * 
     */
    private List<String> issues;
    /**
     * @return Set of labels associated with the `Registration`.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.
     * 
     */
    private ManagementSettingsResponse managementSettings;
    /**
     * @return Name of the `Registration` resource, in the format `projects/*{@literal /}locations/*{@literal /}registrations/`.
     * 
     */
    private String name;
    /**
     * @return Pending contact settings for the `Registration`. Updates to the `contact_settings` field that change its `registrant_contact` or `privacy` fields require email confirmation by the `registrant_contact` before taking effect. This field is set only if there are pending updates to the `contact_settings` that have not been confirmed. To confirm the changes, the `registrant_contact` must follow the instructions in the email they receive.
     * 
     */
    private ContactSettingsResponse pendingContactSettings;
    /**
     * @return The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     */
    private String registerFailureReason;
    /**
     * @return The state of the `Registration`
     * 
     */
    private String state;
    /**
     * @return Set of options for the `contact_settings.privacy` field that this `Registration` supports.
     * 
     */
    private List<String> supportedPrivacy;
    /**
     * @return The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.
     * 
     */
    private String transferFailureReason;

    private GetRegistrationResult() {}
    /**
     * @return Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.
     * 
     */
    public ContactSettingsResponse contactSettings() {
        return this.contactSettings;
    }
    /**
     * @return The creation timestamp of the `Registration` resource.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.
     * 
     */
    public DnsSettingsResponse dnsSettings() {
        return this.dnsSettings;
    }
    /**
     * @return Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return The expiration timestamp of the `Registration`.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return The set of issues with the `Registration` that require attention.
     * 
     */
    public List<String> issues() {
        return this.issues;
    }
    /**
     * @return Set of labels associated with the `Registration`.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.
     * 
     */
    public ManagementSettingsResponse managementSettings() {
        return this.managementSettings;
    }
    /**
     * @return Name of the `Registration` resource, in the format `projects/*{@literal /}locations/*{@literal /}registrations/`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Pending contact settings for the `Registration`. Updates to the `contact_settings` field that change its `registrant_contact` or `privacy` fields require email confirmation by the `registrant_contact` before taking effect. This field is set only if there are pending updates to the `contact_settings` that have not been confirmed. To confirm the changes, the `registrant_contact` must follow the instructions in the email they receive.
     * 
     */
    public ContactSettingsResponse pendingContactSettings() {
        return this.pendingContactSettings;
    }
    /**
     * @return The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     */
    public String registerFailureReason() {
        return this.registerFailureReason;
    }
    /**
     * @return The state of the `Registration`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Set of options for the `contact_settings.privacy` field that this `Registration` supports.
     * 
     */
    public List<String> supportedPrivacy() {
        return this.supportedPrivacy;
    }
    /**
     * @return The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.
     * 
     */
    public String transferFailureReason() {
        return this.transferFailureReason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistrationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ContactSettingsResponse contactSettings;
        private String createTime;
        private DnsSettingsResponse dnsSettings;
        private String domainName;
        private String expireTime;
        private List<String> issues;
        private Map<String,String> labels;
        private ManagementSettingsResponse managementSettings;
        private String name;
        private ContactSettingsResponse pendingContactSettings;
        private String registerFailureReason;
        private String state;
        private List<String> supportedPrivacy;
        private String transferFailureReason;
        public Builder() {}
        public Builder(GetRegistrationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactSettings = defaults.contactSettings;
    	      this.createTime = defaults.createTime;
    	      this.dnsSettings = defaults.dnsSettings;
    	      this.domainName = defaults.domainName;
    	      this.expireTime = defaults.expireTime;
    	      this.issues = defaults.issues;
    	      this.labels = defaults.labels;
    	      this.managementSettings = defaults.managementSettings;
    	      this.name = defaults.name;
    	      this.pendingContactSettings = defaults.pendingContactSettings;
    	      this.registerFailureReason = defaults.registerFailureReason;
    	      this.state = defaults.state;
    	      this.supportedPrivacy = defaults.supportedPrivacy;
    	      this.transferFailureReason = defaults.transferFailureReason;
        }

        @CustomType.Setter
        public Builder contactSettings(ContactSettingsResponse contactSettings) {
            this.contactSettings = Objects.requireNonNull(contactSettings);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder dnsSettings(DnsSettingsResponse dnsSettings) {
            this.dnsSettings = Objects.requireNonNull(dnsSettings);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        @CustomType.Setter
        public Builder issues(List<String> issues) {
            this.issues = Objects.requireNonNull(issues);
            return this;
        }
        public Builder issues(String... issues) {
            return issues(List.of(issues));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder managementSettings(ManagementSettingsResponse managementSettings) {
            this.managementSettings = Objects.requireNonNull(managementSettings);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder pendingContactSettings(ContactSettingsResponse pendingContactSettings) {
            this.pendingContactSettings = Objects.requireNonNull(pendingContactSettings);
            return this;
        }
        @CustomType.Setter
        public Builder registerFailureReason(String registerFailureReason) {
            this.registerFailureReason = Objects.requireNonNull(registerFailureReason);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder supportedPrivacy(List<String> supportedPrivacy) {
            this.supportedPrivacy = Objects.requireNonNull(supportedPrivacy);
            return this;
        }
        public Builder supportedPrivacy(String... supportedPrivacy) {
            return supportedPrivacy(List.of(supportedPrivacy));
        }
        @CustomType.Setter
        public Builder transferFailureReason(String transferFailureReason) {
            this.transferFailureReason = Objects.requireNonNull(transferFailureReason);
            return this;
        }
        public GetRegistrationResult build() {
            final var o = new GetRegistrationResult();
            o.contactSettings = contactSettings;
            o.createTime = createTime;
            o.dnsSettings = dnsSettings;
            o.domainName = domainName;
            o.expireTime = expireTime;
            o.issues = issues;
            o.labels = labels;
            o.managementSettings = managementSettings;
            o.name = name;
            o.pendingContactSettings = pendingContactSettings;
            o.registerFailureReason = registerFailureReason;
            o.state = state;
            o.supportedPrivacy = supportedPrivacy;
            o.transferFailureReason = transferFailureReason;
            return o;
        }
    }
}
