// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.inputs.BulkInsertInstanceResourceArgs;
import com.pulumi.googlenative.compute.alpha.inputs.QueuingPolicyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneQueuedResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneQueuedResourceArgs Empty = new ZoneQueuedResourceArgs();

    /**
     * Specification of VM instances to create.
     * 
     */
    @Import(name="bulkInsertInstanceResource")
    private @Nullable Output<BulkInsertInstanceResourceArgs> bulkInsertInstanceResource;

    /**
     * @return Specification of VM instances to create.
     * 
     */
    public Optional<Output<BulkInsertInstanceResourceArgs>> bulkInsertInstanceResource() {
        return Optional.ofNullable(this.bulkInsertInstanceResource);
    }

    /**
     * An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Queuing parameters for the requested capacity.
     * 
     */
    @Import(name="queuingPolicy")
    private @Nullable Output<QueuingPolicyArgs> queuingPolicy;

    /**
     * @return Queuing parameters for the requested capacity.
     * 
     */
    public Optional<Output<QueuingPolicyArgs>> queuingPolicy() {
        return Optional.ofNullable(this.queuingPolicy);
    }

    /**
     * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    @Import(name="zone")
    private @Nullable Output<String> zone;

    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private ZoneQueuedResourceArgs() {}

    private ZoneQueuedResourceArgs(ZoneQueuedResourceArgs $) {
        this.bulkInsertInstanceResource = $.bulkInsertInstanceResource;
        this.description = $.description;
        this.name = $.name;
        this.project = $.project;
        this.queuingPolicy = $.queuingPolicy;
        this.requestId = $.requestId;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneQueuedResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneQueuedResourceArgs $;

        public Builder() {
            $ = new ZoneQueuedResourceArgs();
        }

        public Builder(ZoneQueuedResourceArgs defaults) {
            $ = new ZoneQueuedResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bulkInsertInstanceResource Specification of VM instances to create.
         * 
         * @return builder
         * 
         */
        public Builder bulkInsertInstanceResource(@Nullable Output<BulkInsertInstanceResourceArgs> bulkInsertInstanceResource) {
            $.bulkInsertInstanceResource = bulkInsertInstanceResource;
            return this;
        }

        /**
         * @param bulkInsertInstanceResource Specification of VM instances to create.
         * 
         * @return builder
         * 
         */
        public Builder bulkInsertInstanceResource(BulkInsertInstanceResourceArgs bulkInsertInstanceResource) {
            return bulkInsertInstanceResource(Output.of(bulkInsertInstanceResource));
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param queuingPolicy Queuing parameters for the requested capacity.
         * 
         * @return builder
         * 
         */
        public Builder queuingPolicy(@Nullable Output<QueuingPolicyArgs> queuingPolicy) {
            $.queuingPolicy = queuingPolicy;
            return this;
        }

        /**
         * @param queuingPolicy Queuing parameters for the requested capacity.
         * 
         * @return builder
         * 
         */
        public Builder queuingPolicy(QueuingPolicyArgs queuingPolicy) {
            return queuingPolicy(Output.of(queuingPolicy));
        }

        /**
         * @param requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ZoneQueuedResourceArgs build() {
            return $;
        }
    }

}
