// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2ErrorResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2InspectJobConfigResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2TriggerResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetOrganizationJobTriggerResult {
    /**
     * @return The creation timestamp of a triggeredJob.
     * 
     */
    private String createTime;
    /**
     * @return User provided description (max 256 chars)
     * 
     */
    private String description;
    /**
     * @return Display name (max 100 chars)
     * 
     */
    private String displayName;
    /**
     * @return A stream of errors encountered when the trigger was activated. Repeated errors may result in the JobTrigger automatically being paused. Will return the last 100 errors. Whenever the JobTrigger is modified this list will be cleared.
     * 
     */
    private List<GooglePrivacyDlpV2ErrorResponse> errors;
    /**
     * @return For inspect jobs, a snapshot of the configuration.
     * 
     */
    private GooglePrivacyDlpV2InspectJobConfigResponse inspectJob;
    /**
     * @return The timestamp of the last time this trigger executed.
     * 
     */
    private String lastRunTime;
    /**
     * @return Unique resource name for the triggeredJob, assigned by the service when the triggeredJob is created, for example `projects/dlp-test-project/jobTriggers/53234423`.
     * 
     */
    private String name;
    /**
     * @return A status for this trigger.
     * 
     */
    private String status;
    /**
     * @return A list of triggers which will be OR&#39;ed together. Only one in the list needs to trigger for a job to be started. The list may contain only a single Schedule trigger and must have at least one object.
     * 
     */
    private List<GooglePrivacyDlpV2TriggerResponse> triggers;
    /**
     * @return The last update timestamp of a triggeredJob.
     * 
     */
    private String updateTime;

    private GetOrganizationJobTriggerResult() {}
    /**
     * @return The creation timestamp of a triggeredJob.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return User provided description (max 256 chars)
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Display name (max 100 chars)
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A stream of errors encountered when the trigger was activated. Repeated errors may result in the JobTrigger automatically being paused. Will return the last 100 errors. Whenever the JobTrigger is modified this list will be cleared.
     * 
     */
    public List<GooglePrivacyDlpV2ErrorResponse> errors() {
        return this.errors;
    }
    /**
     * @return For inspect jobs, a snapshot of the configuration.
     * 
     */
    public GooglePrivacyDlpV2InspectJobConfigResponse inspectJob() {
        return this.inspectJob;
    }
    /**
     * @return The timestamp of the last time this trigger executed.
     * 
     */
    public String lastRunTime() {
        return this.lastRunTime;
    }
    /**
     * @return Unique resource name for the triggeredJob, assigned by the service when the triggeredJob is created, for example `projects/dlp-test-project/jobTriggers/53234423`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A status for this trigger.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of triggers which will be OR&#39;ed together. Only one in the list needs to trigger for a job to be started. The list may contain only a single Schedule trigger and must have at least one object.
     * 
     */
    public List<GooglePrivacyDlpV2TriggerResponse> triggers() {
        return this.triggers;
    }
    /**
     * @return The last update timestamp of a triggeredJob.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationJobTriggerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private String displayName;
        private List<GooglePrivacyDlpV2ErrorResponse> errors;
        private GooglePrivacyDlpV2InspectJobConfigResponse inspectJob;
        private String lastRunTime;
        private String name;
        private String status;
        private List<GooglePrivacyDlpV2TriggerResponse> triggers;
        private String updateTime;
        public Builder() {}
        public Builder(GetOrganizationJobTriggerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.errors = defaults.errors;
    	      this.inspectJob = defaults.inspectJob;
    	      this.lastRunTime = defaults.lastRunTime;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
    	      this.triggers = defaults.triggers;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder errors(List<GooglePrivacyDlpV2ErrorResponse> errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        public Builder errors(GooglePrivacyDlpV2ErrorResponse... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder inspectJob(GooglePrivacyDlpV2InspectJobConfigResponse inspectJob) {
            this.inspectJob = Objects.requireNonNull(inspectJob);
            return this;
        }
        @CustomType.Setter
        public Builder lastRunTime(String lastRunTime) {
            this.lastRunTime = Objects.requireNonNull(lastRunTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder triggers(List<GooglePrivacyDlpV2TriggerResponse> triggers) {
            this.triggers = Objects.requireNonNull(triggers);
            return this;
        }
        public Builder triggers(GooglePrivacyDlpV2TriggerResponse... triggers) {
            return triggers(List.of(triggers));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetOrganizationJobTriggerResult build() {
            final var o = new GetOrganizationJobTriggerResult();
            o.createTime = createTime;
            o.description = description;
            o.displayName = displayName;
            o.errors = errors;
            o.inspectJob = inspectJob;
            o.lastRunTime = lastRunTime;
            o.name = name;
            o.status = status;
            o.triggers = triggers;
            o.updateTime = updateTime;
            return o;
        }
    }
}
