// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.bigquery.v2.outputs.ExplainQueryStepResponse;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ExplainQueryStageResponse {
    /**
     * @return Number of parallel input segments completed.
     * 
     */
    private String completedParallelInputs;
    /**
     * @return Milliseconds the average shard spent on CPU-bound tasks.
     * 
     */
    private String computeMsAvg;
    /**
     * @return Milliseconds the slowest shard spent on CPU-bound tasks.
     * 
     */
    private String computeMsMax;
    /**
     * @return Relative amount of time the average shard spent on CPU-bound tasks.
     * 
     */
    private Double computeRatioAvg;
    /**
     * @return Relative amount of time the slowest shard spent on CPU-bound tasks.
     * 
     */
    private Double computeRatioMax;
    /**
     * @return Stage end time represented as milliseconds since epoch.
     * 
     */
    private String endMs;
    /**
     * @return IDs for stages that are inputs to this stage.
     * 
     */
    private List<String> inputStages;
    /**
     * @return Human-readable name for stage.
     * 
     */
    private String name;
    /**
     * @return Number of parallel input segments to be processed.
     * 
     */
    private String parallelInputs;
    /**
     * @return Milliseconds the average shard spent reading input.
     * 
     */
    private String readMsAvg;
    /**
     * @return Milliseconds the slowest shard spent reading input.
     * 
     */
    private String readMsMax;
    /**
     * @return Relative amount of time the average shard spent reading input.
     * 
     */
    private Double readRatioAvg;
    /**
     * @return Relative amount of time the slowest shard spent reading input.
     * 
     */
    private Double readRatioMax;
    /**
     * @return Number of records read into the stage.
     * 
     */
    private String recordsRead;
    /**
     * @return Number of records written by the stage.
     * 
     */
    private String recordsWritten;
    /**
     * @return Total number of bytes written to shuffle.
     * 
     */
    private String shuffleOutputBytes;
    /**
     * @return Total number of bytes written to shuffle and spilled to disk.
     * 
     */
    private String shuffleOutputBytesSpilled;
    /**
     * @return Slot-milliseconds used by the stage.
     * 
     */
    private String slotMs;
    /**
     * @return Stage start time represented as milliseconds since epoch.
     * 
     */
    private String startMs;
    /**
     * @return Current status for the stage.
     * 
     */
    private String status;
    /**
     * @return List of operations within the stage in dependency order (approximately chronological).
     * 
     */
    private List<ExplainQueryStepResponse> steps;
    /**
     * @return Milliseconds the average shard spent waiting to be scheduled.
     * 
     */
    private String waitMsAvg;
    /**
     * @return Milliseconds the slowest shard spent waiting to be scheduled.
     * 
     */
    private String waitMsMax;
    /**
     * @return Relative amount of time the average shard spent waiting to be scheduled.
     * 
     */
    private Double waitRatioAvg;
    /**
     * @return Relative amount of time the slowest shard spent waiting to be scheduled.
     * 
     */
    private Double waitRatioMax;
    /**
     * @return Milliseconds the average shard spent on writing output.
     * 
     */
    private String writeMsAvg;
    /**
     * @return Milliseconds the slowest shard spent on writing output.
     * 
     */
    private String writeMsMax;
    /**
     * @return Relative amount of time the average shard spent on writing output.
     * 
     */
    private Double writeRatioAvg;
    /**
     * @return Relative amount of time the slowest shard spent on writing output.
     * 
     */
    private Double writeRatioMax;

    private ExplainQueryStageResponse() {}
    /**
     * @return Number of parallel input segments completed.
     * 
     */
    public String completedParallelInputs() {
        return this.completedParallelInputs;
    }
    /**
     * @return Milliseconds the average shard spent on CPU-bound tasks.
     * 
     */
    public String computeMsAvg() {
        return this.computeMsAvg;
    }
    /**
     * @return Milliseconds the slowest shard spent on CPU-bound tasks.
     * 
     */
    public String computeMsMax() {
        return this.computeMsMax;
    }
    /**
     * @return Relative amount of time the average shard spent on CPU-bound tasks.
     * 
     */
    public Double computeRatioAvg() {
        return this.computeRatioAvg;
    }
    /**
     * @return Relative amount of time the slowest shard spent on CPU-bound tasks.
     * 
     */
    public Double computeRatioMax() {
        return this.computeRatioMax;
    }
    /**
     * @return Stage end time represented as milliseconds since epoch.
     * 
     */
    public String endMs() {
        return this.endMs;
    }
    /**
     * @return IDs for stages that are inputs to this stage.
     * 
     */
    public List<String> inputStages() {
        return this.inputStages;
    }
    /**
     * @return Human-readable name for stage.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Number of parallel input segments to be processed.
     * 
     */
    public String parallelInputs() {
        return this.parallelInputs;
    }
    /**
     * @return Milliseconds the average shard spent reading input.
     * 
     */
    public String readMsAvg() {
        return this.readMsAvg;
    }
    /**
     * @return Milliseconds the slowest shard spent reading input.
     * 
     */
    public String readMsMax() {
        return this.readMsMax;
    }
    /**
     * @return Relative amount of time the average shard spent reading input.
     * 
     */
    public Double readRatioAvg() {
        return this.readRatioAvg;
    }
    /**
     * @return Relative amount of time the slowest shard spent reading input.
     * 
     */
    public Double readRatioMax() {
        return this.readRatioMax;
    }
    /**
     * @return Number of records read into the stage.
     * 
     */
    public String recordsRead() {
        return this.recordsRead;
    }
    /**
     * @return Number of records written by the stage.
     * 
     */
    public String recordsWritten() {
        return this.recordsWritten;
    }
    /**
     * @return Total number of bytes written to shuffle.
     * 
     */
    public String shuffleOutputBytes() {
        return this.shuffleOutputBytes;
    }
    /**
     * @return Total number of bytes written to shuffle and spilled to disk.
     * 
     */
    public String shuffleOutputBytesSpilled() {
        return this.shuffleOutputBytesSpilled;
    }
    /**
     * @return Slot-milliseconds used by the stage.
     * 
     */
    public String slotMs() {
        return this.slotMs;
    }
    /**
     * @return Stage start time represented as milliseconds since epoch.
     * 
     */
    public String startMs() {
        return this.startMs;
    }
    /**
     * @return Current status for the stage.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return List of operations within the stage in dependency order (approximately chronological).
     * 
     */
    public List<ExplainQueryStepResponse> steps() {
        return this.steps;
    }
    /**
     * @return Milliseconds the average shard spent waiting to be scheduled.
     * 
     */
    public String waitMsAvg() {
        return this.waitMsAvg;
    }
    /**
     * @return Milliseconds the slowest shard spent waiting to be scheduled.
     * 
     */
    public String waitMsMax() {
        return this.waitMsMax;
    }
    /**
     * @return Relative amount of time the average shard spent waiting to be scheduled.
     * 
     */
    public Double waitRatioAvg() {
        return this.waitRatioAvg;
    }
    /**
     * @return Relative amount of time the slowest shard spent waiting to be scheduled.
     * 
     */
    public Double waitRatioMax() {
        return this.waitRatioMax;
    }
    /**
     * @return Milliseconds the average shard spent on writing output.
     * 
     */
    public String writeMsAvg() {
        return this.writeMsAvg;
    }
    /**
     * @return Milliseconds the slowest shard spent on writing output.
     * 
     */
    public String writeMsMax() {
        return this.writeMsMax;
    }
    /**
     * @return Relative amount of time the average shard spent on writing output.
     * 
     */
    public Double writeRatioAvg() {
        return this.writeRatioAvg;
    }
    /**
     * @return Relative amount of time the slowest shard spent on writing output.
     * 
     */
    public Double writeRatioMax() {
        return this.writeRatioMax;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExplainQueryStageResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String completedParallelInputs;
        private String computeMsAvg;
        private String computeMsMax;
        private Double computeRatioAvg;
        private Double computeRatioMax;
        private String endMs;
        private List<String> inputStages;
        private String name;
        private String parallelInputs;
        private String readMsAvg;
        private String readMsMax;
        private Double readRatioAvg;
        private Double readRatioMax;
        private String recordsRead;
        private String recordsWritten;
        private String shuffleOutputBytes;
        private String shuffleOutputBytesSpilled;
        private String slotMs;
        private String startMs;
        private String status;
        private List<ExplainQueryStepResponse> steps;
        private String waitMsAvg;
        private String waitMsMax;
        private Double waitRatioAvg;
        private Double waitRatioMax;
        private String writeMsAvg;
        private String writeMsMax;
        private Double writeRatioAvg;
        private Double writeRatioMax;
        public Builder() {}
        public Builder(ExplainQueryStageResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.completedParallelInputs = defaults.completedParallelInputs;
    	      this.computeMsAvg = defaults.computeMsAvg;
    	      this.computeMsMax = defaults.computeMsMax;
    	      this.computeRatioAvg = defaults.computeRatioAvg;
    	      this.computeRatioMax = defaults.computeRatioMax;
    	      this.endMs = defaults.endMs;
    	      this.inputStages = defaults.inputStages;
    	      this.name = defaults.name;
    	      this.parallelInputs = defaults.parallelInputs;
    	      this.readMsAvg = defaults.readMsAvg;
    	      this.readMsMax = defaults.readMsMax;
    	      this.readRatioAvg = defaults.readRatioAvg;
    	      this.readRatioMax = defaults.readRatioMax;
    	      this.recordsRead = defaults.recordsRead;
    	      this.recordsWritten = defaults.recordsWritten;
    	      this.shuffleOutputBytes = defaults.shuffleOutputBytes;
    	      this.shuffleOutputBytesSpilled = defaults.shuffleOutputBytesSpilled;
    	      this.slotMs = defaults.slotMs;
    	      this.startMs = defaults.startMs;
    	      this.status = defaults.status;
    	      this.steps = defaults.steps;
    	      this.waitMsAvg = defaults.waitMsAvg;
    	      this.waitMsMax = defaults.waitMsMax;
    	      this.waitRatioAvg = defaults.waitRatioAvg;
    	      this.waitRatioMax = defaults.waitRatioMax;
    	      this.writeMsAvg = defaults.writeMsAvg;
    	      this.writeMsMax = defaults.writeMsMax;
    	      this.writeRatioAvg = defaults.writeRatioAvg;
    	      this.writeRatioMax = defaults.writeRatioMax;
        }

        @CustomType.Setter
        public Builder completedParallelInputs(String completedParallelInputs) {
            this.completedParallelInputs = Objects.requireNonNull(completedParallelInputs);
            return this;
        }
        @CustomType.Setter
        public Builder computeMsAvg(String computeMsAvg) {
            this.computeMsAvg = Objects.requireNonNull(computeMsAvg);
            return this;
        }
        @CustomType.Setter
        public Builder computeMsMax(String computeMsMax) {
            this.computeMsMax = Objects.requireNonNull(computeMsMax);
            return this;
        }
        @CustomType.Setter
        public Builder computeRatioAvg(Double computeRatioAvg) {
            this.computeRatioAvg = Objects.requireNonNull(computeRatioAvg);
            return this;
        }
        @CustomType.Setter
        public Builder computeRatioMax(Double computeRatioMax) {
            this.computeRatioMax = Objects.requireNonNull(computeRatioMax);
            return this;
        }
        @CustomType.Setter
        public Builder endMs(String endMs) {
            this.endMs = Objects.requireNonNull(endMs);
            return this;
        }
        @CustomType.Setter
        public Builder inputStages(List<String> inputStages) {
            this.inputStages = Objects.requireNonNull(inputStages);
            return this;
        }
        public Builder inputStages(String... inputStages) {
            return inputStages(List.of(inputStages));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parallelInputs(String parallelInputs) {
            this.parallelInputs = Objects.requireNonNull(parallelInputs);
            return this;
        }
        @CustomType.Setter
        public Builder readMsAvg(String readMsAvg) {
            this.readMsAvg = Objects.requireNonNull(readMsAvg);
            return this;
        }
        @CustomType.Setter
        public Builder readMsMax(String readMsMax) {
            this.readMsMax = Objects.requireNonNull(readMsMax);
            return this;
        }
        @CustomType.Setter
        public Builder readRatioAvg(Double readRatioAvg) {
            this.readRatioAvg = Objects.requireNonNull(readRatioAvg);
            return this;
        }
        @CustomType.Setter
        public Builder readRatioMax(Double readRatioMax) {
            this.readRatioMax = Objects.requireNonNull(readRatioMax);
            return this;
        }
        @CustomType.Setter
        public Builder recordsRead(String recordsRead) {
            this.recordsRead = Objects.requireNonNull(recordsRead);
            return this;
        }
        @CustomType.Setter
        public Builder recordsWritten(String recordsWritten) {
            this.recordsWritten = Objects.requireNonNull(recordsWritten);
            return this;
        }
        @CustomType.Setter
        public Builder shuffleOutputBytes(String shuffleOutputBytes) {
            this.shuffleOutputBytes = Objects.requireNonNull(shuffleOutputBytes);
            return this;
        }
        @CustomType.Setter
        public Builder shuffleOutputBytesSpilled(String shuffleOutputBytesSpilled) {
            this.shuffleOutputBytesSpilled = Objects.requireNonNull(shuffleOutputBytesSpilled);
            return this;
        }
        @CustomType.Setter
        public Builder slotMs(String slotMs) {
            this.slotMs = Objects.requireNonNull(slotMs);
            return this;
        }
        @CustomType.Setter
        public Builder startMs(String startMs) {
            this.startMs = Objects.requireNonNull(startMs);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder steps(List<ExplainQueryStepResponse> steps) {
            this.steps = Objects.requireNonNull(steps);
            return this;
        }
        public Builder steps(ExplainQueryStepResponse... steps) {
            return steps(List.of(steps));
        }
        @CustomType.Setter
        public Builder waitMsAvg(String waitMsAvg) {
            this.waitMsAvg = Objects.requireNonNull(waitMsAvg);
            return this;
        }
        @CustomType.Setter
        public Builder waitMsMax(String waitMsMax) {
            this.waitMsMax = Objects.requireNonNull(waitMsMax);
            return this;
        }
        @CustomType.Setter
        public Builder waitRatioAvg(Double waitRatioAvg) {
            this.waitRatioAvg = Objects.requireNonNull(waitRatioAvg);
            return this;
        }
        @CustomType.Setter
        public Builder waitRatioMax(Double waitRatioMax) {
            this.waitRatioMax = Objects.requireNonNull(waitRatioMax);
            return this;
        }
        @CustomType.Setter
        public Builder writeMsAvg(String writeMsAvg) {
            this.writeMsAvg = Objects.requireNonNull(writeMsAvg);
            return this;
        }
        @CustomType.Setter
        public Builder writeMsMax(String writeMsMax) {
            this.writeMsMax = Objects.requireNonNull(writeMsMax);
            return this;
        }
        @CustomType.Setter
        public Builder writeRatioAvg(Double writeRatioAvg) {
            this.writeRatioAvg = Objects.requireNonNull(writeRatioAvg);
            return this;
        }
        @CustomType.Setter
        public Builder writeRatioMax(Double writeRatioMax) {
            this.writeRatioMax = Objects.requireNonNull(writeRatioMax);
            return this;
        }
        public ExplainQueryStageResponse build() {
            final var o = new ExplainQueryStageResponse();
            o.completedParallelInputs = completedParallelInputs;
            o.computeMsAvg = computeMsAvg;
            o.computeMsMax = computeMsMax;
            o.computeRatioAvg = computeRatioAvg;
            o.computeRatioMax = computeRatioMax;
            o.endMs = endMs;
            o.inputStages = inputStages;
            o.name = name;
            o.parallelInputs = parallelInputs;
            o.readMsAvg = readMsAvg;
            o.readMsMax = readMsMax;
            o.readRatioAvg = readRatioAvg;
            o.readRatioMax = readRatioMax;
            o.recordsRead = recordsRead;
            o.recordsWritten = recordsWritten;
            o.shuffleOutputBytes = shuffleOutputBytes;
            o.shuffleOutputBytesSpilled = shuffleOutputBytesSpilled;
            o.slotMs = slotMs;
            o.startMs = startMs;
            o.status = status;
            o.steps = steps;
            o.waitMsAvg = waitMsAvg;
            o.waitMsMax = waitMsMax;
            o.waitRatioAvg = waitRatioAvg;
            o.waitRatioMax = waitRatioMax;
            o.writeMsAvg = writeMsAvg;
            o.writeMsMax = writeMsMax;
            o.writeRatioAvg = writeRatioAvg;
            o.writeRatioMax = writeRatioMax;
            return o;
        }
    }
}
