// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class BackendRuleResponse {
    /**
     * @return The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
     * 
     */
    private String address;
    /**
     * @return The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
     * 
     */
    private Double deadline;
    /**
     * @return When disable_auth is true, a JWT ID token won&#39;t be generated and the original &#34;Authorization&#34; HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
     * 
     */
    private Boolean disableAuth;
    /**
     * @return The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP &#34;authorization&#34; header, and sent to the backend.
     * 
     */
    private String jwtAudience;
    /**
     * @return The number of seconds to wait for the completion of a long running operation. The default is no deadline.
     * 
     */
    private Double operationDeadline;
    private String pathTranslation;
    /**
     * @return The protocol used for sending a request to the backend. The supported values are &#34;http/1.1&#34; and &#34;h2&#34;. The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to &#34;h2&#34; for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
     * 
     */
    private String protocol;
    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    private String selector;

    private BackendRuleResponse() {}
    /**
     * @return The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
     * 
     */
    public Double deadline() {
        return this.deadline;
    }
    /**
     * @return When disable_auth is true, a JWT ID token won&#39;t be generated and the original &#34;Authorization&#34; HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
     * 
     */
    public Boolean disableAuth() {
        return this.disableAuth;
    }
    /**
     * @return The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP &#34;authorization&#34; header, and sent to the backend.
     * 
     */
    public String jwtAudience() {
        return this.jwtAudience;
    }
    /**
     * @return The number of seconds to wait for the completion of a long running operation. The default is no deadline.
     * 
     */
    public Double operationDeadline() {
        return this.operationDeadline;
    }
    public String pathTranslation() {
        return this.pathTranslation;
    }
    /**
     * @return The protocol used for sending a request to the backend. The supported values are &#34;http/1.1&#34; and &#34;h2&#34;. The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to &#34;h2&#34; for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public String selector() {
        return this.selector;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BackendRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private Double deadline;
        private Boolean disableAuth;
        private String jwtAudience;
        private Double operationDeadline;
        private String pathTranslation;
        private String protocol;
        private String selector;
        public Builder() {}
        public Builder(BackendRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.deadline = defaults.deadline;
    	      this.disableAuth = defaults.disableAuth;
    	      this.jwtAudience = defaults.jwtAudience;
    	      this.operationDeadline = defaults.operationDeadline;
    	      this.pathTranslation = defaults.pathTranslation;
    	      this.protocol = defaults.protocol;
    	      this.selector = defaults.selector;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder deadline(Double deadline) {
            this.deadline = Objects.requireNonNull(deadline);
            return this;
        }
        @CustomType.Setter
        public Builder disableAuth(Boolean disableAuth) {
            this.disableAuth = Objects.requireNonNull(disableAuth);
            return this;
        }
        @CustomType.Setter
        public Builder jwtAudience(String jwtAudience) {
            this.jwtAudience = Objects.requireNonNull(jwtAudience);
            return this;
        }
        @CustomType.Setter
        public Builder operationDeadline(Double operationDeadline) {
            this.operationDeadline = Objects.requireNonNull(operationDeadline);
            return this;
        }
        @CustomType.Setter
        public Builder pathTranslation(String pathTranslation) {
            this.pathTranslation = Objects.requireNonNull(pathTranslation);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder selector(String selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }
        public BackendRuleResponse build() {
            final var o = new BackendRuleResponse();
            o.address = address;
            o.deadline = deadline;
            o.disableAuth = disableAuth;
            o.jwtAudience = jwtAudience;
            o.operationDeadline = operationDeadline;
            o.pathTranslation = pathTranslation;
            o.protocol = protocol;
            o.selector = selector;
            return o;
        }
    }
}
