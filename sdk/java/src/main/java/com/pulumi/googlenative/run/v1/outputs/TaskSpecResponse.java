// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v1.outputs.ContainerResponse;
import com.pulumi.googlenative.run.v1.outputs.VolumeResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TaskSpecResponse {
    /**
     * @return Optional. List of containers belonging to the task. We disallow a number of fields on this Container. Only a single container may be provided.
     * 
     */
    private List<ContainerResponse> containers;
    /**
     * @return Optional. Number of retries allowed per task, before marking this job failed.
     * 
     */
    private Integer maxRetries;
    /**
     * @return Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project&#39;s default service account. +optional
     * 
     */
    private String serviceAccountName;
    /**
     * @return Optional. Optional duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. +optional
     * 
     */
    private String timeoutSeconds;
    /**
     * @return Optional. List of volumes that can be mounted by containers belonging to the task. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
     * 
     */
    private List<VolumeResponse> volumes;

    private TaskSpecResponse() {}
    /**
     * @return Optional. List of containers belonging to the task. We disallow a number of fields on this Container. Only a single container may be provided.
     * 
     */
    public List<ContainerResponse> containers() {
        return this.containers;
    }
    /**
     * @return Optional. Number of retries allowed per task, before marking this job failed.
     * 
     */
    public Integer maxRetries() {
        return this.maxRetries;
    }
    /**
     * @return Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project&#39;s default service account. +optional
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }
    /**
     * @return Optional. Optional duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. +optional
     * 
     */
    public String timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * @return Optional. List of volumes that can be mounted by containers belonging to the task. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
     * 
     */
    public List<VolumeResponse> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskSpecResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ContainerResponse> containers;
        private Integer maxRetries;
        private String serviceAccountName;
        private String timeoutSeconds;
        private List<VolumeResponse> volumes;
        public Builder() {}
        public Builder(TaskSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containers = defaults.containers;
    	      this.maxRetries = defaults.maxRetries;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder containers(List<ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }
        public Builder containers(ContainerResponse... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder maxRetries(Integer maxRetries) {
            this.maxRetries = Objects.requireNonNull(maxRetries);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountName(String serviceAccountName) {
            this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(String timeoutSeconds) {
            this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }
        public TaskSpecResponse build() {
            final var o = new TaskSpecResponse();
            o.containers = containers;
            o.maxRetries = maxRetries;
            o.serviceAccountName = serviceAccountName;
            o.timeoutSeconds = timeoutSeconds;
            o.volumes = volumes;
            return o;
        }
    }
}
