// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ManifestResponse {
    /**
     * @return The name of the generated file. The default is `manifest` with the extension suffix corresponding to the `Manifest.type`.
     * 
     */
    private String fileName;
    /**
     * @return List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
     * 
     */
    private List<String> muxStreams;
    /**
     * @return Type of the manifest, can be `HLS` or `DASH`.
     * 
     */
    private String type;

    private ManifestResponse() {}
    /**
     * @return The name of the generated file. The default is `manifest` with the extension suffix corresponding to the `Manifest.type`.
     * 
     */
    public String fileName() {
        return this.fileName;
    }
    /**
     * @return List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
     * 
     */
    public List<String> muxStreams() {
        return this.muxStreams;
    }
    /**
     * @return Type of the manifest, can be `HLS` or `DASH`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManifestResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String fileName;
        private List<String> muxStreams;
        private String type;
        public Builder() {}
        public Builder(ManifestResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fileName = defaults.fileName;
    	      this.muxStreams = defaults.muxStreams;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder fileName(String fileName) {
            this.fileName = Objects.requireNonNull(fileName);
            return this;
        }
        @CustomType.Setter
        public Builder muxStreams(List<String> muxStreams) {
            this.muxStreams = Objects.requireNonNull(muxStreams);
            return this;
        }
        public Builder muxStreams(String... muxStreams) {
            return muxStreams(List.of(muxStreams));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ManifestResponse build() {
            final var o = new ManifestResponse();
            o.fileName = fileName;
            o.muxStreams = muxStreams;
            o.type = type;
            return o;
        }
    }
}
