// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class NonCompliantFileResponse {
    /**
     * @return Command to display the non-compliant files.
     * 
     */
    private String displayCommand;
    /**
     * @return Empty if `display_command` is set.
     * 
     */
    private String path;
    /**
     * @return Explains why a file is non compliant for a CIS check.
     * 
     */
    private String reason;

    private NonCompliantFileResponse() {}
    /**
     * @return Command to display the non-compliant files.
     * 
     */
    public String displayCommand() {
        return this.displayCommand;
    }
    /**
     * @return Empty if `display_command` is set.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Explains why a file is non compliant for a CIS check.
     * 
     */
    public String reason() {
        return this.reason;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NonCompliantFileResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String displayCommand;
        private String path;
        private String reason;
        public Builder() {}
        public Builder(NonCompliantFileResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayCommand = defaults.displayCommand;
    	      this.path = defaults.path;
    	      this.reason = defaults.reason;
        }

        @CustomType.Setter
        public Builder displayCommand(String displayCommand) {
            this.displayCommand = Objects.requireNonNull(displayCommand);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder reason(String reason) {
            this.reason = Objects.requireNonNull(reason);
            return this;
        }
        public NonCompliantFileResponse build() {
            final var o = new NonCompliantFileResponse();
            o.displayCommand = displayCommand;
            o.path = path;
            o.reason = reason;
            return o;
        }
    }
}
