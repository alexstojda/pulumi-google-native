// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v1.outputs.ExecActionResponse;
import com.pulumi.googlenative.run.v1.outputs.GRPCActionResponse;
import com.pulumi.googlenative.run.v1.outputs.HTTPGetActionResponse;
import com.pulumi.googlenative.run.v1.outputs.TCPSocketActionResponse;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class ProbeResponse {
    /**
     * @return (Optional) Not supported by Cloud Run One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
     * 
     */
    private ExecActionResponse exec;
    /**
     * @return (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     * 
     */
    private Integer failureThreshold;
    /**
     * @return (Optional) GRPCAction specifies an action involving a GRPC port. A field inlined from the Handler message.
     * 
     */
    private GRPCActionResponse grpc;
    /**
     * @return (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
     * 
     */
    private HTTPGetActionResponse httpGet;
    /**
     * @return (Optional) Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * 
     */
    private Integer initialDelaySeconds;
    /**
     * @return (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
     * 
     */
    private Integer periodSeconds;
    /**
     * @return (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
     * 
     */
    private Integer successThreshold;
    /**
     * @return (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
     * 
     */
    private TCPSocketActionResponse tcpSocket;
    /**
     * @return (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * 
     */
    private Integer timeoutSeconds;

    private ProbeResponse() {}
    /**
     * @return (Optional) Not supported by Cloud Run One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
     * 
     */
    public ExecActionResponse exec() {
        return this.exec;
    }
    /**
     * @return (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     * 
     */
    public Integer failureThreshold() {
        return this.failureThreshold;
    }
    /**
     * @return (Optional) GRPCAction specifies an action involving a GRPC port. A field inlined from the Handler message.
     * 
     */
    public GRPCActionResponse grpc() {
        return this.grpc;
    }
    /**
     * @return (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
     * 
     */
    public HTTPGetActionResponse httpGet() {
        return this.httpGet;
    }
    /**
     * @return (Optional) Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * 
     */
    public Integer initialDelaySeconds() {
        return this.initialDelaySeconds;
    }
    /**
     * @return (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
     * 
     */
    public Integer periodSeconds() {
        return this.periodSeconds;
    }
    /**
     * @return (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
     * 
     */
    public Integer successThreshold() {
        return this.successThreshold;
    }
    /**
     * @return (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
     * 
     */
    public TCPSocketActionResponse tcpSocket() {
        return this.tcpSocket;
    }
    /**
     * @return (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ExecActionResponse exec;
        private Integer failureThreshold;
        private GRPCActionResponse grpc;
        private HTTPGetActionResponse httpGet;
        private Integer initialDelaySeconds;
        private Integer periodSeconds;
        private Integer successThreshold;
        private TCPSocketActionResponse tcpSocket;
        private Integer timeoutSeconds;
        public Builder() {}
        public Builder(ProbeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.grpc = defaults.grpc;
    	      this.httpGet = defaults.httpGet;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcpSocket = defaults.tcpSocket;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        @CustomType.Setter
        public Builder exec(ExecActionResponse exec) {
            this.exec = Objects.requireNonNull(exec);
            return this;
        }
        @CustomType.Setter
        public Builder failureThreshold(Integer failureThreshold) {
            this.failureThreshold = Objects.requireNonNull(failureThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder grpc(GRPCActionResponse grpc) {
            this.grpc = Objects.requireNonNull(grpc);
            return this;
        }
        @CustomType.Setter
        public Builder httpGet(HTTPGetActionResponse httpGet) {
            this.httpGet = Objects.requireNonNull(httpGet);
            return this;
        }
        @CustomType.Setter
        public Builder initialDelaySeconds(Integer initialDelaySeconds) {
            this.initialDelaySeconds = Objects.requireNonNull(initialDelaySeconds);
            return this;
        }
        @CustomType.Setter
        public Builder periodSeconds(Integer periodSeconds) {
            this.periodSeconds = Objects.requireNonNull(periodSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(Integer successThreshold) {
            this.successThreshold = Objects.requireNonNull(successThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder tcpSocket(TCPSocketActionResponse tcpSocket) {
            this.tcpSocket = Objects.requireNonNull(tcpSocket);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds);
            return this;
        }
        public ProbeResponse build() {
            final var o = new ProbeResponse();
            o.exec = exec;
            o.failureThreshold = failureThreshold;
            o.grpc = grpc;
            o.httpGet = httpGet;
            o.initialDelaySeconds = initialDelaySeconds;
            o.periodSeconds = periodSeconds;
            o.successThreshold = successThreshold;
            o.tcpSocket = tcpSocket;
            o.timeoutSeconds = timeoutSeconds;
            return o;
        }
    }
}
