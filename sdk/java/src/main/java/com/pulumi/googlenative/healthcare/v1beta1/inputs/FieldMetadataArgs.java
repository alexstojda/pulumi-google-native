// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1beta1.enums.FieldMetadataAction;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies FHIR paths to match, and how to handle de-identification of matching fields.
 * 
 */
public final class FieldMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final FieldMetadataArgs Empty = new FieldMetadataArgs();

    /**
     * Deidentify action for one field.
     * 
     */
    @Import(name="action")
    private @Nullable Output<FieldMetadataAction> action;

    /**
     * @return Deidentify action for one field.
     * 
     */
    public Optional<Output<FieldMetadataAction>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<List<String>> paths;

    /**
     * @return List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
     * 
     */
    public Optional<Output<List<String>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    private FieldMetadataArgs() {}

    private FieldMetadataArgs(FieldMetadataArgs $) {
        this.action = $.action;
        this.paths = $.paths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldMetadataArgs $;

        public Builder() {
            $ = new FieldMetadataArgs();
        }

        public Builder(FieldMetadataArgs defaults) {
            $ = new FieldMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Deidentify action for one field.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<FieldMetadataAction> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Deidentify action for one field.
         * 
         * @return builder
         * 
         */
        public Builder action(FieldMetadataAction action) {
            return action(Output.of(action));
        }

        /**
         * @param paths List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        public FieldMetadataArgs build() {
            return $;
        }
    }

}
