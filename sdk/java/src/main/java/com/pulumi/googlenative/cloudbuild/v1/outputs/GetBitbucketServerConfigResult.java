// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudbuild.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudbuild.v1.outputs.BitbucketServerRepositoryIdResponse;
import com.pulumi.googlenative.cloudbuild.v1.outputs.BitbucketServerSecretsResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBitbucketServerConfigResult {
    /**
     * @return Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    private String apiKey;
    /**
     * @return Connected Bitbucket Server repositories for this config.
     * 
     */
    private List<BitbucketServerRepositoryIdResponse> connectedRepositories;
    /**
     * @return Time when the config was created.
     * 
     */
    private String createTime;
    /**
     * @return Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    private String hostUri;
    /**
     * @return The resource name for the config.
     * 
     */
    private String name;
    /**
     * @return Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    private String peeredNetwork;
    /**
     * @return Secret Manager secrets needed by the config.
     * 
     */
    private BitbucketServerSecretsResponse secrets;
    /**
     * @return Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     * 
     */
    private String sslCa;
    /**
     * @return Username of the account Cloud Build will use on Bitbucket Server.
     * 
     */
    private String username;
    /**
     * @return UUID included in webhook requests. The UUID is used to look up the corresponding config.
     * 
     */
    private String webhookKey;

    private GetBitbucketServerConfigResult() {}
    /**
     * @return Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }
    /**
     * @return Connected Bitbucket Server repositories for this config.
     * 
     */
    public List<BitbucketServerRepositoryIdResponse> connectedRepositories() {
        return this.connectedRepositories;
    }
    /**
     * @return Time when the config was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     * 
     */
    public String hostUri() {
        return this.hostUri;
    }
    /**
     * @return The resource name for the config.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     * 
     */
    public String peeredNetwork() {
        return this.peeredNetwork;
    }
    /**
     * @return Secret Manager secrets needed by the config.
     * 
     */
    public BitbucketServerSecretsResponse secrets() {
        return this.secrets;
    }
    /**
     * @return Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     * 
     */
    public String sslCa() {
        return this.sslCa;
    }
    /**
     * @return Username of the account Cloud Build will use on Bitbucket Server.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return UUID included in webhook requests. The UUID is used to look up the corresponding config.
     * 
     */
    public String webhookKey() {
        return this.webhookKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBitbucketServerConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private List<BitbucketServerRepositoryIdResponse> connectedRepositories;
        private String createTime;
        private String hostUri;
        private String name;
        private String peeredNetwork;
        private BitbucketServerSecretsResponse secrets;
        private String sslCa;
        private String username;
        private String webhookKey;
        public Builder() {}
        public Builder(GetBitbucketServerConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.connectedRepositories = defaults.connectedRepositories;
    	      this.createTime = defaults.createTime;
    	      this.hostUri = defaults.hostUri;
    	      this.name = defaults.name;
    	      this.peeredNetwork = defaults.peeredNetwork;
    	      this.secrets = defaults.secrets;
    	      this.sslCa = defaults.sslCa;
    	      this.username = defaults.username;
    	      this.webhookKey = defaults.webhookKey;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            this.apiKey = Objects.requireNonNull(apiKey);
            return this;
        }
        @CustomType.Setter
        public Builder connectedRepositories(List<BitbucketServerRepositoryIdResponse> connectedRepositories) {
            this.connectedRepositories = Objects.requireNonNull(connectedRepositories);
            return this;
        }
        public Builder connectedRepositories(BitbucketServerRepositoryIdResponse... connectedRepositories) {
            return connectedRepositories(List.of(connectedRepositories));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder hostUri(String hostUri) {
            this.hostUri = Objects.requireNonNull(hostUri);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peeredNetwork(String peeredNetwork) {
            this.peeredNetwork = Objects.requireNonNull(peeredNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder secrets(BitbucketServerSecretsResponse secrets) {
            this.secrets = Objects.requireNonNull(secrets);
            return this;
        }
        @CustomType.Setter
        public Builder sslCa(String sslCa) {
            this.sslCa = Objects.requireNonNull(sslCa);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder webhookKey(String webhookKey) {
            this.webhookKey = Objects.requireNonNull(webhookKey);
            return this;
        }
        public GetBitbucketServerConfigResult build() {
            final var o = new GetBitbucketServerConfigResult();
            o.apiKey = apiKey;
            o.connectedRepositories = connectedRepositories;
            o.createTime = createTime;
            o.hostUri = hostUri;
            o.name = name;
            o.peeredNetwork = peeredNetwork;
            o.secrets = secrets;
            o.sslCa = sslCa;
            o.username = username;
            o.webhookKey = webhookKey;
            return o;
        }
    }
}
