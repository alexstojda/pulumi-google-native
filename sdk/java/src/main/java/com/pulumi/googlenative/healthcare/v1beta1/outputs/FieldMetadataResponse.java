// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class FieldMetadataResponse {
    /**
     * @return Deidentify action for one field.
     * 
     */
    private String action;
    /**
     * @return List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
     * 
     */
    private List<String> paths;

    private FieldMetadataResponse() {}
    /**
     * @return Deidentify action for one field.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field &#34;Patient.Address.city&#34;, which uses a string type, can be matched by &#34;Patient.Address.String&#34;. Path also supports partial matching. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.city&#34; (Patient omitted). Partial matching and type matching can be combined. For example, &#34;Patient.Address.city&#34; can be matched by &#34;Address.String&#34;. For &#34;choice&#34; types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, &#34;deceasedAge.unit&#34; is matched by &#34;Deceased.Age.unit&#34;. Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FieldMetadataResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<String> paths;
        public Builder() {}
        public Builder(FieldMetadataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.paths = defaults.paths;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            this.paths = Objects.requireNonNull(paths);
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        public FieldMetadataResponse build() {
            final var o = new FieldMetadataResponse();
            o.action = action;
            o.paths = paths;
            return o;
        }
    }
}
