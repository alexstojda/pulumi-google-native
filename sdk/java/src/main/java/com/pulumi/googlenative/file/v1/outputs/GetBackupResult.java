// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.file.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBackupResult {
    /**
     * @return Capacity of the source file share when the backup was created.
     * 
     */
    private String capacityGb;
    /**
     * @return The time when the backup was created.
     * 
     */
    private String createTime;
    /**
     * @return A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    private String description;
    /**
     * @return Amount of bytes that will be downloaded if the backup is restored. This may be different than storage bytes, since sequential backups of the same disk will share storage.
     * 
     */
    private String downloadBytes;
    /**
     * @return Resource labels to represent user provided metadata.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.
     * 
     */
    private String name;
    /**
     * @return Reserved for future use.
     * 
     */
    private Boolean satisfiesPzs;
    /**
     * @return Name of the file share in the source Cloud Filestore instance that the backup is created from.
     * 
     */
    private String sourceFileShare;
    /**
     * @return The resource name of the source Cloud Filestore instance, in the format `projects/{project_number}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
     * 
     */
    private String sourceInstance;
    /**
     * @return The service tier of the source Cloud Filestore instance that this backup is created from.
     * 
     */
    private String sourceInstanceTier;
    /**
     * @return The backup state.
     * 
     */
    private String state;
    /**
     * @return The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.
     * 
     */
    private String storageBytes;

    private GetBackupResult() {}
    /**
     * @return Capacity of the source file share when the backup was created.
     * 
     */
    public String capacityGb() {
        return this.capacityGb;
    }
    /**
     * @return The time when the backup was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Amount of bytes that will be downloaded if the backup is restored. This may be different than storage bytes, since sequential backups of the same disk will share storage.
     * 
     */
    public String downloadBytes() {
        return this.downloadBytes;
    }
    /**
     * @return Resource labels to represent user provided metadata.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Reserved for future use.
     * 
     */
    public Boolean satisfiesPzs() {
        return this.satisfiesPzs;
    }
    /**
     * @return Name of the file share in the source Cloud Filestore instance that the backup is created from.
     * 
     */
    public String sourceFileShare() {
        return this.sourceFileShare;
    }
    /**
     * @return The resource name of the source Cloud Filestore instance, in the format `projects/{project_number}/locations/{location_id}/instances/{instance_id}`, used to create this backup.
     * 
     */
    public String sourceInstance() {
        return this.sourceInstance;
    }
    /**
     * @return The service tier of the source Cloud Filestore instance that this backup is created from.
     * 
     */
    public String sourceInstanceTier() {
        return this.sourceInstanceTier;
    }
    /**
     * @return The backup state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.
     * 
     */
    public String storageBytes() {
        return this.storageBytes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String capacityGb;
        private String createTime;
        private String description;
        private String downloadBytes;
        private Map<String,String> labels;
        private String name;
        private Boolean satisfiesPzs;
        private String sourceFileShare;
        private String sourceInstance;
        private String sourceInstanceTier;
        private String state;
        private String storageBytes;
        public Builder() {}
        public Builder(GetBackupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityGb = defaults.capacityGb;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.downloadBytes = defaults.downloadBytes;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.sourceFileShare = defaults.sourceFileShare;
    	      this.sourceInstance = defaults.sourceInstance;
    	      this.sourceInstanceTier = defaults.sourceInstanceTier;
    	      this.state = defaults.state;
    	      this.storageBytes = defaults.storageBytes;
        }

        @CustomType.Setter
        public Builder capacityGb(String capacityGb) {
            this.capacityGb = Objects.requireNonNull(capacityGb);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder downloadBytes(String downloadBytes) {
            this.downloadBytes = Objects.requireNonNull(downloadBytes);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder satisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }
        @CustomType.Setter
        public Builder sourceFileShare(String sourceFileShare) {
            this.sourceFileShare = Objects.requireNonNull(sourceFileShare);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInstance(String sourceInstance) {
            this.sourceInstance = Objects.requireNonNull(sourceInstance);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInstanceTier(String sourceInstanceTier) {
            this.sourceInstanceTier = Objects.requireNonNull(sourceInstanceTier);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageBytes(String storageBytes) {
            this.storageBytes = Objects.requireNonNull(storageBytes);
            return this;
        }
        public GetBackupResult build() {
            final var o = new GetBackupResult();
            o.capacityGb = capacityGb;
            o.createTime = createTime;
            o.description = description;
            o.downloadBytes = downloadBytes;
            o.labels = labels;
            o.name = name;
            o.satisfiesPzs = satisfiesPzs;
            o.sourceFileShare = sourceFileShare;
            o.sourceInstance = sourceInstance;
            o.sourceInstanceTier = sourceInstanceTier;
            o.state = state;
            o.storageBytes = storageBytes;
            return o;
        }
    }
}
