// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2BinaryAuthorizationResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2ConditionResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2RevisionTemplateResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2TrafficTargetResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2TrafficTargetStatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. This field follows Kubernetes annotations&#39; namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return Settings for the Binary Authorization feature.
     * 
     */
    private GoogleCloudRunV2BinaryAuthorizationResponse binaryAuthorization;
    /**
     * @return Arbitrary identifier for the API client.
     * 
     */
    private String client;
    /**
     * @return Arbitrary version identifier for the API client.
     * 
     */
    private String clientVersion;
    /**
     * @return The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private List<GoogleCloudRunV2ConditionResponse> conditions;
    /**
     * @return The creation time.
     * 
     */
    private String createTime;
    /**
     * @return Email address of the authenticated creator.
     * 
     */
    private String creator;
    /**
     * @return The deletion time.
     * 
     */
    private String deleteTime;
    /**
     * @return User-provided description of the Service. This field currently has a 512-character limit.
     * 
     */
    private String description;
    /**
     * @return A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    private String etag;
    /**
     * @return For a deleted resource, the time after which it will be permamently deleted.
     * 
     */
    private String expireTime;
    /**
     * @return A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.
     * 
     */
    private String generation;
    /**
     * @return Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * 
     */
    private String ingress;
    /**
     * @return Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Email address of the last authenticated modifier.
     * 
     */
    private String lastModifier;
    /**
     * @return Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private String latestCreatedRevision;
    /**
     * @return Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private String latestReadyRevision;
    /**
     * @return The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     * 
     */
    private String launchStage;
    /**
     * @return The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     * 
     */
    private String name;
    /**
     * @return The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.
     * 
     */
    private String observedGeneration;
    /**
     * @return Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     * 
     */
    private Boolean reconciling;
    /**
     * @return The template used to create revisions for this Service.
     * 
     */
    private GoogleCloudRunV2RevisionTemplateResponse template;
    /**
     * @return The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private GoogleCloudRunV2ConditionResponse terminalCondition;
    /**
     * @return Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     * 
     */
    private List<GoogleCloudRunV2TrafficTargetResponse> traffic;
    /**
     * @return Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    private List<GoogleCloudRunV2TrafficTargetStatusResponse> trafficStatuses;
    /**
     * @return Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    private String uid;
    /**
     * @return The last-modified time.
     * 
     */
    private String updateTime;
    /**
     * @return The main URI in which this Service is serving traffic.
     * 
     */
    private String uri;

    private GetServiceResult() {}
    /**
     * @return Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. This field follows Kubernetes annotations&#39; namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return Settings for the Binary Authorization feature.
     * 
     */
    public GoogleCloudRunV2BinaryAuthorizationResponse binaryAuthorization() {
        return this.binaryAuthorization;
    }
    /**
     * @return Arbitrary identifier for the API client.
     * 
     */
    public String client() {
        return this.client;
    }
    /**
     * @return Arbitrary version identifier for the API client.
     * 
     */
    public String clientVersion() {
        return this.clientVersion;
    }
    /**
     * @return The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public List<GoogleCloudRunV2ConditionResponse> conditions() {
        return this.conditions;
    }
    /**
     * @return The creation time.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Email address of the authenticated creator.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return The deletion time.
     * 
     */
    public String deleteTime() {
        return this.deleteTime;
    }
    /**
     * @return User-provided description of the Service. This field currently has a 512-character limit.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return For a deleted resource, the time after which it will be permamently deleted.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.
     * 
     */
    public String generation() {
        return this.generation;
    }
    /**
     * @return Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * 
     */
    public String ingress() {
        return this.ingress;
    }
    /**
     * @return Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Email address of the last authenticated modifier.
     * 
     */
    public String lastModifier() {
        return this.lastModifier;
    }
    /**
     * @return Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public String latestCreatedRevision() {
        return this.latestCreatedRevision;
    }
    /**
     * @return Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public String latestReadyRevision() {
        return this.latestReadyRevision;
    }
    /**
     * @return The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     * 
     */
    public String launchStage() {
        return this.launchStage;
    }
    /**
     * @return The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.
     * 
     */
    public String observedGeneration() {
        return this.observedGeneration;
    }
    /**
     * @return Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     * 
     */
    public Boolean reconciling() {
        return this.reconciling;
    }
    /**
     * @return The template used to create revisions for this Service.
     * 
     */
    public GoogleCloudRunV2RevisionTemplateResponse template() {
        return this.template;
    }
    /**
     * @return The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public GoogleCloudRunV2ConditionResponse terminalCondition() {
        return this.terminalCondition;
    }
    /**
     * @return Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     * 
     */
    public List<GoogleCloudRunV2TrafficTargetResponse> traffic() {
        return this.traffic;
    }
    /**
     * @return Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     * 
     */
    public List<GoogleCloudRunV2TrafficTargetStatusResponse> trafficStatuses() {
        return this.trafficStatuses;
    }
    /**
     * @return Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return The last-modified time.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The main URI in which this Service is serving traffic.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private GoogleCloudRunV2BinaryAuthorizationResponse binaryAuthorization;
        private String client;
        private String clientVersion;
        private List<GoogleCloudRunV2ConditionResponse> conditions;
        private String createTime;
        private String creator;
        private String deleteTime;
        private String description;
        private String etag;
        private String expireTime;
        private String generation;
        private String ingress;
        private Map<String,String> labels;
        private String lastModifier;
        private String latestCreatedRevision;
        private String latestReadyRevision;
        private String launchStage;
        private String name;
        private String observedGeneration;
        private Boolean reconciling;
        private GoogleCloudRunV2RevisionTemplateResponse template;
        private GoogleCloudRunV2ConditionResponse terminalCondition;
        private List<GoogleCloudRunV2TrafficTargetResponse> traffic;
        private List<GoogleCloudRunV2TrafficTargetStatusResponse> trafficStatuses;
        private String uid;
        private String updateTime;
        private String uri;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.binaryAuthorization = defaults.binaryAuthorization;
    	      this.client = defaults.client;
    	      this.clientVersion = defaults.clientVersion;
    	      this.conditions = defaults.conditions;
    	      this.createTime = defaults.createTime;
    	      this.creator = defaults.creator;
    	      this.deleteTime = defaults.deleteTime;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.expireTime = defaults.expireTime;
    	      this.generation = defaults.generation;
    	      this.ingress = defaults.ingress;
    	      this.labels = defaults.labels;
    	      this.lastModifier = defaults.lastModifier;
    	      this.latestCreatedRevision = defaults.latestCreatedRevision;
    	      this.latestReadyRevision = defaults.latestReadyRevision;
    	      this.launchStage = defaults.launchStage;
    	      this.name = defaults.name;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.reconciling = defaults.reconciling;
    	      this.template = defaults.template;
    	      this.terminalCondition = defaults.terminalCondition;
    	      this.traffic = defaults.traffic;
    	      this.trafficStatuses = defaults.trafficStatuses;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder binaryAuthorization(GoogleCloudRunV2BinaryAuthorizationResponse binaryAuthorization) {
            this.binaryAuthorization = Objects.requireNonNull(binaryAuthorization);
            return this;
        }
        @CustomType.Setter
        public Builder client(String client) {
            this.client = Objects.requireNonNull(client);
            return this;
        }
        @CustomType.Setter
        public Builder clientVersion(String clientVersion) {
            this.clientVersion = Objects.requireNonNull(clientVersion);
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<GoogleCloudRunV2ConditionResponse> conditions) {
            this.conditions = Objects.requireNonNull(conditions);
            return this;
        }
        public Builder conditions(GoogleCloudRunV2ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            this.creator = Objects.requireNonNull(creator);
            return this;
        }
        @CustomType.Setter
        public Builder deleteTime(String deleteTime) {
            this.deleteTime = Objects.requireNonNull(deleteTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        @CustomType.Setter
        public Builder generation(String generation) {
            this.generation = Objects.requireNonNull(generation);
            return this;
        }
        @CustomType.Setter
        public Builder ingress(String ingress) {
            this.ingress = Objects.requireNonNull(ingress);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifier(String lastModifier) {
            this.lastModifier = Objects.requireNonNull(lastModifier);
            return this;
        }
        @CustomType.Setter
        public Builder latestCreatedRevision(String latestCreatedRevision) {
            this.latestCreatedRevision = Objects.requireNonNull(latestCreatedRevision);
            return this;
        }
        @CustomType.Setter
        public Builder latestReadyRevision(String latestReadyRevision) {
            this.latestReadyRevision = Objects.requireNonNull(latestReadyRevision);
            return this;
        }
        @CustomType.Setter
        public Builder launchStage(String launchStage) {
            this.launchStage = Objects.requireNonNull(launchStage);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder observedGeneration(String observedGeneration) {
            this.observedGeneration = Objects.requireNonNull(observedGeneration);
            return this;
        }
        @CustomType.Setter
        public Builder reconciling(Boolean reconciling) {
            this.reconciling = Objects.requireNonNull(reconciling);
            return this;
        }
        @CustomType.Setter
        public Builder template(GoogleCloudRunV2RevisionTemplateResponse template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }
        @CustomType.Setter
        public Builder terminalCondition(GoogleCloudRunV2ConditionResponse terminalCondition) {
            this.terminalCondition = Objects.requireNonNull(terminalCondition);
            return this;
        }
        @CustomType.Setter
        public Builder traffic(List<GoogleCloudRunV2TrafficTargetResponse> traffic) {
            this.traffic = Objects.requireNonNull(traffic);
            return this;
        }
        public Builder traffic(GoogleCloudRunV2TrafficTargetResponse... traffic) {
            return traffic(List.of(traffic));
        }
        @CustomType.Setter
        public Builder trafficStatuses(List<GoogleCloudRunV2TrafficTargetStatusResponse> trafficStatuses) {
            this.trafficStatuses = Objects.requireNonNull(trafficStatuses);
            return this;
        }
        public Builder trafficStatuses(GoogleCloudRunV2TrafficTargetStatusResponse... trafficStatuses) {
            return trafficStatuses(List.of(trafficStatuses));
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public GetServiceResult build() {
            final var o = new GetServiceResult();
            o.annotations = annotations;
            o.binaryAuthorization = binaryAuthorization;
            o.client = client;
            o.clientVersion = clientVersion;
            o.conditions = conditions;
            o.createTime = createTime;
            o.creator = creator;
            o.deleteTime = deleteTime;
            o.description = description;
            o.etag = etag;
            o.expireTime = expireTime;
            o.generation = generation;
            o.ingress = ingress;
            o.labels = labels;
            o.lastModifier = lastModifier;
            o.latestCreatedRevision = latestCreatedRevision;
            o.latestReadyRevision = latestReadyRevision;
            o.launchStage = launchStage;
            o.name = name;
            o.observedGeneration = observedGeneration;
            o.reconciling = reconciling;
            o.template = template;
            o.terminalCondition = terminalCondition;
            o.traffic = traffic;
            o.trafficStatuses = trafficStatuses;
            o.uid = uid;
            o.updateTime = updateTime;
            o.uri = uri;
            return o;
        }
    }
}
