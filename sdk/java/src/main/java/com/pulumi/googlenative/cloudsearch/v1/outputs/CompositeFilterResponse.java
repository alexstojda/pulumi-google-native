// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudsearch.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudsearch.v1.outputs.FilterResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CompositeFilterResponse {
    /**
     * @return The logic operator of the sub filter.
     * 
     */
    private String logicOperator;
    /**
     * @return Sub filters.
     * 
     */
    private List<FilterResponse> subFilters;

    private CompositeFilterResponse() {}
    /**
     * @return The logic operator of the sub filter.
     * 
     */
    public String logicOperator() {
        return this.logicOperator;
    }
    /**
     * @return Sub filters.
     * 
     */
    public List<FilterResponse> subFilters() {
        return this.subFilters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CompositeFilterResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String logicOperator;
        private List<FilterResponse> subFilters;
        public Builder() {}
        public Builder(CompositeFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logicOperator = defaults.logicOperator;
    	      this.subFilters = defaults.subFilters;
        }

        @CustomType.Setter
        public Builder logicOperator(String logicOperator) {
            this.logicOperator = Objects.requireNonNull(logicOperator);
            return this;
        }
        @CustomType.Setter
        public Builder subFilters(List<FilterResponse> subFilters) {
            this.subFilters = Objects.requireNonNull(subFilters);
            return this;
        }
        public Builder subFilters(FilterResponse... subFilters) {
            return subFilters(List.of(subFilters));
        }
        public CompositeFilterResponse build() {
            final var o = new CompositeFilterResponse();
            o.logicOperator = logicOperator;
            o.subFilters = subFilters;
            return o;
        }
    }
}
