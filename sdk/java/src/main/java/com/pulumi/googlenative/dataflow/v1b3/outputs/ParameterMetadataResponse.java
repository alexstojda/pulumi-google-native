// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow.v1b3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class ParameterMetadataResponse {
    /**
     * @return Optional. Additional metadata for describing this parameter.
     * 
     */
    private Map<String,String> customMetadata;
    /**
     * @return The help text to display for the parameter.
     * 
     */
    private String helpText;
    /**
     * @return Optional. Whether the parameter is optional. Defaults to false.
     * 
     */
    private Boolean isOptional;
    /**
     * @return The label to display for the parameter.
     * 
     */
    private String label;
    /**
     * @return The name of the parameter.
     * 
     */
    private String name;
    /**
     * @return Optional. The type of the parameter. Used for selecting input picker.
     * 
     */
    private String paramType;
    /**
     * @return Optional. Regexes that the parameter must match.
     * 
     */
    private List<String> regexes;

    private ParameterMetadataResponse() {}
    /**
     * @return Optional. Additional metadata for describing this parameter.
     * 
     */
    public Map<String,String> customMetadata() {
        return this.customMetadata;
    }
    /**
     * @return The help text to display for the parameter.
     * 
     */
    public String helpText() {
        return this.helpText;
    }
    /**
     * @return Optional. Whether the parameter is optional. Defaults to false.
     * 
     */
    public Boolean isOptional() {
        return this.isOptional;
    }
    /**
     * @return The label to display for the parameter.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The name of the parameter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. The type of the parameter. Used for selecting input picker.
     * 
     */
    public String paramType() {
        return this.paramType;
    }
    /**
     * @return Optional. Regexes that the parameter must match.
     * 
     */
    public List<String> regexes() {
        return this.regexes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ParameterMetadataResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> customMetadata;
        private String helpText;
        private Boolean isOptional;
        private String label;
        private String name;
        private String paramType;
        private List<String> regexes;
        public Builder() {}
        public Builder(ParameterMetadataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customMetadata = defaults.customMetadata;
    	      this.helpText = defaults.helpText;
    	      this.isOptional = defaults.isOptional;
    	      this.label = defaults.label;
    	      this.name = defaults.name;
    	      this.paramType = defaults.paramType;
    	      this.regexes = defaults.regexes;
        }

        @CustomType.Setter
        public Builder customMetadata(Map<String,String> customMetadata) {
            this.customMetadata = Objects.requireNonNull(customMetadata);
            return this;
        }
        @CustomType.Setter
        public Builder helpText(String helpText) {
            this.helpText = Objects.requireNonNull(helpText);
            return this;
        }
        @CustomType.Setter
        public Builder isOptional(Boolean isOptional) {
            this.isOptional = Objects.requireNonNull(isOptional);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder paramType(String paramType) {
            this.paramType = Objects.requireNonNull(paramType);
            return this;
        }
        @CustomType.Setter
        public Builder regexes(List<String> regexes) {
            this.regexes = Objects.requireNonNull(regexes);
            return this;
        }
        public Builder regexes(String... regexes) {
            return regexes(List.of(regexes));
        }
        public ParameterMetadataResponse build() {
            final var o = new ParameterMetadataResponse();
            o.customMetadata = customMetadata;
            o.helpText = helpText;
            o.isOptional = isOptional;
            o.label = label;
            o.name = name;
            o.paramType = paramType;
            o.regexes = regexes;
            return o;
        }
    }
}
