// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.clouddeploy.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRolloutResult {
    /**
     * @return User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return Approval state of the `Rollout`.
     * 
     */
    private String approvalState;
    /**
     * @return Time at which the `Rollout` was approved.
     * 
     */
    private String approveTime;
    /**
     * @return Time at which the `Rollout` was created.
     * 
     */
    private String createTime;
    /**
     * @return Time at which the `Rollout` finished deploying.
     * 
     */
    private String deployEndTime;
    /**
     * @return The reason this deploy failed. This will always be unspecified while the deploy in progress.
     * 
     */
    private String deployFailureCause;
    /**
     * @return Time at which the `Rollout` started deploying.
     * 
     */
    private String deployStartTime;
    /**
     * @return The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.
     * 
     */
    private String deployingBuild;
    /**
     * @return Description of the `Rollout` for user purposes. Max length is 255 characters.
     * 
     */
    private String description;
    /**
     * @return Time at which the `Rollout` was enqueued.
     * 
     */
    private String enqueueTime;
    /**
     * @return This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    private String etag;
    /**
     * @return Reason the build failed. Empty if the build succeeded.
     * 
     */
    private String failureReason;
    /**
     * @return Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Optional. Name of the `Rollout`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/{release}/rollouts/a-z{0,62}.
     * 
     */
    private String name;
    /**
     * @return Current state of the `Rollout`.
     * 
     */
    private String state;
    /**
     * @return The ID of Target to which this `Rollout` is deploying.
     * 
     */
    private String targetId;
    /**
     * @return Unique identifier of the `Rollout`.
     * 
     */
    private String uid;

    private GetRolloutResult() {}
    /**
     * @return User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return Approval state of the `Rollout`.
     * 
     */
    public String approvalState() {
        return this.approvalState;
    }
    /**
     * @return Time at which the `Rollout` was approved.
     * 
     */
    public String approveTime() {
        return this.approveTime;
    }
    /**
     * @return Time at which the `Rollout` was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Time at which the `Rollout` finished deploying.
     * 
     */
    public String deployEndTime() {
        return this.deployEndTime;
    }
    /**
     * @return The reason this deploy failed. This will always be unspecified while the deploy in progress.
     * 
     */
    public String deployFailureCause() {
        return this.deployFailureCause;
    }
    /**
     * @return Time at which the `Rollout` started deploying.
     * 
     */
    public String deployStartTime() {
        return this.deployStartTime;
    }
    /**
     * @return The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.
     * 
     */
    public String deployingBuild() {
        return this.deployingBuild;
    }
    /**
     * @return Description of the `Rollout` for user purposes. Max length is 255 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Time at which the `Rollout` was enqueued.
     * 
     */
    public String enqueueTime() {
        return this.enqueueTime;
    }
    /**
     * @return This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Reason the build failed. Empty if the build succeeded.
     * 
     */
    public String failureReason() {
        return this.failureReason;
    }
    /**
     * @return Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Optional. Name of the `Rollout`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/{release}/rollouts/a-z{0,62}.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Current state of the `Rollout`.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The ID of Target to which this `Rollout` is deploying.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return Unique identifier of the `Rollout`.
     * 
     */
    public String uid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRolloutResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String approvalState;
        private String approveTime;
        private String createTime;
        private String deployEndTime;
        private String deployFailureCause;
        private String deployStartTime;
        private String deployingBuild;
        private String description;
        private String enqueueTime;
        private String etag;
        private String failureReason;
        private Map<String,String> labels;
        private String name;
        private String state;
        private String targetId;
        private String uid;
        public Builder() {}
        public Builder(GetRolloutResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.approvalState = defaults.approvalState;
    	      this.approveTime = defaults.approveTime;
    	      this.createTime = defaults.createTime;
    	      this.deployEndTime = defaults.deployEndTime;
    	      this.deployFailureCause = defaults.deployFailureCause;
    	      this.deployStartTime = defaults.deployStartTime;
    	      this.deployingBuild = defaults.deployingBuild;
    	      this.description = defaults.description;
    	      this.enqueueTime = defaults.enqueueTime;
    	      this.etag = defaults.etag;
    	      this.failureReason = defaults.failureReason;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.targetId = defaults.targetId;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder approvalState(String approvalState) {
            this.approvalState = Objects.requireNonNull(approvalState);
            return this;
        }
        @CustomType.Setter
        public Builder approveTime(String approveTime) {
            this.approveTime = Objects.requireNonNull(approveTime);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder deployEndTime(String deployEndTime) {
            this.deployEndTime = Objects.requireNonNull(deployEndTime);
            return this;
        }
        @CustomType.Setter
        public Builder deployFailureCause(String deployFailureCause) {
            this.deployFailureCause = Objects.requireNonNull(deployFailureCause);
            return this;
        }
        @CustomType.Setter
        public Builder deployStartTime(String deployStartTime) {
            this.deployStartTime = Objects.requireNonNull(deployStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder deployingBuild(String deployingBuild) {
            this.deployingBuild = Objects.requireNonNull(deployingBuild);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder enqueueTime(String enqueueTime) {
            this.enqueueTime = Objects.requireNonNull(enqueueTime);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder failureReason(String failureReason) {
            this.failureReason = Objects.requireNonNull(failureReason);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        public GetRolloutResult build() {
            final var o = new GetRolloutResult();
            o.annotations = annotations;
            o.approvalState = approvalState;
            o.approveTime = approveTime;
            o.createTime = createTime;
            o.deployEndTime = deployEndTime;
            o.deployFailureCause = deployFailureCause;
            o.deployStartTime = deployStartTime;
            o.deployingBuild = deployingBuild;
            o.description = description;
            o.enqueueTime = enqueueTime;
            o.etag = etag;
            o.failureReason = failureReason;
            o.labels = labels;
            o.name = name;
            o.state = state;
            o.targetId = targetId;
            o.uid = uid;
            return o;
        }
    }
}
