// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetExportResult {
    /**
     * @return Time the export job was created.
     * 
     */
    private String created;
    /**
     * @return Name of the datastore that is the destination of the export job [datastore]
     * 
     */
    private String datastoreName;
    /**
     * @return Description of the export job.
     * 
     */
    private String description;
    /**
     * @return Error is set when export fails
     * 
     */
    private String error;
    /**
     * @return Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.
     * 
     */
    private String executionTime;
    /**
     * @return Display name of the export job.
     * 
     */
    private String name;
    /**
     * @return Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
     * 
     */
    private String self;
    /**
     * @return Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.
     * 
     */
    private String state;
    /**
     * @return Time the export job was last updated.
     * 
     */
    private String updated;

    private GetExportResult() {}
    /**
     * @return Time the export job was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Name of the datastore that is the destination of the export job [datastore]
     * 
     */
    public String datastoreName() {
        return this.datastoreName;
    }
    /**
     * @return Description of the export job.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Error is set when export fails
     * 
     */
    public String error() {
        return this.error;
    }
    /**
     * @return Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.
     * 
     */
    public String executionTime() {
        return this.executionTime;
    }
    /**
     * @return Display name of the export job.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
     * 
     */
    public String self() {
        return this.self;
    }
    /**
     * @return Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time the export job was last updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExportResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String created;
        private String datastoreName;
        private String description;
        private String error;
        private String executionTime;
        private String name;
        private String self;
        private String state;
        private String updated;
        public Builder() {}
        public Builder(GetExportResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.datastoreName = defaults.datastoreName;
    	      this.description = defaults.description;
    	      this.error = defaults.error;
    	      this.executionTime = defaults.executionTime;
    	      this.name = defaults.name;
    	      this.self = defaults.self;
    	      this.state = defaults.state;
    	      this.updated = defaults.updated;
        }

        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder datastoreName(String datastoreName) {
            this.datastoreName = Objects.requireNonNull(datastoreName);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder error(String error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        @CustomType.Setter
        public Builder executionTime(String executionTime) {
            this.executionTime = Objects.requireNonNull(executionTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder self(String self) {
            this.self = Objects.requireNonNull(self);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }
        public GetExportResult build() {
            final var o = new GetExportResult();
            o.created = created;
            o.datastoreName = datastoreName;
            o.description = description;
            o.error = error;
            o.executionTime = executionTime;
            o.name = name;
            o.self = self;
            o.state = state;
            o.updated = updated;
            return o;
        }
    }
}
