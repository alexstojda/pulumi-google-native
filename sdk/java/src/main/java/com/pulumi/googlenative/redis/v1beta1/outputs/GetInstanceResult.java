// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.redis.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.redis.v1beta1.outputs.MaintenancePolicyResponse;
import com.pulumi.googlenative.redis.v1beta1.outputs.MaintenanceScheduleResponse;
import com.pulumi.googlenative.redis.v1beta1.outputs.NodeInfoResponse;
import com.pulumi.googlenative.redis.v1beta1.outputs.PersistenceConfigResponse;
import com.pulumi.googlenative.redis.v1beta1.outputs.TlsCertificateResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return Optional. If specified, at least one node will be provisioned in this zone in addition to the zone specified in location_id. Only applicable to standard tier. If provided, it must be a different zone from the one provided in [location_id]. Additional nodes beyond the first 2 will be placed in zones selected by the service.
     * 
     */
    private String alternativeLocationId;
    /**
     * @return Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to &#34;true&#34; AUTH is enabled on the instance. Default value is &#34;false&#34; meaning AUTH is disabled.
     * 
     */
    private Boolean authEnabled;
    /**
     * @return Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.
     * 
     */
    private String authorizedNetwork;
    /**
     * @return Optional. The available maintenance versions that an instance could update to.
     * 
     */
    private List<String> availableMaintenanceVersions;
    /**
     * @return Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
     * 
     */
    private String connectMode;
    /**
     * @return The time the instance was created.
     * 
     */
    private String createTime;
    /**
     * @return The current zone where the Redis primary node is located. In basic tier, this will always be the same as [location_id]. In standard tier, this can be the zone of any node in the instance.
     * 
     */
    private String currentLocationId;
    /**
     * @return Optional. The KMS key reference that the customer provides when trying to create the instance.
     * 
     */
    private String customerManagedKey;
    /**
     * @return An arbitrary and optional user-provided name for the instance.
     * 
     */
    private String displayName;
    /**
     * @return Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
     * 
     */
    private String host;
    /**
     * @return Resource labels to represent user provided metadata
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone from the specified region for the instance. For standard tier, additional nodes will be added across multiple zones for protection against zonal failures. If specified, at least one node will be provisioned in this zone.
     * 
     */
    private String location;
    /**
     * @return Optional. The maintenance policy for the instance. If not provided, maintenance events can be performed at any time.
     * 
     */
    private MaintenancePolicyResponse maintenancePolicy;
    /**
     * @return Date and time of upcoming maintenance events which have been scheduled.
     * 
     */
    private MaintenanceScheduleResponse maintenanceSchedule;
    /**
     * @return Optional. The self service update maintenance version. The version is date based such as &#34;20210712_00_00&#34;.
     * 
     */
    private String maintenanceVersion;
    /**
     * @return Redis memory size in GiB.
     * 
     */
    private Integer memorySizeGb;
    /**
     * @return Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details.
     * 
     */
    private String name;
    /**
     * @return Info per node.
     * 
     */
    private List<NodeInfoResponse> nodes;
    /**
     * @return Optional. Persistence configuration parameters
     * 
     */
    private PersistenceConfigResponse persistenceConfig;
    /**
     * @return Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is &#34;serviceAccount:&#34;. The value may change over time for a given instance so should be checked before each import/export operation.
     * 
     */
    private String persistenceIamIdentity;
    /**
     * @return The port number of the exposed Redis endpoint.
     * 
     */
    private Integer port;
    /**
     * @return Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write requests must target &#39;host&#39;.
     * 
     */
    private String readEndpoint;
    /**
     * @return The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target &#39;port&#39;.
     * 
     */
    private Integer readEndpointPort;
    /**
     * @return Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED.
     * 
     */
    private String readReplicasMode;
    /**
     * @return Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries
     * 
     */
    private Map<String,String> redisConfigs;
    /**
     * @return Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility
     * 
     */
    private String redisVersion;
    /**
     * @return Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0.
     * 
     */
    private Integer replicaCount;
    /**
     * @return Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. For READ_REPLICAS_ENABLED the default block size is /28.
     * 
     */
    private String reservedIpRange;
    /**
     * @return Optional. Additional IP range for node placement. Required when enabling read replicas on an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or &#34;auto&#34;. For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address range associated with the private service access connection, or &#34;auto&#34;.
     * 
     */
    private String secondaryIpRange;
    /**
     * @return List of server CA certificates for the instance.
     * 
     */
    private List<TlsCertificateResponse> serverCaCerts;
    /**
     * @return The current state of this instance.
     * 
     */
    private String state;
    /**
     * @return Additional information about the current status of this instance, if available.
     * 
     */
    private String statusMessage;
    /**
     * @return Optional. reasons that causes instance in &#34;SUSPENDED&#34; state.
     * 
     */
    private List<String> suspensionReasons;
    /**
     * @return The service tier of the instance.
     * 
     */
    private String tier;
    /**
     * @return Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
     * 
     */
    private String transitEncryptionMode;

    private GetInstanceResult() {}
    /**
     * @return Optional. If specified, at least one node will be provisioned in this zone in addition to the zone specified in location_id. Only applicable to standard tier. If provided, it must be a different zone from the one provided in [location_id]. Additional nodes beyond the first 2 will be placed in zones selected by the service.
     * 
     */
    public String alternativeLocationId() {
        return this.alternativeLocationId;
    }
    /**
     * @return Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to &#34;true&#34; AUTH is enabled on the instance. Default value is &#34;false&#34; meaning AUTH is disabled.
     * 
     */
    public Boolean authEnabled() {
        return this.authEnabled;
    }
    /**
     * @return Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.
     * 
     */
    public String authorizedNetwork() {
        return this.authorizedNetwork;
    }
    /**
     * @return Optional. The available maintenance versions that an instance could update to.
     * 
     */
    public List<String> availableMaintenanceVersions() {
        return this.availableMaintenanceVersions;
    }
    /**
     * @return Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
     * 
     */
    public String connectMode() {
        return this.connectMode;
    }
    /**
     * @return The time the instance was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The current zone where the Redis primary node is located. In basic tier, this will always be the same as [location_id]. In standard tier, this can be the zone of any node in the instance.
     * 
     */
    public String currentLocationId() {
        return this.currentLocationId;
    }
    /**
     * @return Optional. The KMS key reference that the customer provides when trying to create the instance.
     * 
     */
    public String customerManagedKey() {
        return this.customerManagedKey;
    }
    /**
     * @return An arbitrary and optional user-provided name for the instance.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Resource labels to represent user provided metadata
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone from the specified region for the instance. For standard tier, additional nodes will be added across multiple zones for protection against zonal failures. If specified, at least one node will be provisioned in this zone.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Optional. The maintenance policy for the instance. If not provided, maintenance events can be performed at any time.
     * 
     */
    public MaintenancePolicyResponse maintenancePolicy() {
        return this.maintenancePolicy;
    }
    /**
     * @return Date and time of upcoming maintenance events which have been scheduled.
     * 
     */
    public MaintenanceScheduleResponse maintenanceSchedule() {
        return this.maintenanceSchedule;
    }
    /**
     * @return Optional. The self service update maintenance version. The version is date based such as &#34;20210712_00_00&#34;.
     * 
     */
    public String maintenanceVersion() {
        return this.maintenanceVersion;
    }
    /**
     * @return Redis memory size in GiB.
     * 
     */
    public Integer memorySizeGb() {
        return this.memorySizeGb;
    }
    /**
     * @return Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Info per node.
     * 
     */
    public List<NodeInfoResponse> nodes() {
        return this.nodes;
    }
    /**
     * @return Optional. Persistence configuration parameters
     * 
     */
    public PersistenceConfigResponse persistenceConfig() {
        return this.persistenceConfig;
    }
    /**
     * @return Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is &#34;serviceAccount:&#34;. The value may change over time for a given instance so should be checked before each import/export operation.
     * 
     */
    public String persistenceIamIdentity() {
        return this.persistenceIamIdentity;
    }
    /**
     * @return The port number of the exposed Redis endpoint.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write requests must target &#39;host&#39;.
     * 
     */
    public String readEndpoint() {
        return this.readEndpoint;
    }
    /**
     * @return The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target &#39;port&#39;.
     * 
     */
    public Integer readEndpointPort() {
        return this.readEndpointPort;
    }
    /**
     * @return Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED.
     * 
     */
    public String readReplicasMode() {
        return this.readReplicasMode;
    }
    /**
     * @return Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries
     * 
     */
    public Map<String,String> redisConfigs() {
        return this.redisConfigs;
    }
    /**
     * @return Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility
     * 
     */
    public String redisVersion() {
        return this.redisVersion;
    }
    /**
     * @return Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0.
     * 
     */
    public Integer replicaCount() {
        return this.replicaCount;
    }
    /**
     * @return Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. For READ_REPLICAS_ENABLED the default block size is /28.
     * 
     */
    public String reservedIpRange() {
        return this.reservedIpRange;
    }
    /**
     * @return Optional. Additional IP range for node placement. Required when enabling read replicas on an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or &#34;auto&#34;. For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address range associated with the private service access connection, or &#34;auto&#34;.
     * 
     */
    public String secondaryIpRange() {
        return this.secondaryIpRange;
    }
    /**
     * @return List of server CA certificates for the instance.
     * 
     */
    public List<TlsCertificateResponse> serverCaCerts() {
        return this.serverCaCerts;
    }
    /**
     * @return The current state of this instance.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Additional information about the current status of this instance, if available.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return Optional. reasons that causes instance in &#34;SUSPENDED&#34; state.
     * 
     */
    public List<String> suspensionReasons() {
        return this.suspensionReasons;
    }
    /**
     * @return The service tier of the instance.
     * 
     */
    public String tier() {
        return this.tier;
    }
    /**
     * @return Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
     * 
     */
    public String transitEncryptionMode() {
        return this.transitEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alternativeLocationId;
        private Boolean authEnabled;
        private String authorizedNetwork;
        private List<String> availableMaintenanceVersions;
        private String connectMode;
        private String createTime;
        private String currentLocationId;
        private String customerManagedKey;
        private String displayName;
        private String host;
        private Map<String,String> labels;
        private String location;
        private MaintenancePolicyResponse maintenancePolicy;
        private MaintenanceScheduleResponse maintenanceSchedule;
        private String maintenanceVersion;
        private Integer memorySizeGb;
        private String name;
        private List<NodeInfoResponse> nodes;
        private PersistenceConfigResponse persistenceConfig;
        private String persistenceIamIdentity;
        private Integer port;
        private String readEndpoint;
        private Integer readEndpointPort;
        private String readReplicasMode;
        private Map<String,String> redisConfigs;
        private String redisVersion;
        private Integer replicaCount;
        private String reservedIpRange;
        private String secondaryIpRange;
        private List<TlsCertificateResponse> serverCaCerts;
        private String state;
        private String statusMessage;
        private List<String> suspensionReasons;
        private String tier;
        private String transitEncryptionMode;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternativeLocationId = defaults.alternativeLocationId;
    	      this.authEnabled = defaults.authEnabled;
    	      this.authorizedNetwork = defaults.authorizedNetwork;
    	      this.availableMaintenanceVersions = defaults.availableMaintenanceVersions;
    	      this.connectMode = defaults.connectMode;
    	      this.createTime = defaults.createTime;
    	      this.currentLocationId = defaults.currentLocationId;
    	      this.customerManagedKey = defaults.customerManagedKey;
    	      this.displayName = defaults.displayName;
    	      this.host = defaults.host;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.maintenancePolicy = defaults.maintenancePolicy;
    	      this.maintenanceSchedule = defaults.maintenanceSchedule;
    	      this.maintenanceVersion = defaults.maintenanceVersion;
    	      this.memorySizeGb = defaults.memorySizeGb;
    	      this.name = defaults.name;
    	      this.nodes = defaults.nodes;
    	      this.persistenceConfig = defaults.persistenceConfig;
    	      this.persistenceIamIdentity = defaults.persistenceIamIdentity;
    	      this.port = defaults.port;
    	      this.readEndpoint = defaults.readEndpoint;
    	      this.readEndpointPort = defaults.readEndpointPort;
    	      this.readReplicasMode = defaults.readReplicasMode;
    	      this.redisConfigs = defaults.redisConfigs;
    	      this.redisVersion = defaults.redisVersion;
    	      this.replicaCount = defaults.replicaCount;
    	      this.reservedIpRange = defaults.reservedIpRange;
    	      this.secondaryIpRange = defaults.secondaryIpRange;
    	      this.serverCaCerts = defaults.serverCaCerts;
    	      this.state = defaults.state;
    	      this.statusMessage = defaults.statusMessage;
    	      this.suspensionReasons = defaults.suspensionReasons;
    	      this.tier = defaults.tier;
    	      this.transitEncryptionMode = defaults.transitEncryptionMode;
        }

        @CustomType.Setter
        public Builder alternativeLocationId(String alternativeLocationId) {
            this.alternativeLocationId = Objects.requireNonNull(alternativeLocationId);
            return this;
        }
        @CustomType.Setter
        public Builder authEnabled(Boolean authEnabled) {
            this.authEnabled = Objects.requireNonNull(authEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder authorizedNetwork(String authorizedNetwork) {
            this.authorizedNetwork = Objects.requireNonNull(authorizedNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder availableMaintenanceVersions(List<String> availableMaintenanceVersions) {
            this.availableMaintenanceVersions = Objects.requireNonNull(availableMaintenanceVersions);
            return this;
        }
        public Builder availableMaintenanceVersions(String... availableMaintenanceVersions) {
            return availableMaintenanceVersions(List.of(availableMaintenanceVersions));
        }
        @CustomType.Setter
        public Builder connectMode(String connectMode) {
            this.connectMode = Objects.requireNonNull(connectMode);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder currentLocationId(String currentLocationId) {
            this.currentLocationId = Objects.requireNonNull(currentLocationId);
            return this;
        }
        @CustomType.Setter
        public Builder customerManagedKey(String customerManagedKey) {
            this.customerManagedKey = Objects.requireNonNull(customerManagedKey);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maintenancePolicy(MaintenancePolicyResponse maintenancePolicy) {
            this.maintenancePolicy = Objects.requireNonNull(maintenancePolicy);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceSchedule(MaintenanceScheduleResponse maintenanceSchedule) {
            this.maintenanceSchedule = Objects.requireNonNull(maintenanceSchedule);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceVersion(String maintenanceVersion) {
            this.maintenanceVersion = Objects.requireNonNull(maintenanceVersion);
            return this;
        }
        @CustomType.Setter
        public Builder memorySizeGb(Integer memorySizeGb) {
            this.memorySizeGb = Objects.requireNonNull(memorySizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodes(List<NodeInfoResponse> nodes) {
            this.nodes = Objects.requireNonNull(nodes);
            return this;
        }
        public Builder nodes(NodeInfoResponse... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder persistenceConfig(PersistenceConfigResponse persistenceConfig) {
            this.persistenceConfig = Objects.requireNonNull(persistenceConfig);
            return this;
        }
        @CustomType.Setter
        public Builder persistenceIamIdentity(String persistenceIamIdentity) {
            this.persistenceIamIdentity = Objects.requireNonNull(persistenceIamIdentity);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder readEndpoint(String readEndpoint) {
            this.readEndpoint = Objects.requireNonNull(readEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder readEndpointPort(Integer readEndpointPort) {
            this.readEndpointPort = Objects.requireNonNull(readEndpointPort);
            return this;
        }
        @CustomType.Setter
        public Builder readReplicasMode(String readReplicasMode) {
            this.readReplicasMode = Objects.requireNonNull(readReplicasMode);
            return this;
        }
        @CustomType.Setter
        public Builder redisConfigs(Map<String,String> redisConfigs) {
            this.redisConfigs = Objects.requireNonNull(redisConfigs);
            return this;
        }
        @CustomType.Setter
        public Builder redisVersion(String redisVersion) {
            this.redisVersion = Objects.requireNonNull(redisVersion);
            return this;
        }
        @CustomType.Setter
        public Builder replicaCount(Integer replicaCount) {
            this.replicaCount = Objects.requireNonNull(replicaCount);
            return this;
        }
        @CustomType.Setter
        public Builder reservedIpRange(String reservedIpRange) {
            this.reservedIpRange = Objects.requireNonNull(reservedIpRange);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpRange(String secondaryIpRange) {
            this.secondaryIpRange = Objects.requireNonNull(secondaryIpRange);
            return this;
        }
        @CustomType.Setter
        public Builder serverCaCerts(List<TlsCertificateResponse> serverCaCerts) {
            this.serverCaCerts = Objects.requireNonNull(serverCaCerts);
            return this;
        }
        public Builder serverCaCerts(TlsCertificateResponse... serverCaCerts) {
            return serverCaCerts(List.of(serverCaCerts));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        @CustomType.Setter
        public Builder suspensionReasons(List<String> suspensionReasons) {
            this.suspensionReasons = Objects.requireNonNull(suspensionReasons);
            return this;
        }
        public Builder suspensionReasons(String... suspensionReasons) {
            return suspensionReasons(List.of(suspensionReasons));
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }
        @CustomType.Setter
        public Builder transitEncryptionMode(String transitEncryptionMode) {
            this.transitEncryptionMode = Objects.requireNonNull(transitEncryptionMode);
            return this;
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.alternativeLocationId = alternativeLocationId;
            o.authEnabled = authEnabled;
            o.authorizedNetwork = authorizedNetwork;
            o.availableMaintenanceVersions = availableMaintenanceVersions;
            o.connectMode = connectMode;
            o.createTime = createTime;
            o.currentLocationId = currentLocationId;
            o.customerManagedKey = customerManagedKey;
            o.displayName = displayName;
            o.host = host;
            o.labels = labels;
            o.location = location;
            o.maintenancePolicy = maintenancePolicy;
            o.maintenanceSchedule = maintenanceSchedule;
            o.maintenanceVersion = maintenanceVersion;
            o.memorySizeGb = memorySizeGb;
            o.name = name;
            o.nodes = nodes;
            o.persistenceConfig = persistenceConfig;
            o.persistenceIamIdentity = persistenceIamIdentity;
            o.port = port;
            o.readEndpoint = readEndpoint;
            o.readEndpointPort = readEndpointPort;
            o.readReplicasMode = readReplicasMode;
            o.redisConfigs = redisConfigs;
            o.redisVersion = redisVersion;
            o.replicaCount = replicaCount;
            o.reservedIpRange = reservedIpRange;
            o.secondaryIpRange = secondaryIpRange;
            o.serverCaCerts = serverCaCerts;
            o.state = state;
            o.statusMessage = statusMessage;
            o.suspensionReasons = suspensionReasons;
            o.tier = tier;
            o.transitEncryptionMode = transitEncryptionMode;
            return o;
        }
    }
}
