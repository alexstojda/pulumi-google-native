// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.servicemanagement.v1.outputs.CustomHttpPatternResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class HttpRuleResponse {
    /**
     * @return Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
     * 
     */
    private List<HttpRuleResponse> additionalBindings;
    /**
     * @return The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
     * 
     */
    private String body;
    /**
     * @return The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or &#34;*&#34; to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.
     * 
     */
    private CustomHttpPatternResponse custom;
    /**
     * @return Maps to HTTP DELETE. Used for deleting a resource.
     * 
     */
    private String delete;
    /**
     * @return Maps to HTTP GET. Used for listing and getting information about resources.
     * 
     */
    private String get;
    /**
     * @return Maps to HTTP PATCH. Used for updating a resource.
     * 
     */
    private String patch;
    /**
     * @return Maps to HTTP POST. Used for creating a resource or performing an action.
     * 
     */
    private String post;
    /**
     * @return Maps to HTTP PUT. Used for replacing a resource.
     * 
     */
    private String put;
    /**
     * @return Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
     * 
     */
    private String responseBody;
    /**
     * @return Selects a method to which this rule applies. Refer to selector for syntax details.
     * 
     */
    private String selector;

    private HttpRuleResponse() {}
    /**
     * @return Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
     * 
     */
    public List<HttpRuleResponse> additionalBindings() {
        return this.additionalBindings;
    }
    /**
     * @return The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or &#34;*&#34; to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.
     * 
     */
    public CustomHttpPatternResponse custom() {
        return this.custom;
    }
    /**
     * @return Maps to HTTP DELETE. Used for deleting a resource.
     * 
     */
    public String delete() {
        return this.delete;
    }
    /**
     * @return Maps to HTTP GET. Used for listing and getting information about resources.
     * 
     */
    public String get() {
        return this.get;
    }
    /**
     * @return Maps to HTTP PATCH. Used for updating a resource.
     * 
     */
    public String patch() {
        return this.patch;
    }
    /**
     * @return Maps to HTTP POST. Used for creating a resource or performing an action.
     * 
     */
    public String post() {
        return this.post;
    }
    /**
     * @return Maps to HTTP PUT. Used for replacing a resource.
     * 
     */
    public String put() {
        return this.put;
    }
    /**
     * @return Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
     * 
     */
    public String responseBody() {
        return this.responseBody;
    }
    /**
     * @return Selects a method to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public String selector() {
        return this.selector;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<HttpRuleResponse> additionalBindings;
        private String body;
        private CustomHttpPatternResponse custom;
        private String delete;
        private String get;
        private String patch;
        private String post;
        private String put;
        private String responseBody;
        private String selector;
        public Builder() {}
        public Builder(HttpRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalBindings = defaults.additionalBindings;
    	      this.body = defaults.body;
    	      this.custom = defaults.custom;
    	      this.delete = defaults.delete;
    	      this.get = defaults.get;
    	      this.patch = defaults.patch;
    	      this.post = defaults.post;
    	      this.put = defaults.put;
    	      this.responseBody = defaults.responseBody;
    	      this.selector = defaults.selector;
        }

        @CustomType.Setter
        public Builder additionalBindings(List<HttpRuleResponse> additionalBindings) {
            this.additionalBindings = Objects.requireNonNull(additionalBindings);
            return this;
        }
        public Builder additionalBindings(HttpRuleResponse... additionalBindings) {
            return additionalBindings(List.of(additionalBindings));
        }
        @CustomType.Setter
        public Builder body(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        @CustomType.Setter
        public Builder custom(CustomHttpPatternResponse custom) {
            this.custom = Objects.requireNonNull(custom);
            return this;
        }
        @CustomType.Setter
        public Builder delete(String delete) {
            this.delete = Objects.requireNonNull(delete);
            return this;
        }
        @CustomType.Setter
        public Builder get(String get) {
            this.get = Objects.requireNonNull(get);
            return this;
        }
        @CustomType.Setter
        public Builder patch(String patch) {
            this.patch = Objects.requireNonNull(patch);
            return this;
        }
        @CustomType.Setter
        public Builder post(String post) {
            this.post = Objects.requireNonNull(post);
            return this;
        }
        @CustomType.Setter
        public Builder put(String put) {
            this.put = Objects.requireNonNull(put);
            return this;
        }
        @CustomType.Setter
        public Builder responseBody(String responseBody) {
            this.responseBody = Objects.requireNonNull(responseBody);
            return this;
        }
        @CustomType.Setter
        public Builder selector(String selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }
        public HttpRuleResponse build() {
            final var o = new HttpRuleResponse();
            o.additionalBindings = additionalBindings;
            o.body = body;
            o.custom = custom;
            o.delete = delete;
            o.get = get;
            o.patch = patch;
            o.post = post;
            o.put = put;
            o.responseBody = responseBody;
            o.selector = selector;
            return o;
        }
    }
}
