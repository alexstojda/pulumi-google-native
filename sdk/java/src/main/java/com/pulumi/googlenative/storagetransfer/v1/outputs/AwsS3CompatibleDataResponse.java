// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.storagetransfer.v1.outputs.S3CompatibleMetadataResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class AwsS3CompatibleDataResponse {
    /**
     * @return Specifies the name of the bucket.
     * 
     */
    private String bucketName;
    /**
     * @return Specifies the endpoint of the storage service.
     * 
     */
    private String endpoint;
    /**
     * @return Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    private String path;
    /**
     * @return Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
     * 
     */
    private String region;
    /**
     * @return A S3 compatible metadata.
     * 
     */
    private S3CompatibleMetadataResponse s3Metadata;

    private AwsS3CompatibleDataResponse() {}
    /**
     * @return Specifies the name of the bucket.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return Specifies the endpoint of the storage service.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return A S3 compatible metadata.
     * 
     */
    public S3CompatibleMetadataResponse s3Metadata() {
        return this.s3Metadata;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwsS3CompatibleDataResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucketName;
        private String endpoint;
        private String path;
        private String region;
        private S3CompatibleMetadataResponse s3Metadata;
        public Builder() {}
        public Builder(AwsS3CompatibleDataResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.endpoint = defaults.endpoint;
    	      this.path = defaults.path;
    	      this.region = defaults.region;
    	      this.s3Metadata = defaults.s3Metadata;
        }

        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            this.bucketName = Objects.requireNonNull(bucketName);
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder s3Metadata(S3CompatibleMetadataResponse s3Metadata) {
            this.s3Metadata = Objects.requireNonNull(s3Metadata);
            return this;
        }
        public AwsS3CompatibleDataResponse build() {
            final var o = new AwsS3CompatibleDataResponse();
            o.bucketName = bucketName;
            o.endpoint = endpoint;
            o.path = path;
            o.region = region;
            o.s3Metadata = s3Metadata;
            return o;
        }
    }
}
