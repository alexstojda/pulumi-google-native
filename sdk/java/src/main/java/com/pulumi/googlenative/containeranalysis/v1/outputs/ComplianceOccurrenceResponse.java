// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1.outputs.NonCompliantFileResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ComplianceOccurrenceResponse {
    private String nonComplianceReason;
    private List<NonCompliantFileResponse> nonCompliantFiles;

    private ComplianceOccurrenceResponse() {}
    public String nonComplianceReason() {
        return this.nonComplianceReason;
    }
    public List<NonCompliantFileResponse> nonCompliantFiles() {
        return this.nonCompliantFiles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComplianceOccurrenceResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String nonComplianceReason;
        private List<NonCompliantFileResponse> nonCompliantFiles;
        public Builder() {}
        public Builder(ComplianceOccurrenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nonComplianceReason = defaults.nonComplianceReason;
    	      this.nonCompliantFiles = defaults.nonCompliantFiles;
        }

        @CustomType.Setter
        public Builder nonComplianceReason(String nonComplianceReason) {
            this.nonComplianceReason = Objects.requireNonNull(nonComplianceReason);
            return this;
        }
        @CustomType.Setter
        public Builder nonCompliantFiles(List<NonCompliantFileResponse> nonCompliantFiles) {
            this.nonCompliantFiles = Objects.requireNonNull(nonCompliantFiles);
            return this;
        }
        public Builder nonCompliantFiles(NonCompliantFileResponse... nonCompliantFiles) {
            return nonCompliantFiles(List.of(nonCompliantFiles));
        }
        public ComplianceOccurrenceResponse build() {
            final var o = new ComplianceOccurrenceResponse();
            o.nonComplianceReason = nonComplianceReason;
            o.nonCompliantFiles = nonCompliantFiles;
            return o;
        }
    }
}
