// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.bigquery.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class QueryTimelineSampleResponse {
    /**
     * @return Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
     * 
     */
    private String activeUnits;
    /**
     * @return Total parallel units of work completed by this query.
     * 
     */
    private String completedUnits;
    /**
     * @return Milliseconds elapsed since the start of query execution.
     * 
     */
    private String elapsedMs;
    /**
     * @return Units of work that can be scheduled immediately. Providing additional slots for these units of work will speed up the query, provided no other query in the reservation needs additional slots.
     * 
     */
    private String estimatedRunnableUnits;
    /**
     * @return Total parallel units of work remaining for the active stages.
     * 
     */
    private String pendingUnits;
    /**
     * @return Cumulative slot-ms consumed by the query.
     * 
     */
    private String totalSlotMs;

    private QueryTimelineSampleResponse() {}
    /**
     * @return Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
     * 
     */
    public String activeUnits() {
        return this.activeUnits;
    }
    /**
     * @return Total parallel units of work completed by this query.
     * 
     */
    public String completedUnits() {
        return this.completedUnits;
    }
    /**
     * @return Milliseconds elapsed since the start of query execution.
     * 
     */
    public String elapsedMs() {
        return this.elapsedMs;
    }
    /**
     * @return Units of work that can be scheduled immediately. Providing additional slots for these units of work will speed up the query, provided no other query in the reservation needs additional slots.
     * 
     */
    public String estimatedRunnableUnits() {
        return this.estimatedRunnableUnits;
    }
    /**
     * @return Total parallel units of work remaining for the active stages.
     * 
     */
    public String pendingUnits() {
        return this.pendingUnits;
    }
    /**
     * @return Cumulative slot-ms consumed by the query.
     * 
     */
    public String totalSlotMs() {
        return this.totalSlotMs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueryTimelineSampleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activeUnits;
        private String completedUnits;
        private String elapsedMs;
        private String estimatedRunnableUnits;
        private String pendingUnits;
        private String totalSlotMs;
        public Builder() {}
        public Builder(QueryTimelineSampleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeUnits = defaults.activeUnits;
    	      this.completedUnits = defaults.completedUnits;
    	      this.elapsedMs = defaults.elapsedMs;
    	      this.estimatedRunnableUnits = defaults.estimatedRunnableUnits;
    	      this.pendingUnits = defaults.pendingUnits;
    	      this.totalSlotMs = defaults.totalSlotMs;
        }

        @CustomType.Setter
        public Builder activeUnits(String activeUnits) {
            this.activeUnits = Objects.requireNonNull(activeUnits);
            return this;
        }
        @CustomType.Setter
        public Builder completedUnits(String completedUnits) {
            this.completedUnits = Objects.requireNonNull(completedUnits);
            return this;
        }
        @CustomType.Setter
        public Builder elapsedMs(String elapsedMs) {
            this.elapsedMs = Objects.requireNonNull(elapsedMs);
            return this;
        }
        @CustomType.Setter
        public Builder estimatedRunnableUnits(String estimatedRunnableUnits) {
            this.estimatedRunnableUnits = Objects.requireNonNull(estimatedRunnableUnits);
            return this;
        }
        @CustomType.Setter
        public Builder pendingUnits(String pendingUnits) {
            this.pendingUnits = Objects.requireNonNull(pendingUnits);
            return this;
        }
        @CustomType.Setter
        public Builder totalSlotMs(String totalSlotMs) {
            this.totalSlotMs = Objects.requireNonNull(totalSlotMs);
            return this;
        }
        public QueryTimelineSampleResponse build() {
            final var o = new QueryTimelineSampleResponse();
            o.activeUnits = activeUnits;
            o.completedUnits = completedUnits;
            o.elapsedMs = elapsedMs;
            o.estimatedRunnableUnits = estimatedRunnableUnits;
            o.pendingUnits = pendingUnits;
            o.totalSlotMs = totalSlotMs;
            return o;
        }
    }
}
