// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.KmsWrappedCryptoKeyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output. For example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`.
 * 
 */
public final class CryptoHashConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CryptoHashConfigArgs Empty = new CryptoHashConfigArgs();

    /**
     * An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
     * 
     */
    @Import(name="cryptoKey")
    private @Nullable Output<String> cryptoKey;

    /**
     * @return An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
     * 
     */
    public Optional<Output<String>> cryptoKey() {
        return Optional.ofNullable(this.cryptoKey);
    }

    /**
     * KMS wrapped key. Must not be set if `crypto_key` is set.
     * 
     */
    @Import(name="kmsWrapped")
    private @Nullable Output<KmsWrappedCryptoKeyArgs> kmsWrapped;

    /**
     * @return KMS wrapped key. Must not be set if `crypto_key` is set.
     * 
     */
    public Optional<Output<KmsWrappedCryptoKeyArgs>> kmsWrapped() {
        return Optional.ofNullable(this.kmsWrapped);
    }

    private CryptoHashConfigArgs() {}

    private CryptoHashConfigArgs(CryptoHashConfigArgs $) {
        this.cryptoKey = $.cryptoKey;
        this.kmsWrapped = $.kmsWrapped;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CryptoHashConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CryptoHashConfigArgs $;

        public Builder() {
            $ = new CryptoHashConfigArgs();
        }

        public Builder(CryptoHashConfigArgs defaults) {
            $ = new CryptoHashConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoKey An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(@Nullable Output<String> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        /**
         * @param kmsWrapped KMS wrapped key. Must not be set if `crypto_key` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsWrapped(@Nullable Output<KmsWrappedCryptoKeyArgs> kmsWrapped) {
            $.kmsWrapped = kmsWrapped;
            return this;
        }

        /**
         * @param kmsWrapped KMS wrapped key. Must not be set if `crypto_key` is set.
         * 
         * @return builder
         * 
         */
        public Builder kmsWrapped(KmsWrappedCryptoKeyArgs kmsWrapped) {
            return kmsWrapped(Output.of(kmsWrapped));
        }

        public CryptoHashConfigArgs build() {
            return $;
        }
    }

}
