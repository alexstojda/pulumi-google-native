// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.v1.outputs.AcceleratorConfigResponse;
import com.pulumi.googlenative.compute.v1.outputs.LocalDiskResponse;
import com.pulumi.googlenative.compute.v1.outputs.NodeTemplateNodeTypeFlexibilityResponse;
import com.pulumi.googlenative.compute.v1.outputs.ServerBindingResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodeTemplateResult {
    private List<AcceleratorConfigResponse> accelerators;
    /**
     * @return CPU overcommit.
     * 
     */
    private String cpuOvercommitType;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private String creationTimestamp;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private String description;
    private List<LocalDiskResponse> disks;
    /**
     * @return The type of the resource. Always compute#nodeTemplate for node templates.
     * 
     */
    private String kind;
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private String name;
    /**
     * @return Labels to use for node affinity, which will be used in instance scheduling.
     * 
     */
    private Map<String,String> nodeAffinityLabels;
    /**
     * @return The node type to use for nodes group that are created from this template.
     * 
     */
    private String nodeType;
    /**
     * @return The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. This field is mutually exclusive with the node_type property; you can only define one or the other, but not both.
     * 
     */
    private NodeTemplateNodeTypeFlexibilityResponse nodeTypeFlexibility;
    /**
     * @return The name of the region where the node template resides, such as us-central1.
     * 
     */
    private String region;
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    private String selfLink;
    /**
     * @return Sets the binding properties for the physical server. Valid values include: - *[Default]* RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server - RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible See Sole-tenant node options for more information.
     * 
     */
    private ServerBindingResponse serverBinding;
    /**
     * @return The status of the node template. One of the following values: CREATING, READY, and DELETING.
     * 
     */
    private String status;
    /**
     * @return An optional, human-readable explanation of the status.
     * 
     */
    private String statusMessage;

    private GetNodeTemplateResult() {}
    public List<AcceleratorConfigResponse> accelerators() {
        return this.accelerators;
    }
    /**
     * @return CPU overcommit.
     * 
     */
    public String cpuOvercommitType() {
        return this.cpuOvercommitType;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    public List<LocalDiskResponse> disks() {
        return this.disks;
    }
    /**
     * @return The type of the resource. Always compute#nodeTemplate for node templates.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Labels to use for node affinity, which will be used in instance scheduling.
     * 
     */
    public Map<String,String> nodeAffinityLabels() {
        return this.nodeAffinityLabels;
    }
    /**
     * @return The node type to use for nodes group that are created from this template.
     * 
     */
    public String nodeType() {
        return this.nodeType;
    }
    /**
     * @return The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. This field is mutually exclusive with the node_type property; you can only define one or the other, but not both.
     * 
     */
    public NodeTemplateNodeTypeFlexibilityResponse nodeTypeFlexibility() {
        return this.nodeTypeFlexibility;
    }
    /**
     * @return The name of the region where the node template resides, such as us-central1.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return Sets the binding properties for the physical server. Valid values include: - *[Default]* RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server - RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible See Sole-tenant node options for more information.
     * 
     */
    public ServerBindingResponse serverBinding() {
        return this.serverBinding;
    }
    /**
     * @return The status of the node template. One of the following values: CREATING, READY, and DELETING.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return An optional, human-readable explanation of the status.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<AcceleratorConfigResponse> accelerators;
        private String cpuOvercommitType;
        private String creationTimestamp;
        private String description;
        private List<LocalDiskResponse> disks;
        private String kind;
        private String name;
        private Map<String,String> nodeAffinityLabels;
        private String nodeType;
        private NodeTemplateNodeTypeFlexibilityResponse nodeTypeFlexibility;
        private String region;
        private String selfLink;
        private ServerBindingResponse serverBinding;
        private String status;
        private String statusMessage;
        public Builder() {}
        public Builder(GetNodeTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.cpuOvercommitType = defaults.cpuOvercommitType;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.disks = defaults.disks;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.nodeAffinityLabels = defaults.nodeAffinityLabels;
    	      this.nodeType = defaults.nodeType;
    	      this.nodeTypeFlexibility = defaults.nodeTypeFlexibility;
    	      this.region = defaults.region;
    	      this.selfLink = defaults.selfLink;
    	      this.serverBinding = defaults.serverBinding;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
        }

        @CustomType.Setter
        public Builder accelerators(List<AcceleratorConfigResponse> accelerators) {
            this.accelerators = Objects.requireNonNull(accelerators);
            return this;
        }
        public Builder accelerators(AcceleratorConfigResponse... accelerators) {
            return accelerators(List.of(accelerators));
        }
        @CustomType.Setter
        public Builder cpuOvercommitType(String cpuOvercommitType) {
            this.cpuOvercommitType = Objects.requireNonNull(cpuOvercommitType);
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder disks(List<LocalDiskResponse> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(LocalDiskResponse... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeAffinityLabels(Map<String,String> nodeAffinityLabels) {
            this.nodeAffinityLabels = Objects.requireNonNull(nodeAffinityLabels);
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(String nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }
        @CustomType.Setter
        public Builder nodeTypeFlexibility(NodeTemplateNodeTypeFlexibilityResponse nodeTypeFlexibility) {
            this.nodeTypeFlexibility = Objects.requireNonNull(nodeTypeFlexibility);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder serverBinding(ServerBindingResponse serverBinding) {
            this.serverBinding = Objects.requireNonNull(serverBinding);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            this.statusMessage = Objects.requireNonNull(statusMessage);
            return this;
        }
        public GetNodeTemplateResult build() {
            final var o = new GetNodeTemplateResult();
            o.accelerators = accelerators;
            o.cpuOvercommitType = cpuOvercommitType;
            o.creationTimestamp = creationTimestamp;
            o.description = description;
            o.disks = disks;
            o.kind = kind;
            o.name = name;
            o.nodeAffinityLabels = nodeAffinityLabels;
            o.nodeType = nodeType;
            o.nodeTypeFlexibility = nodeTypeFlexibility;
            o.region = region;
            o.selfLink = selfLink;
            o.serverBinding = serverBinding;
            o.status = status;
            o.statusMessage = statusMessage;
            return o;
        }
    }
}
