// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.servicemanagement.v1.outputs.FieldResponse;
import com.pulumi.googlenative.servicemanagement.v1.outputs.OptionResponse;
import com.pulumi.googlenative.servicemanagement.v1.outputs.SourceContextResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TypeResponse {
    /**
     * @return The list of fields.
     * 
     */
    private List<FieldResponse> fields;
    /**
     * @return The fully qualified message name.
     * 
     */
    private String name;
    /**
     * @return The list of types appearing in `oneof` definitions in this type.
     * 
     */
    private List<String> oneofs;
    /**
     * @return The protocol buffer options.
     * 
     */
    private List<OptionResponse> options;
    /**
     * @return The source context.
     * 
     */
    private SourceContextResponse sourceContext;
    /**
     * @return The source syntax.
     * 
     */
    private String syntax;

    private TypeResponse() {}
    /**
     * @return The list of fields.
     * 
     */
    public List<FieldResponse> fields() {
        return this.fields;
    }
    /**
     * @return The fully qualified message name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of types appearing in `oneof` definitions in this type.
     * 
     */
    public List<String> oneofs() {
        return this.oneofs;
    }
    /**
     * @return The protocol buffer options.
     * 
     */
    public List<OptionResponse> options() {
        return this.options;
    }
    /**
     * @return The source context.
     * 
     */
    public SourceContextResponse sourceContext() {
        return this.sourceContext;
    }
    /**
     * @return The source syntax.
     * 
     */
    public String syntax() {
        return this.syntax;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<FieldResponse> fields;
        private String name;
        private List<String> oneofs;
        private List<OptionResponse> options;
        private SourceContextResponse sourceContext;
        private String syntax;
        public Builder() {}
        public Builder(TypeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.oneofs = defaults.oneofs;
    	      this.options = defaults.options;
    	      this.sourceContext = defaults.sourceContext;
    	      this.syntax = defaults.syntax;
        }

        @CustomType.Setter
        public Builder fields(List<FieldResponse> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(FieldResponse... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder oneofs(List<String> oneofs) {
            this.oneofs = Objects.requireNonNull(oneofs);
            return this;
        }
        public Builder oneofs(String... oneofs) {
            return oneofs(List.of(oneofs));
        }
        @CustomType.Setter
        public Builder options(List<OptionResponse> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder sourceContext(SourceContextResponse sourceContext) {
            this.sourceContext = Objects.requireNonNull(sourceContext);
            return this;
        }
        @CustomType.Setter
        public Builder syntax(String syntax) {
            this.syntax = Objects.requireNonNull(syntax);
            return this;
        }
        public TypeResponse build() {
            final var o = new TypeResponse();
            o.fields = fields;
            o.name = name;
            o.oneofs = oneofs;
            o.options = options;
            o.sourceContext = sourceContext;
            o.syntax = syntax;
            return o;
        }
    }
}
