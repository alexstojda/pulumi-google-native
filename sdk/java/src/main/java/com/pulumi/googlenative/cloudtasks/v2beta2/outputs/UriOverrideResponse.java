// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudtasks.v2beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class UriOverrideResponse {
    /**
     * @return Host override. When specified, the host part of url will be overridden. For example, if the original Uri is &#34;https://www.google.com&#34;, and host is set to &#34;example.net&#34;, the overridden Uri will be &#34;https://example.net&#34;.
     * 
     */
    private String host;
    /**
     * @return Uri path. Will be used as the path for the current Uri (replaces any existing path of the task url).
     * 
     */
    private String path;
    /**
     * @return Port override. When specified, the port part of Uri will be replaced by the provided value. For instance, for a Uri http://www.google.com/foo and port=123 the overridden Uri becomes http://www.google.com:123/foo.
     * 
     */
    private String port;
    /**
     * @return Uri Query. Will replace the query part of the task uri.
     * 
     */
    private String query;
    /**
     * @return Scheme override. When specified, the Uri scheme is replaced by the provided value.
     * 
     */
    private String scheme;

    private UriOverrideResponse() {}
    /**
     * @return Host override. When specified, the host part of url will be overridden. For example, if the original Uri is &#34;https://www.google.com&#34;, and host is set to &#34;example.net&#34;, the overridden Uri will be &#34;https://example.net&#34;.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Uri path. Will be used as the path for the current Uri (replaces any existing path of the task url).
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Port override. When specified, the port part of Uri will be replaced by the provided value. For instance, for a Uri http://www.google.com/foo and port=123 the overridden Uri becomes http://www.google.com:123/foo.
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return Uri Query. Will replace the query part of the task uri.
     * 
     */
    public String query() {
        return this.query;
    }
    /**
     * @return Scheme override. When specified, the Uri scheme is replaced by the provided value.
     * 
     */
    public String scheme() {
        return this.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UriOverrideResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String host;
        private String path;
        private String port;
        private String query;
        private String scheme;
        public Builder() {}
        public Builder(UriOverrideResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.query = defaults.query;
    	      this.scheme = defaults.scheme;
        }

        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        @CustomType.Setter
        public Builder scheme(String scheme) {
            this.scheme = Objects.requireNonNull(scheme);
            return this;
        }
        public UriOverrideResponse build() {
            final var o = new UriOverrideResponse();
            o.host = host;
            o.path = path;
            o.port = port;
            o.query = query;
            o.scheme = scheme;
            return o;
        }
    }
}
