// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2FileSetResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GooglePrivacyDlpV2CloudStorageOptionsResponse {
    /**
     * @return Max number of bytes to scan from a file. If a scanned file&#39;s size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     * 
     */
    private String bytesLimitPerFile;
    /**
     * @return Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     * 
     */
    private Integer bytesLimitPerFilePercent;
    /**
     * @return The set of one or more files to scan.
     * 
     */
    private GooglePrivacyDlpV2FileSetResponse fileSet;
    /**
     * @return List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to &#39;global&#39;, &#39;us&#39;, &#39;asia&#39;, and &#39;europe&#39;.
     * 
     */
    private List<String> fileTypes;
    /**
     * @return Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
     * 
     */
    private Integer filesLimitPercent;
    private String sampleMethod;

    private GooglePrivacyDlpV2CloudStorageOptionsResponse() {}
    /**
     * @return Max number of bytes to scan from a file. If a scanned file&#39;s size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     * 
     */
    public String bytesLimitPerFile() {
        return this.bytesLimitPerFile;
    }
    /**
     * @return Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     * 
     */
    public Integer bytesLimitPerFilePercent() {
        return this.bytesLimitPerFilePercent;
    }
    /**
     * @return The set of one or more files to scan.
     * 
     */
    public GooglePrivacyDlpV2FileSetResponse fileSet() {
        return this.fileSet;
    }
    /**
     * @return List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to &#39;global&#39;, &#39;us&#39;, &#39;asia&#39;, and &#39;europe&#39;.
     * 
     */
    public List<String> fileTypes() {
        return this.fileTypes;
    }
    /**
     * @return Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
     * 
     */
    public Integer filesLimitPercent() {
        return this.filesLimitPercent;
    }
    public String sampleMethod() {
        return this.sampleMethod;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2CloudStorageOptionsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bytesLimitPerFile;
        private Integer bytesLimitPerFilePercent;
        private GooglePrivacyDlpV2FileSetResponse fileSet;
        private List<String> fileTypes;
        private Integer filesLimitPercent;
        private String sampleMethod;
        public Builder() {}
        public Builder(GooglePrivacyDlpV2CloudStorageOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bytesLimitPerFile = defaults.bytesLimitPerFile;
    	      this.bytesLimitPerFilePercent = defaults.bytesLimitPerFilePercent;
    	      this.fileSet = defaults.fileSet;
    	      this.fileTypes = defaults.fileTypes;
    	      this.filesLimitPercent = defaults.filesLimitPercent;
    	      this.sampleMethod = defaults.sampleMethod;
        }

        @CustomType.Setter
        public Builder bytesLimitPerFile(String bytesLimitPerFile) {
            this.bytesLimitPerFile = Objects.requireNonNull(bytesLimitPerFile);
            return this;
        }
        @CustomType.Setter
        public Builder bytesLimitPerFilePercent(Integer bytesLimitPerFilePercent) {
            this.bytesLimitPerFilePercent = Objects.requireNonNull(bytesLimitPerFilePercent);
            return this;
        }
        @CustomType.Setter
        public Builder fileSet(GooglePrivacyDlpV2FileSetResponse fileSet) {
            this.fileSet = Objects.requireNonNull(fileSet);
            return this;
        }
        @CustomType.Setter
        public Builder fileTypes(List<String> fileTypes) {
            this.fileTypes = Objects.requireNonNull(fileTypes);
            return this;
        }
        public Builder fileTypes(String... fileTypes) {
            return fileTypes(List.of(fileTypes));
        }
        @CustomType.Setter
        public Builder filesLimitPercent(Integer filesLimitPercent) {
            this.filesLimitPercent = Objects.requireNonNull(filesLimitPercent);
            return this;
        }
        @CustomType.Setter
        public Builder sampleMethod(String sampleMethod) {
            this.sampleMethod = Objects.requireNonNull(sampleMethod);
            return this;
        }
        public GooglePrivacyDlpV2CloudStorageOptionsResponse build() {
            final var o = new GooglePrivacyDlpV2CloudStorageOptionsResponse();
            o.bytesLimitPerFile = bytesLimitPerFile;
            o.bytesLimitPerFilePercent = bytesLimitPerFilePercent;
            o.fileSet = fileSet;
            o.fileTypes = fileTypes;
            o.filesLimitPercent = filesLimitPercent;
            o.sampleMethod = sampleMethod;
            return o;
        }
    }
}
