// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.securitycenter.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.securitycenter.v1.outputs.StreamingConfigResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNotificationConfigResult {
    /**
     * @return The description of the notification config (max of 1024 characters).
     * 
     */
    private String description;
    /**
     * @return The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: &#34;organizations/{organization_id}/notificationConfigs/notify_public_bucket&#34;.
     * 
     */
    private String name;
    /**
     * @return The Pub/Sub topic to send notifications to. Its format is &#34;projects/[project_id]/topics/[topic]&#34;.
     * 
     */
    private String pubsubTopic;
    /**
     * @return The service account that needs &#34;pubsub.topics.publish&#34; permission to publish to the Pub/Sub topic.
     * 
     */
    private String serviceAccount;
    /**
     * @return The config for triggering streaming-based notifications.
     * 
     */
    private StreamingConfigResponse streamingConfig;

    private GetNotificationConfigResult() {}
    /**
     * @return The description of the notification config (max of 1024 characters).
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: &#34;organizations/{organization_id}/notificationConfigs/notify_public_bucket&#34;.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Pub/Sub topic to send notifications to. Its format is &#34;projects/[project_id]/topics/[topic]&#34;.
     * 
     */
    public String pubsubTopic() {
        return this.pubsubTopic;
    }
    /**
     * @return The service account that needs &#34;pubsub.topics.publish&#34; permission to publish to the Pub/Sub topic.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The config for triggering streaming-based notifications.
     * 
     */
    public StreamingConfigResponse streamingConfig() {
        return this.streamingConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNotificationConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String name;
        private String pubsubTopic;
        private String serviceAccount;
        private StreamingConfigResponse streamingConfig;
        public Builder() {}
        public Builder(GetNotificationConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.pubsubTopic = defaults.pubsubTopic;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.streamingConfig = defaults.streamingConfig;
        }

        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder pubsubTopic(String pubsubTopic) {
            this.pubsubTopic = Objects.requireNonNull(pubsubTopic);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder streamingConfig(StreamingConfigResponse streamingConfig) {
            this.streamingConfig = Objects.requireNonNull(streamingConfig);
            return this;
        }
        public GetNotificationConfigResult build() {
            final var o = new GetNotificationConfigResult();
            o.description = description;
            o.name = name;
            o.pubsubTopic = pubsubTopic;
            o.serviceAccount = serviceAccount;
            o.streamingConfig = streamingConfig;
            return o;
        }
    }
}
