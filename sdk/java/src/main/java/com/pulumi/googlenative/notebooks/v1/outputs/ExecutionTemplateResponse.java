// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.notebooks.v1.outputs.DataprocParametersResponse;
import com.pulumi.googlenative.notebooks.v1.outputs.SchedulerAcceleratorConfigResponse;
import com.pulumi.googlenative.notebooks.v1.outputs.VertexAIParametersResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class ExecutionTemplateResponse {
    /**
     * @return Configuration (count and accelerator type) for hardware running notebook execution.
     * 
     */
    private SchedulerAcceleratorConfigResponse acceleratorConfig;
    /**
     * @return Container Image URI to a DLVM Example: &#39;gcr.io/deeplearning-platform-release/base-cu100&#39; More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
     * 
     */
    private String containerImageUri;
    /**
     * @return Parameters used in Dataproc JobType executions.
     * 
     */
    private DataprocParametersResponse dataprocParameters;
    /**
     * @return Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
     * 
     */
    private String inputNotebookFile;
    /**
     * @return The type of Job to be used on this execution.
     * 
     */
    private String jobType;
    /**
     * @return Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
     * 
     */
    private String kernelSpec;
    /**
     * @return Labels for execution. If execution is scheduled, a field included will be &#39;nbs-scheduled&#39;. Otherwise, it is an immediate execution, and an included field will be &#39;nbs-immediate&#39;. Use fields to efficiently index between various types of executions.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Specifies the type of virtual machine to use for your training job&#39;s master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
     * 
     */
    private String masterType;
    /**
     * @return Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
     * 
     */
    private String outputNotebookFolder;
    /**
     * @return Parameters used within the &#39;input_notebook_file&#39; notebook.
     * 
     */
    private String parameters;
    /**
     * @return Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
     * 
     */
    private String paramsYamlFile;
    /**
     * @return Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
     * 
     * @deprecated
     * Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
     * 
     */
    @Deprecated /* Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported. */
    private String scaleTier;
    /**
     * @return The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
     * 
     */
    private String serviceAccount;
    /**
     * @return The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
     * 
     */
    private String tensorboard;
    /**
     * @return Parameters used in Vertex AI JobType executions.
     * 
     */
    private VertexAIParametersResponse vertexAiParameters;

    private ExecutionTemplateResponse() {}
    /**
     * @return Configuration (count and accelerator type) for hardware running notebook execution.
     * 
     */
    public SchedulerAcceleratorConfigResponse acceleratorConfig() {
        return this.acceleratorConfig;
    }
    /**
     * @return Container Image URI to a DLVM Example: &#39;gcr.io/deeplearning-platform-release/base-cu100&#39; More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
     * 
     */
    public String containerImageUri() {
        return this.containerImageUri;
    }
    /**
     * @return Parameters used in Dataproc JobType executions.
     * 
     */
    public DataprocParametersResponse dataprocParameters() {
        return this.dataprocParameters;
    }
    /**
     * @return Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
     * 
     */
    public String inputNotebookFile() {
        return this.inputNotebookFile;
    }
    /**
     * @return The type of Job to be used on this execution.
     * 
     */
    public String jobType() {
        return this.jobType;
    }
    /**
     * @return Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
     * 
     */
    public String kernelSpec() {
        return this.kernelSpec;
    }
    /**
     * @return Labels for execution. If execution is scheduled, a field included will be &#39;nbs-scheduled&#39;. Otherwise, it is an immediate execution, and an included field will be &#39;nbs-immediate&#39;. Use fields to efficiently index between various types of executions.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Specifies the type of virtual machine to use for your training job&#39;s master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
     * 
     */
    public String masterType() {
        return this.masterType;
    }
    /**
     * @return Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
     * 
     */
    public String outputNotebookFolder() {
        return this.outputNotebookFolder;
    }
    /**
     * @return Parameters used within the &#39;input_notebook_file&#39; notebook.
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
     * 
     */
    public String paramsYamlFile() {
        return this.paramsYamlFile;
    }
    /**
     * @return Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
     * 
     * @deprecated
     * Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
     * 
     */
    @Deprecated /* Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported. */
    public String scaleTier() {
        return this.scaleTier;
    }
    /**
     * @return The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
     * 
     */
    public String tensorboard() {
        return this.tensorboard;
    }
    /**
     * @return Parameters used in Vertex AI JobType executions.
     * 
     */
    public VertexAIParametersResponse vertexAiParameters() {
        return this.vertexAiParameters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionTemplateResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private SchedulerAcceleratorConfigResponse acceleratorConfig;
        private String containerImageUri;
        private DataprocParametersResponse dataprocParameters;
        private String inputNotebookFile;
        private String jobType;
        private String kernelSpec;
        private Map<String,String> labels;
        private String masterType;
        private String outputNotebookFolder;
        private String parameters;
        private String paramsYamlFile;
        private String scaleTier;
        private String serviceAccount;
        private String tensorboard;
        private VertexAIParametersResponse vertexAiParameters;
        public Builder() {}
        public Builder(ExecutionTemplateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorConfig = defaults.acceleratorConfig;
    	      this.containerImageUri = defaults.containerImageUri;
    	      this.dataprocParameters = defaults.dataprocParameters;
    	      this.inputNotebookFile = defaults.inputNotebookFile;
    	      this.jobType = defaults.jobType;
    	      this.kernelSpec = defaults.kernelSpec;
    	      this.labels = defaults.labels;
    	      this.masterType = defaults.masterType;
    	      this.outputNotebookFolder = defaults.outputNotebookFolder;
    	      this.parameters = defaults.parameters;
    	      this.paramsYamlFile = defaults.paramsYamlFile;
    	      this.scaleTier = defaults.scaleTier;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.tensorboard = defaults.tensorboard;
    	      this.vertexAiParameters = defaults.vertexAiParameters;
        }

        @CustomType.Setter
        public Builder acceleratorConfig(SchedulerAcceleratorConfigResponse acceleratorConfig) {
            this.acceleratorConfig = Objects.requireNonNull(acceleratorConfig);
            return this;
        }
        @CustomType.Setter
        public Builder containerImageUri(String containerImageUri) {
            this.containerImageUri = Objects.requireNonNull(containerImageUri);
            return this;
        }
        @CustomType.Setter
        public Builder dataprocParameters(DataprocParametersResponse dataprocParameters) {
            this.dataprocParameters = Objects.requireNonNull(dataprocParameters);
            return this;
        }
        @CustomType.Setter
        public Builder inputNotebookFile(String inputNotebookFile) {
            this.inputNotebookFile = Objects.requireNonNull(inputNotebookFile);
            return this;
        }
        @CustomType.Setter
        public Builder jobType(String jobType) {
            this.jobType = Objects.requireNonNull(jobType);
            return this;
        }
        @CustomType.Setter
        public Builder kernelSpec(String kernelSpec) {
            this.kernelSpec = Objects.requireNonNull(kernelSpec);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder masterType(String masterType) {
            this.masterType = Objects.requireNonNull(masterType);
            return this;
        }
        @CustomType.Setter
        public Builder outputNotebookFolder(String outputNotebookFolder) {
            this.outputNotebookFolder = Objects.requireNonNull(outputNotebookFolder);
            return this;
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        @CustomType.Setter
        public Builder paramsYamlFile(String paramsYamlFile) {
            this.paramsYamlFile = Objects.requireNonNull(paramsYamlFile);
            return this;
        }
        @CustomType.Setter
        public Builder scaleTier(String scaleTier) {
            this.scaleTier = Objects.requireNonNull(scaleTier);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder tensorboard(String tensorboard) {
            this.tensorboard = Objects.requireNonNull(tensorboard);
            return this;
        }
        @CustomType.Setter
        public Builder vertexAiParameters(VertexAIParametersResponse vertexAiParameters) {
            this.vertexAiParameters = Objects.requireNonNull(vertexAiParameters);
            return this;
        }
        public ExecutionTemplateResponse build() {
            final var o = new ExecutionTemplateResponse();
            o.acceleratorConfig = acceleratorConfig;
            o.containerImageUri = containerImageUri;
            o.dataprocParameters = dataprocParameters;
            o.inputNotebookFile = inputNotebookFile;
            o.jobType = jobType;
            o.kernelSpec = kernelSpec;
            o.labels = labels;
            o.masterType = masterType;
            o.outputNotebookFolder = outputNotebookFolder;
            o.parameters = parameters;
            o.paramsYamlFile = paramsYamlFile;
            o.scaleTier = scaleTier;
            o.serviceAccount = serviceAccount;
            o.tensorboard = tensorboard;
            o.vertexAiParameters = vertexAiParameters;
            return o;
        }
    }
}
