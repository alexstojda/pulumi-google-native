// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.datamigration.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.datamigration.v1beta1.outputs.SqlIpConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class CloudSqlSettingsResponse {
    /**
     * @return The activation policy specifies when the instance is activated; it is applicable only when the instance state is &#39;RUNNABLE&#39;. Valid values: &#39;ALWAYS&#39;: The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
     * 
     */
    private String activationPolicy;
    /**
     * @return [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
     * 
     */
    private Boolean autoStorageIncrease;
    /**
     * @return The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
     * 
     */
    private String dataDiskSizeGb;
    /**
     * @return The type of storage: `PD_SSD` (default) or `PD_HDD`.
     * 
     */
    private String dataDiskType;
    /**
     * @return The database flags passed to the Cloud SQL instance at startup. An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    private Map<String,String> databaseFlags;
    /**
     * @return The database engine type and version.
     * 
     */
    private String databaseVersion;
    /**
     * @return The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
     * 
     */
    private SqlIpConfigResponse ipConfig;
    /**
     * @return Input only. Initial root password.
     * 
     */
    private String rootPassword;
    /**
     * @return Indicates If this connection profile root password is stored.
     * 
     */
    private Boolean rootPasswordSet;
    /**
     * @return The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
     * 
     */
    private String sourceId;
    /**
     * @return The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    private String storageAutoResizeLimit;
    /**
     * @return The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
     * 
     */
    private String tier;
    /**
     * @return The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of &#34;key&#34;: &#34;value&#34; pairs. Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;18kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
     * 
     */
    private Map<String,String> userLabels;
    /**
     * @return The Google Cloud Platform zone where your Cloud SQL datdabse instance is located.
     * 
     */
    private String zone;

    private CloudSqlSettingsResponse() {}
    /**
     * @return The activation policy specifies when the instance is activated; it is applicable only when the instance state is &#39;RUNNABLE&#39;. Valid values: &#39;ALWAYS&#39;: The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
     * 
     */
    public String activationPolicy() {
        return this.activationPolicy;
    }
    /**
     * @return [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
     * 
     */
    public Boolean autoStorageIncrease() {
        return this.autoStorageIncrease;
    }
    /**
     * @return The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
     * 
     */
    public String dataDiskSizeGb() {
        return this.dataDiskSizeGb;
    }
    /**
     * @return The type of storage: `PD_SSD` (default) or `PD_HDD`.
     * 
     */
    public String dataDiskType() {
        return this.dataDiskType;
    }
    /**
     * @return The database flags passed to the Cloud SQL instance at startup. An object containing a list of &#34;key&#34;: value pairs. Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Map<String,String> databaseFlags() {
        return this.databaseFlags;
    }
    /**
     * @return The database engine type and version.
     * 
     */
    public String databaseVersion() {
        return this.databaseVersion;
    }
    /**
     * @return The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.
     * 
     */
    public SqlIpConfigResponse ipConfig() {
        return this.ipConfig;
    }
    /**
     * @return Input only. Initial root password.
     * 
     */
    public String rootPassword() {
        return this.rootPassword;
    }
    /**
     * @return Indicates If this connection profile root password is stored.
     * 
     */
    public Boolean rootPasswordSet() {
        return this.rootPasswordSet;
    }
    /**
     * @return The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
     * 
     */
    public String sourceId() {
        return this.sourceId;
    }
    /**
     * @return The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     * 
     */
    public String storageAutoResizeLimit() {
        return this.storageAutoResizeLimit;
    }
    /**
     * @return The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
     * 
     */
    public String tier() {
        return this.tier;
    }
    /**
     * @return The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of &#34;key&#34;: &#34;value&#34; pairs. Example: `{ &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;18kg&#34;, &#34;count&#34;: &#34;3&#34; }`.
     * 
     */
    public Map<String,String> userLabels() {
        return this.userLabels;
    }
    /**
     * @return The Google Cloud Platform zone where your Cloud SQL datdabse instance is located.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudSqlSettingsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activationPolicy;
        private Boolean autoStorageIncrease;
        private String dataDiskSizeGb;
        private String dataDiskType;
        private Map<String,String> databaseFlags;
        private String databaseVersion;
        private SqlIpConfigResponse ipConfig;
        private String rootPassword;
        private Boolean rootPasswordSet;
        private String sourceId;
        private String storageAutoResizeLimit;
        private String tier;
        private Map<String,String> userLabels;
        private String zone;
        public Builder() {}
        public Builder(CloudSqlSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.autoStorageIncrease = defaults.autoStorageIncrease;
    	      this.dataDiskSizeGb = defaults.dataDiskSizeGb;
    	      this.dataDiskType = defaults.dataDiskType;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.ipConfig = defaults.ipConfig;
    	      this.rootPassword = defaults.rootPassword;
    	      this.rootPasswordSet = defaults.rootPasswordSet;
    	      this.sourceId = defaults.sourceId;
    	      this.storageAutoResizeLimit = defaults.storageAutoResizeLimit;
    	      this.tier = defaults.tier;
    	      this.userLabels = defaults.userLabels;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder activationPolicy(String activationPolicy) {
            this.activationPolicy = Objects.requireNonNull(activationPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder autoStorageIncrease(Boolean autoStorageIncrease) {
            this.autoStorageIncrease = Objects.requireNonNull(autoStorageIncrease);
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskSizeGb(String dataDiskSizeGb) {
            this.dataDiskSizeGb = Objects.requireNonNull(dataDiskSizeGb);
            return this;
        }
        @CustomType.Setter
        public Builder dataDiskType(String dataDiskType) {
            this.dataDiskType = Objects.requireNonNull(dataDiskType);
            return this;
        }
        @CustomType.Setter
        public Builder databaseFlags(Map<String,String> databaseFlags) {
            this.databaseFlags = Objects.requireNonNull(databaseFlags);
            return this;
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            this.databaseVersion = Objects.requireNonNull(databaseVersion);
            return this;
        }
        @CustomType.Setter
        public Builder ipConfig(SqlIpConfigResponse ipConfig) {
            this.ipConfig = Objects.requireNonNull(ipConfig);
            return this;
        }
        @CustomType.Setter
        public Builder rootPassword(String rootPassword) {
            this.rootPassword = Objects.requireNonNull(rootPassword);
            return this;
        }
        @CustomType.Setter
        public Builder rootPasswordSet(Boolean rootPasswordSet) {
            this.rootPasswordSet = Objects.requireNonNull(rootPasswordSet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceId(String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId);
            return this;
        }
        @CustomType.Setter
        public Builder storageAutoResizeLimit(String storageAutoResizeLimit) {
            this.storageAutoResizeLimit = Objects.requireNonNull(storageAutoResizeLimit);
            return this;
        }
        @CustomType.Setter
        public Builder tier(String tier) {
            this.tier = Objects.requireNonNull(tier);
            return this;
        }
        @CustomType.Setter
        public Builder userLabels(Map<String,String> userLabels) {
            this.userLabels = Objects.requireNonNull(userLabels);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public CloudSqlSettingsResponse build() {
            final var o = new CloudSqlSettingsResponse();
            o.activationPolicy = activationPolicy;
            o.autoStorageIncrease = autoStorageIncrease;
            o.dataDiskSizeGb = dataDiskSizeGb;
            o.dataDiskType = dataDiskType;
            o.databaseFlags = databaseFlags;
            o.databaseVersion = databaseVersion;
            o.ipConfig = ipConfig;
            o.rootPassword = rootPassword;
            o.rootPasswordSet = rootPasswordSet;
            o.sourceId = sourceId;
            o.storageAutoResizeLimit = storageAutoResizeLimit;
            o.tier = tier;
            o.userLabels = userLabels;
            o.zone = zone;
            return o;
        }
    }
}
