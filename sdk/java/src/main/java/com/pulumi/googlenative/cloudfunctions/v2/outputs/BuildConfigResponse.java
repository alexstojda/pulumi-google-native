// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudfunctions.v2.outputs.SourceProvenanceResponse;
import com.pulumi.googlenative.cloudfunctions.v2.outputs.SourceResponse;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class BuildConfigResponse {
    /**
     * @return The Cloud Build name of the latest successful deployment of the function.
     * 
     */
    private String build;
    /**
     * @return Optional. User managed repository created in Artifact Registry optionally with a customer managed encryption key. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, GCF will create and use a repository named &#39;gcf-artifacts&#39; for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be &#39;DOCKER&#39;.
     * 
     */
    private String dockerRepository;
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;. For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    private String entryPoint;
    /**
     * @return User-provided build-time environment variables for the function
     * 
     */
    private Map<String,String> environmentVariables;
    /**
     * @return The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    private String runtime;
    /**
     * @return The location of the function source code.
     * 
     */
    private SourceResponse source;
    /**
     * @return A permanent fixed identifier for source.
     * 
     */
    private SourceProvenanceResponse sourceProvenance;
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.
     * 
     */
    private String workerPool;

    private BuildConfigResponse() {}
    /**
     * @return The Cloud Build name of the latest successful deployment of the function.
     * 
     */
    public String build() {
        return this.build;
    }
    /**
     * @return Optional. User managed repository created in Artifact Registry optionally with a customer managed encryption key. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, GCF will create and use a repository named &#39;gcf-artifacts&#39; for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be &#39;DOCKER&#39;.
     * 
     */
    public String dockerRepository() {
        return this.dockerRepository;
    }
    /**
     * @return The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named &#34;function&#34;. For Node.js this is name of a function exported by the module specified in `source_location`.
     * 
     */
    public String entryPoint() {
        return this.entryPoint;
    }
    /**
     * @return User-provided build-time environment variables for the function
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
     * 
     */
    public String runtime() {
        return this.runtime;
    }
    /**
     * @return The location of the function source code.
     * 
     */
    public SourceResponse source() {
        return this.source;
    }
    /**
     * @return A permanent fixed identifier for source.
     * 
     */
    public SourceProvenanceResponse sourceProvenance() {
        return this.sourceProvenance;
    }
    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.
     * 
     */
    public String workerPool() {
        return this.workerPool;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String build;
        private String dockerRepository;
        private String entryPoint;
        private Map<String,String> environmentVariables;
        private String runtime;
        private SourceResponse source;
        private SourceProvenanceResponse sourceProvenance;
        private String workerPool;
        public Builder() {}
        public Builder(BuildConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.build = defaults.build;
    	      this.dockerRepository = defaults.dockerRepository;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.runtime = defaults.runtime;
    	      this.source = defaults.source;
    	      this.sourceProvenance = defaults.sourceProvenance;
    	      this.workerPool = defaults.workerPool;
        }

        @CustomType.Setter
        public Builder build(String build) {
            this.build = Objects.requireNonNull(build);
            return this;
        }
        @CustomType.Setter
        public Builder dockerRepository(String dockerRepository) {
            this.dockerRepository = Objects.requireNonNull(dockerRepository);
            return this;
        }
        @CustomType.Setter
        public Builder entryPoint(String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint);
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }
        @CustomType.Setter
        public Builder runtime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }
        @CustomType.Setter
        public Builder source(SourceResponse source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder sourceProvenance(SourceProvenanceResponse sourceProvenance) {
            this.sourceProvenance = Objects.requireNonNull(sourceProvenance);
            return this;
        }
        @CustomType.Setter
        public Builder workerPool(String workerPool) {
            this.workerPool = Objects.requireNonNull(workerPool);
            return this;
        }
        public BuildConfigResponse build() {
            final var o = new BuildConfigResponse();
            o.build = build;
            o.dockerRepository = dockerRepository;
            o.entryPoint = entryPoint;
            o.environmentVariables = environmentVariables;
            o.runtime = runtime;
            o.source = source;
            o.sourceProvenance = sourceProvenance;
            o.workerPool = workerPool;
            return o;
        }
    }
}
