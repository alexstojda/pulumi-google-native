// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.accesscontextmanager.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class MethodSelectorResponse {
    /**
     * @return Value for `method` should be a valid method name for the corresponding `service_name` in ApiOperation. If `*` used as value for `method`, then ALL methods and permissions are allowed.
     * 
     */
    private String method;
    /**
     * @return Value for `permission` should be a valid Cloud IAM permission for the corresponding `service_name` in ApiOperation.
     * 
     */
    private String permission;

    private MethodSelectorResponse() {}
    /**
     * @return Value for `method` should be a valid method name for the corresponding `service_name` in ApiOperation. If `*` used as value for `method`, then ALL methods and permissions are allowed.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return Value for `permission` should be a valid Cloud IAM permission for the corresponding `service_name` in ApiOperation.
     * 
     */
    public String permission() {
        return this.permission;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodSelectorResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String method;
        private String permission;
        public Builder() {}
        public Builder(MethodSelectorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.method = defaults.method;
    	      this.permission = defaults.permission;
        }

        @CustomType.Setter
        public Builder method(String method) {
            this.method = Objects.requireNonNull(method);
            return this;
        }
        @CustomType.Setter
        public Builder permission(String permission) {
            this.permission = Objects.requireNonNull(permission);
            return this;
        }
        public MethodSelectorResponse build() {
            final var o = new MethodSelectorResponse();
            o.method = method;
            o.permission = permission;
            return o;
        }
    }
}
