// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.storagetransfer.v1.outputs.MetadataOptionsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class TransferOptionsResponse {
    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    private Boolean deleteObjectsFromSourceAfterTransfer;
    /**
     * @return Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    private Boolean deleteObjectsUniqueInSink;
    /**
     * @return Represents the selected metadata options for a transfer job.
     * 
     */
    private MetadataOptionsResponse metadataOptions;
    /**
     * @return When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    private Boolean overwriteObjectsAlreadyExistingInSink;
    /**
     * @return When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
     * 
     */
    private String overwriteWhen;

    private TransferOptionsResponse() {}
    /**
     * @return Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
     * 
     */
    public Boolean deleteObjectsFromSourceAfterTransfer() {
        return this.deleteObjectsFromSourceAfterTransfer;
    }
    /**
     * @return Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
     * 
     */
    public Boolean deleteObjectsUniqueInSink() {
        return this.deleteObjectsUniqueInSink;
    }
    /**
     * @return Represents the selected metadata options for a transfer job.
     * 
     */
    public MetadataOptionsResponse metadataOptions() {
        return this.metadataOptions;
    }
    /**
     * @return When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
     * 
     */
    public Boolean overwriteObjectsAlreadyExistingInSink() {
        return this.overwriteObjectsAlreadyExistingInSink;
    }
    /**
     * @return When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
     * 
     */
    public String overwriteWhen() {
        return this.overwriteWhen;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferOptionsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean deleteObjectsFromSourceAfterTransfer;
        private Boolean deleteObjectsUniqueInSink;
        private MetadataOptionsResponse metadataOptions;
        private Boolean overwriteObjectsAlreadyExistingInSink;
        private String overwriteWhen;
        public Builder() {}
        public Builder(TransferOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteObjectsFromSourceAfterTransfer = defaults.deleteObjectsFromSourceAfterTransfer;
    	      this.deleteObjectsUniqueInSink = defaults.deleteObjectsUniqueInSink;
    	      this.metadataOptions = defaults.metadataOptions;
    	      this.overwriteObjectsAlreadyExistingInSink = defaults.overwriteObjectsAlreadyExistingInSink;
    	      this.overwriteWhen = defaults.overwriteWhen;
        }

        @CustomType.Setter
        public Builder deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
            this.deleteObjectsFromSourceAfterTransfer = Objects.requireNonNull(deleteObjectsFromSourceAfterTransfer);
            return this;
        }
        @CustomType.Setter
        public Builder deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
            this.deleteObjectsUniqueInSink = Objects.requireNonNull(deleteObjectsUniqueInSink);
            return this;
        }
        @CustomType.Setter
        public Builder metadataOptions(MetadataOptionsResponse metadataOptions) {
            this.metadataOptions = Objects.requireNonNull(metadataOptions);
            return this;
        }
        @CustomType.Setter
        public Builder overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
            this.overwriteObjectsAlreadyExistingInSink = Objects.requireNonNull(overwriteObjectsAlreadyExistingInSink);
            return this;
        }
        @CustomType.Setter
        public Builder overwriteWhen(String overwriteWhen) {
            this.overwriteWhen = Objects.requireNonNull(overwriteWhen);
            return this;
        }
        public TransferOptionsResponse build() {
            final var o = new TransferOptionsResponse();
            o.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
            o.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
            o.metadataOptions = metadataOptions;
            o.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
            o.overwriteWhen = overwriteWhen;
            return o;
        }
    }
}
