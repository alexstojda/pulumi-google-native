// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.vmmigration.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.vmmigration.v1alpha1.outputs.StatusResponse;
import com.pulumi.googlenative.vmmigration.v1alpha1.outputs.VmUtilizationInfoResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUtilizationReportResult {
    /**
     * @return The time the report was created (this refers to the time of the request, not the time the report creation completed).
     * 
     */
    private String createTime;
    /**
     * @return The report display name, as assigned by the user.
     * 
     */
    private String displayName;
    /**
     * @return Provides details on the state of the report in case of an error.
     * 
     */
    private StatusResponse error;
    /**
     * @return The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the &#34;frame_end_time&#34; value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
     * 
     */
    private String frameEndTime;
    /**
     * @return The report unique name.
     * 
     */
    private String name;
    /**
     * @return Current state of the report.
     * 
     */
    private String state;
    /**
     * @return The time the state was last set.
     * 
     */
    private String stateTime;
    /**
     * @return Time frame of the report.
     * 
     */
    private String timeFrame;
    /**
     * @return Total number of VMs included in the report.
     * 
     */
    private Integer vmCount;
    /**
     * @return List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
     * 
     */
    private List<VmUtilizationInfoResponse> vms;
    /**
     * @return Total number of VMs included in the report.
     * 
     */
    private Integer vmsCount;

    private GetUtilizationReportResult() {}
    /**
     * @return The time the report was created (this refers to the time of the request, not the time the report creation completed).
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The report display name, as assigned by the user.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Provides details on the state of the report in case of an error.
     * 
     */
    public StatusResponse error() {
        return this.error;
    }
    /**
     * @return The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the &#34;frame_end_time&#34; value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
     * 
     */
    public String frameEndTime() {
        return this.frameEndTime;
    }
    /**
     * @return The report unique name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Current state of the report.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The time the state was last set.
     * 
     */
    public String stateTime() {
        return this.stateTime;
    }
    /**
     * @return Time frame of the report.
     * 
     */
    public String timeFrame() {
        return this.timeFrame;
    }
    /**
     * @return Total number of VMs included in the report.
     * 
     */
    public Integer vmCount() {
        return this.vmCount;
    }
    /**
     * @return List of utilization information per VM. When sent as part of the request, the &#34;vm_id&#34; field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
     * 
     */
    public List<VmUtilizationInfoResponse> vms() {
        return this.vms;
    }
    /**
     * @return Total number of VMs included in the report.
     * 
     */
    public Integer vmsCount() {
        return this.vmsCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUtilizationReportResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String displayName;
        private StatusResponse error;
        private String frameEndTime;
        private String name;
        private String state;
        private String stateTime;
        private String timeFrame;
        private Integer vmCount;
        private List<VmUtilizationInfoResponse> vms;
        private Integer vmsCount;
        public Builder() {}
        public Builder(GetUtilizationReportResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.displayName = defaults.displayName;
    	      this.error = defaults.error;
    	      this.frameEndTime = defaults.frameEndTime;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.stateTime = defaults.stateTime;
    	      this.timeFrame = defaults.timeFrame;
    	      this.vmCount = defaults.vmCount;
    	      this.vms = defaults.vms;
    	      this.vmsCount = defaults.vmsCount;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder error(StatusResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        @CustomType.Setter
        public Builder frameEndTime(String frameEndTime) {
            this.frameEndTime = Objects.requireNonNull(frameEndTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder stateTime(String stateTime) {
            this.stateTime = Objects.requireNonNull(stateTime);
            return this;
        }
        @CustomType.Setter
        public Builder timeFrame(String timeFrame) {
            this.timeFrame = Objects.requireNonNull(timeFrame);
            return this;
        }
        @CustomType.Setter
        public Builder vmCount(Integer vmCount) {
            this.vmCount = Objects.requireNonNull(vmCount);
            return this;
        }
        @CustomType.Setter
        public Builder vms(List<VmUtilizationInfoResponse> vms) {
            this.vms = Objects.requireNonNull(vms);
            return this;
        }
        public Builder vms(VmUtilizationInfoResponse... vms) {
            return vms(List.of(vms));
        }
        @CustomType.Setter
        public Builder vmsCount(Integer vmsCount) {
            this.vmsCount = Objects.requireNonNull(vmsCount);
            return this;
        }
        public GetUtilizationReportResult build() {
            final var o = new GetUtilizationReportResult();
            o.createTime = createTime;
            o.displayName = displayName;
            o.error = error;
            o.frameEndTime = frameEndTime;
            o.name = name;
            o.state = state;
            o.stateTime = stateTime;
            o.timeFrame = timeFrame;
            o.vmCount = vmCount;
            o.vms = vms;
            o.vmsCount = vmsCount;
            return o;
        }
    }
}
