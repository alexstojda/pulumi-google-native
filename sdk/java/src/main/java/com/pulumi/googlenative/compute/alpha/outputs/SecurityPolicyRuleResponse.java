// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.SecurityPolicyRuleHttpHeaderActionResponse;
import com.pulumi.googlenative.compute.alpha.outputs.SecurityPolicyRuleMatcherResponse;
import com.pulumi.googlenative.compute.alpha.outputs.SecurityPolicyRuleRateLimitOptionsResponse;
import com.pulumi.googlenative.compute.alpha.outputs.SecurityPolicyRuleRedirectOptionsResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class SecurityPolicyRuleResponse {
    /**
     * @return The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502). - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this.
     * 
     */
    private String action;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private String description;
    /**
     * @return The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL.
     * 
     */
    private String direction;
    /**
     * @return Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on &#34;goto_next&#34; rules. This field may only be specified when the versioned_expr is set to FIREWALL.
     * 
     */
    private Boolean enableLogging;
    /**
     * @return Optional, additional actions that are performed on headers.
     * 
     */
    private SecurityPolicyRuleHttpHeaderActionResponse headerAction;
    /**
     * @return [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
     * 
     */
    private String kind;
    /**
     * @return A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * 
     */
    private SecurityPolicyRuleMatcherResponse match;
    /**
     * @return If set to true, the specified action is not enforced.
     * 
     */
    private Boolean preview;
    /**
     * @return An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    private Integer priority;
    /**
     * @return Must be specified if the action is &#34;rate_based_ban&#34; or &#34;throttle&#34;. Cannot be specified for any other actions.
     * 
     */
    private SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions;
    /**
     * @return Parameters defining the redirect action. Cannot be specified for any other actions.
     * 
     */
    private SecurityPolicyRuleRedirectOptionsResponse redirectOptions;
    /**
     * @return This must be specified for redirect actions. Cannot be specified for any other actions.
     * 
     */
    private String redirectTarget;
    /**
     * @return The minimum managed protection tier required for this rule.
     * 
     */
    private String ruleManagedProtectionTier;
    /**
     * @return Identifier for the rule. This is only unique within the given security policy. This can only be set during rule creation, if rule number is not specified it will be generated by the server.
     * 
     */
    private String ruleNumber;
    /**
     * @return Calculation of the complexity of a single firewall security policy rule.
     * 
     */
    private Integer ruleTupleCount;
    /**
     * @return A list of network resource URLs to which this rule applies. This field allows you to control which network&#39;s VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule. This field may only be specified when versioned_expr is set to FIREWALL.
     * 
     */
    private List<String> targetResources;
    /**
     * @return A list of service accounts indicating the sets of instances that are applied with this rule.
     * 
     */
    private List<String> targetServiceAccounts;

    private SecurityPolicyRuleResponse() {}
    /**
     * @return The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502). - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL.
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on &#34;goto_next&#34; rules. This field may only be specified when the versioned_expr is set to FIREWALL.
     * 
     */
    public Boolean enableLogging() {
        return this.enableLogging;
    }
    /**
     * @return Optional, additional actions that are performed on headers.
     * 
     */
    public SecurityPolicyRuleHttpHeaderActionResponse headerAction() {
        return this.headerAction;
    }
    /**
     * @return [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * 
     */
    public SecurityPolicyRuleMatcherResponse match() {
        return this.match;
    }
    /**
     * @return If set to true, the specified action is not enforced.
     * 
     */
    public Boolean preview() {
        return this.preview;
    }
    /**
     * @return An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Must be specified if the action is &#34;rate_based_ban&#34; or &#34;throttle&#34;. Cannot be specified for any other actions.
     * 
     */
    public SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions() {
        return this.rateLimitOptions;
    }
    /**
     * @return Parameters defining the redirect action. Cannot be specified for any other actions.
     * 
     */
    public SecurityPolicyRuleRedirectOptionsResponse redirectOptions() {
        return this.redirectOptions;
    }
    /**
     * @return This must be specified for redirect actions. Cannot be specified for any other actions.
     * 
     */
    public String redirectTarget() {
        return this.redirectTarget;
    }
    /**
     * @return The minimum managed protection tier required for this rule.
     * 
     */
    public String ruleManagedProtectionTier() {
        return this.ruleManagedProtectionTier;
    }
    /**
     * @return Identifier for the rule. This is only unique within the given security policy. This can only be set during rule creation, if rule number is not specified it will be generated by the server.
     * 
     */
    public String ruleNumber() {
        return this.ruleNumber;
    }
    /**
     * @return Calculation of the complexity of a single firewall security policy rule.
     * 
     */
    public Integer ruleTupleCount() {
        return this.ruleTupleCount;
    }
    /**
     * @return A list of network resource URLs to which this rule applies. This field allows you to control which network&#39;s VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule. This field may only be specified when versioned_expr is set to FIREWALL.
     * 
     */
    public List<String> targetResources() {
        return this.targetResources;
    }
    /**
     * @return A list of service accounts indicating the sets of instances that are applied with this rule.
     * 
     */
    public List<String> targetServiceAccounts() {
        return this.targetServiceAccounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String description;
        private String direction;
        private Boolean enableLogging;
        private SecurityPolicyRuleHttpHeaderActionResponse headerAction;
        private String kind;
        private SecurityPolicyRuleMatcherResponse match;
        private Boolean preview;
        private Integer priority;
        private SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions;
        private SecurityPolicyRuleRedirectOptionsResponse redirectOptions;
        private String redirectTarget;
        private String ruleManagedProtectionTier;
        private String ruleNumber;
        private Integer ruleTupleCount;
        private List<String> targetResources;
        private List<String> targetServiceAccounts;
        public Builder() {}
        public Builder(SecurityPolicyRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.enableLogging = defaults.enableLogging;
    	      this.headerAction = defaults.headerAction;
    	      this.kind = defaults.kind;
    	      this.match = defaults.match;
    	      this.preview = defaults.preview;
    	      this.priority = defaults.priority;
    	      this.rateLimitOptions = defaults.rateLimitOptions;
    	      this.redirectOptions = defaults.redirectOptions;
    	      this.redirectTarget = defaults.redirectTarget;
    	      this.ruleManagedProtectionTier = defaults.ruleManagedProtectionTier;
    	      this.ruleNumber = defaults.ruleNumber;
    	      this.ruleTupleCount = defaults.ruleTupleCount;
    	      this.targetResources = defaults.targetResources;
    	      this.targetServiceAccounts = defaults.targetServiceAccounts;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        @CustomType.Setter
        public Builder enableLogging(Boolean enableLogging) {
            this.enableLogging = Objects.requireNonNull(enableLogging);
            return this;
        }
        @CustomType.Setter
        public Builder headerAction(SecurityPolicyRuleHttpHeaderActionResponse headerAction) {
            this.headerAction = Objects.requireNonNull(headerAction);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder match(SecurityPolicyRuleMatcherResponse match) {
            this.match = Objects.requireNonNull(match);
            return this;
        }
        @CustomType.Setter
        public Builder preview(Boolean preview) {
            this.preview = Objects.requireNonNull(preview);
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitOptions(SecurityPolicyRuleRateLimitOptionsResponse rateLimitOptions) {
            this.rateLimitOptions = Objects.requireNonNull(rateLimitOptions);
            return this;
        }
        @CustomType.Setter
        public Builder redirectOptions(SecurityPolicyRuleRedirectOptionsResponse redirectOptions) {
            this.redirectOptions = Objects.requireNonNull(redirectOptions);
            return this;
        }
        @CustomType.Setter
        public Builder redirectTarget(String redirectTarget) {
            this.redirectTarget = Objects.requireNonNull(redirectTarget);
            return this;
        }
        @CustomType.Setter
        public Builder ruleManagedProtectionTier(String ruleManagedProtectionTier) {
            this.ruleManagedProtectionTier = Objects.requireNonNull(ruleManagedProtectionTier);
            return this;
        }
        @CustomType.Setter
        public Builder ruleNumber(String ruleNumber) {
            this.ruleNumber = Objects.requireNonNull(ruleNumber);
            return this;
        }
        @CustomType.Setter
        public Builder ruleTupleCount(Integer ruleTupleCount) {
            this.ruleTupleCount = Objects.requireNonNull(ruleTupleCount);
            return this;
        }
        @CustomType.Setter
        public Builder targetResources(List<String> targetResources) {
            this.targetResources = Objects.requireNonNull(targetResources);
            return this;
        }
        public Builder targetResources(String... targetResources) {
            return targetResources(List.of(targetResources));
        }
        @CustomType.Setter
        public Builder targetServiceAccounts(List<String> targetServiceAccounts) {
            this.targetServiceAccounts = Objects.requireNonNull(targetServiceAccounts);
            return this;
        }
        public Builder targetServiceAccounts(String... targetServiceAccounts) {
            return targetServiceAccounts(List.of(targetServiceAccounts));
        }
        public SecurityPolicyRuleResponse build() {
            final var o = new SecurityPolicyRuleResponse();
            o.action = action;
            o.description = description;
            o.direction = direction;
            o.enableLogging = enableLogging;
            o.headerAction = headerAction;
            o.kind = kind;
            o.match = match;
            o.preview = preview;
            o.priority = priority;
            o.rateLimitOptions = rateLimitOptions;
            o.redirectOptions = redirectOptions;
            o.redirectTarget = redirectTarget;
            o.ruleManagedProtectionTier = ruleManagedProtectionTier;
            o.ruleNumber = ruleNumber;
            o.ruleTupleCount = ruleTupleCount;
            o.targetResources = targetResources;
            o.targetServiceAccounts = targetServiceAccounts;
            return o;
        }
    }
}
