// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.CharacterMaskConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.CryptoHashConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.DateShiftConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.RedactConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.ReplaceWithInfoTypeConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A transformation to apply to text that is identified as a specific info_type.
 * 
 */
public final class InfoTypeTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InfoTypeTransformationArgs Empty = new InfoTypeTransformationArgs();

    /**
     * Config for character mask.
     * 
     */
    @Import(name="characterMaskConfig")
    private @Nullable Output<CharacterMaskConfigArgs> characterMaskConfig;

    /**
     * @return Config for character mask.
     * 
     */
    public Optional<Output<CharacterMaskConfigArgs>> characterMaskConfig() {
        return Optional.ofNullable(this.characterMaskConfig);
    }

    /**
     * Config for crypto hash.
     * 
     */
    @Import(name="cryptoHashConfig")
    private @Nullable Output<CryptoHashConfigArgs> cryptoHashConfig;

    /**
     * @return Config for crypto hash.
     * 
     */
    public Optional<Output<CryptoHashConfigArgs>> cryptoHashConfig() {
        return Optional.ofNullable(this.cryptoHashConfig);
    }

    /**
     * Config for date shift.
     * 
     */
    @Import(name="dateShiftConfig")
    private @Nullable Output<DateShiftConfigArgs> dateShiftConfig;

    /**
     * @return Config for date shift.
     * 
     */
    public Optional<Output<DateShiftConfigArgs>> dateShiftConfig() {
        return Optional.ofNullable(this.dateShiftConfig);
    }

    /**
     * InfoTypes to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any info_type that is not specified in another transformation.
     * 
     */
    @Import(name="infoTypes")
    private @Nullable Output<List<String>> infoTypes;

    /**
     * @return InfoTypes to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any info_type that is not specified in another transformation.
     * 
     */
    public Optional<Output<List<String>>> infoTypes() {
        return Optional.ofNullable(this.infoTypes);
    }

    /**
     * Config for text redaction.
     * 
     */
    @Import(name="redactConfig")
    private @Nullable Output<RedactConfigArgs> redactConfig;

    /**
     * @return Config for text redaction.
     * 
     */
    public Optional<Output<RedactConfigArgs>> redactConfig() {
        return Optional.ofNullable(this.redactConfig);
    }

    /**
     * Config for replace with InfoType.
     * 
     */
    @Import(name="replaceWithInfoTypeConfig")
    private @Nullable Output<ReplaceWithInfoTypeConfigArgs> replaceWithInfoTypeConfig;

    /**
     * @return Config for replace with InfoType.
     * 
     */
    public Optional<Output<ReplaceWithInfoTypeConfigArgs>> replaceWithInfoTypeConfig() {
        return Optional.ofNullable(this.replaceWithInfoTypeConfig);
    }

    private InfoTypeTransformationArgs() {}

    private InfoTypeTransformationArgs(InfoTypeTransformationArgs $) {
        this.characterMaskConfig = $.characterMaskConfig;
        this.cryptoHashConfig = $.cryptoHashConfig;
        this.dateShiftConfig = $.dateShiftConfig;
        this.infoTypes = $.infoTypes;
        this.redactConfig = $.redactConfig;
        this.replaceWithInfoTypeConfig = $.replaceWithInfoTypeConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InfoTypeTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InfoTypeTransformationArgs $;

        public Builder() {
            $ = new InfoTypeTransformationArgs();
        }

        public Builder(InfoTypeTransformationArgs defaults) {
            $ = new InfoTypeTransformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterMaskConfig Config for character mask.
         * 
         * @return builder
         * 
         */
        public Builder characterMaskConfig(@Nullable Output<CharacterMaskConfigArgs> characterMaskConfig) {
            $.characterMaskConfig = characterMaskConfig;
            return this;
        }

        /**
         * @param characterMaskConfig Config for character mask.
         * 
         * @return builder
         * 
         */
        public Builder characterMaskConfig(CharacterMaskConfigArgs characterMaskConfig) {
            return characterMaskConfig(Output.of(characterMaskConfig));
        }

        /**
         * @param cryptoHashConfig Config for crypto hash.
         * 
         * @return builder
         * 
         */
        public Builder cryptoHashConfig(@Nullable Output<CryptoHashConfigArgs> cryptoHashConfig) {
            $.cryptoHashConfig = cryptoHashConfig;
            return this;
        }

        /**
         * @param cryptoHashConfig Config for crypto hash.
         * 
         * @return builder
         * 
         */
        public Builder cryptoHashConfig(CryptoHashConfigArgs cryptoHashConfig) {
            return cryptoHashConfig(Output.of(cryptoHashConfig));
        }

        /**
         * @param dateShiftConfig Config for date shift.
         * 
         * @return builder
         * 
         */
        public Builder dateShiftConfig(@Nullable Output<DateShiftConfigArgs> dateShiftConfig) {
            $.dateShiftConfig = dateShiftConfig;
            return this;
        }

        /**
         * @param dateShiftConfig Config for date shift.
         * 
         * @return builder
         * 
         */
        public Builder dateShiftConfig(DateShiftConfigArgs dateShiftConfig) {
            return dateShiftConfig(Output.of(dateShiftConfig));
        }

        /**
         * @param infoTypes InfoTypes to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any info_type that is not specified in another transformation.
         * 
         * @return builder
         * 
         */
        public Builder infoTypes(@Nullable Output<List<String>> infoTypes) {
            $.infoTypes = infoTypes;
            return this;
        }

        /**
         * @param infoTypes InfoTypes to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any info_type that is not specified in another transformation.
         * 
         * @return builder
         * 
         */
        public Builder infoTypes(List<String> infoTypes) {
            return infoTypes(Output.of(infoTypes));
        }

        /**
         * @param infoTypes InfoTypes to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any info_type that is not specified in another transformation.
         * 
         * @return builder
         * 
         */
        public Builder infoTypes(String... infoTypes) {
            return infoTypes(List.of(infoTypes));
        }

        /**
         * @param redactConfig Config for text redaction.
         * 
         * @return builder
         * 
         */
        public Builder redactConfig(@Nullable Output<RedactConfigArgs> redactConfig) {
            $.redactConfig = redactConfig;
            return this;
        }

        /**
         * @param redactConfig Config for text redaction.
         * 
         * @return builder
         * 
         */
        public Builder redactConfig(RedactConfigArgs redactConfig) {
            return redactConfig(Output.of(redactConfig));
        }

        /**
         * @param replaceWithInfoTypeConfig Config for replace with InfoType.
         * 
         * @return builder
         * 
         */
        public Builder replaceWithInfoTypeConfig(@Nullable Output<ReplaceWithInfoTypeConfigArgs> replaceWithInfoTypeConfig) {
            $.replaceWithInfoTypeConfig = replaceWithInfoTypeConfig;
            return this;
        }

        /**
         * @param replaceWithInfoTypeConfig Config for replace with InfoType.
         * 
         * @return builder
         * 
         */
        public Builder replaceWithInfoTypeConfig(ReplaceWithInfoTypeConfigArgs replaceWithInfoTypeConfig) {
            return replaceWithInfoTypeConfig(Output.of(replaceWithInfoTypeConfig));
        }

        public InfoTypeTransformationArgs build() {
            return $;
        }
    }

}
