// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.container.v1beta1.outputs.DNSConfigResponse;
import com.pulumi.googlenative.container.v1beta1.outputs.DefaultSnatStatusResponse;
import com.pulumi.googlenative.container.v1beta1.outputs.ServiceExternalIPsConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class NetworkConfigResponse {
    /**
     * @return The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
     * 
     */
    private String datapathProvider;
    /**
     * @return Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
     * 
     */
    private DefaultSnatStatusResponse defaultSnatStatus;
    /**
     * @return DNSConfig contains clusterDNS config for this cluster.
     * 
     */
    private DNSConfigResponse dnsConfig;
    /**
     * @return Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
     * 
     */
    private Boolean enableIntraNodeVisibility;
    /**
     * @return Whether L4ILB Subsetting is enabled for this cluster.
     * 
     */
    private Boolean enableL4ilbSubsetting;
    /**
     * @return The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
     * 
     */
    private String network;
    /**
     * @return The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
     * 
     */
    private String privateIpv6GoogleAccess;
    /**
     * @return ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
     * 
     */
    private ServiceExternalIPsConfigResponse serviceExternalIpsConfig;
    /**
     * @return The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
     * 
     */
    private String subnetwork;

    private NetworkConfigResponse() {}
    /**
     * @return The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
     * 
     */
    public String datapathProvider() {
        return this.datapathProvider;
    }
    /**
     * @return Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
     * 
     */
    public DefaultSnatStatusResponse defaultSnatStatus() {
        return this.defaultSnatStatus;
    }
    /**
     * @return DNSConfig contains clusterDNS config for this cluster.
     * 
     */
    public DNSConfigResponse dnsConfig() {
        return this.dnsConfig;
    }
    /**
     * @return Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
     * 
     */
    public Boolean enableIntraNodeVisibility() {
        return this.enableIntraNodeVisibility;
    }
    /**
     * @return Whether L4ILB Subsetting is enabled for this cluster.
     * 
     */
    public Boolean enableL4ilbSubsetting() {
        return this.enableL4ilbSubsetting;
    }
    /**
     * @return The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
     * 
     */
    public String privateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }
    /**
     * @return ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
     * 
     */
    public ServiceExternalIPsConfigResponse serviceExternalIpsConfig() {
        return this.serviceExternalIpsConfig;
    }
    /**
     * @return The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
     * 
     */
    public String subnetwork() {
        return this.subnetwork;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datapathProvider;
        private DefaultSnatStatusResponse defaultSnatStatus;
        private DNSConfigResponse dnsConfig;
        private Boolean enableIntraNodeVisibility;
        private Boolean enableL4ilbSubsetting;
        private String network;
        private String privateIpv6GoogleAccess;
        private ServiceExternalIPsConfigResponse serviceExternalIpsConfig;
        private String subnetwork;
        public Builder() {}
        public Builder(NetworkConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datapathProvider = defaults.datapathProvider;
    	      this.defaultSnatStatus = defaults.defaultSnatStatus;
    	      this.dnsConfig = defaults.dnsConfig;
    	      this.enableIntraNodeVisibility = defaults.enableIntraNodeVisibility;
    	      this.enableL4ilbSubsetting = defaults.enableL4ilbSubsetting;
    	      this.network = defaults.network;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.serviceExternalIpsConfig = defaults.serviceExternalIpsConfig;
    	      this.subnetwork = defaults.subnetwork;
        }

        @CustomType.Setter
        public Builder datapathProvider(String datapathProvider) {
            this.datapathProvider = Objects.requireNonNull(datapathProvider);
            return this;
        }
        @CustomType.Setter
        public Builder defaultSnatStatus(DefaultSnatStatusResponse defaultSnatStatus) {
            this.defaultSnatStatus = Objects.requireNonNull(defaultSnatStatus);
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfig(DNSConfigResponse dnsConfig) {
            this.dnsConfig = Objects.requireNonNull(dnsConfig);
            return this;
        }
        @CustomType.Setter
        public Builder enableIntraNodeVisibility(Boolean enableIntraNodeVisibility) {
            this.enableIntraNodeVisibility = Objects.requireNonNull(enableIntraNodeVisibility);
            return this;
        }
        @CustomType.Setter
        public Builder enableL4ilbSubsetting(Boolean enableL4ilbSubsetting) {
            this.enableL4ilbSubsetting = Objects.requireNonNull(enableL4ilbSubsetting);
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder privateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
            return this;
        }
        @CustomType.Setter
        public Builder serviceExternalIpsConfig(ServiceExternalIPsConfigResponse serviceExternalIpsConfig) {
            this.serviceExternalIpsConfig = Objects.requireNonNull(serviceExternalIpsConfig);
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }
        public NetworkConfigResponse build() {
            final var o = new NetworkConfigResponse();
            o.datapathProvider = datapathProvider;
            o.defaultSnatStatus = defaultSnatStatus;
            o.dnsConfig = dnsConfig;
            o.enableIntraNodeVisibility = enableIntraNodeVisibility;
            o.enableL4ilbSubsetting = enableL4ilbSubsetting;
            o.network = network;
            o.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            o.serviceExternalIpsConfig = serviceExternalIpsConfig;
            o.subnetwork = subnetwork;
            return o;
        }
    }
}
