// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.pubsub.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSnapshotResult {
    /**
     * @return The snapshot is guaranteed to exist up until this time. A newly-created snapshot expires no later than 7 days from the time of its creation. Its exact lifetime is determined at creation by the existing backlog in the source subscription. Specifically, the lifetime of the snapshot is `7 days - (age of oldest unacked message in the subscription)`. For example, consider a subscription whose oldest unacked message is 3 days old. If a snapshot is created from this subscription, the snapshot -- which will always capture this 3-day-old backlog as long as the snapshot exists -- will expire in 4 days. The service will refuse to create a snapshot that would expire in less than 1 hour after creation.
     * 
     */
    private String expireTime;
    /**
     * @return See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The name of the snapshot.
     * 
     */
    private String name;
    /**
     * @return The name of the topic from which this snapshot is retaining messages.
     * 
     */
    private String topic;

    private GetSnapshotResult() {}
    /**
     * @return The snapshot is guaranteed to exist up until this time. A newly-created snapshot expires no later than 7 days from the time of its creation. Its exact lifetime is determined at creation by the existing backlog in the source subscription. Specifically, the lifetime of the snapshot is `7 days - (age of oldest unacked message in the subscription)`. For example, consider a subscription whose oldest unacked message is 3 days old. If a snapshot is created from this subscription, the snapshot -- which will always capture this 3-day-old backlog as long as the snapshot exists -- will expire in 4 days. The service will refuse to create a snapshot that would expire in less than 1 hour after creation.
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The name of the snapshot.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the topic from which this snapshot is retaining messages.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expireTime;
        private Map<String,String> labels;
        private String name;
        private String topic;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expireTime = defaults.expireTime;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            this.expireTime = Objects.requireNonNull(expireTime);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        public GetSnapshotResult build() {
            final var o = new GetSnapshotResult();
            o.expireTime = expireTime;
            o.labels = labels;
            o.name = name;
            o.topic = topic;
            return o;
        }
    }
}
