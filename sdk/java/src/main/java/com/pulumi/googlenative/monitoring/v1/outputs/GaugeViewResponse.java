// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class GaugeViewResponse {
    /**
     * @return The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
     * 
     */
    private Double lowerBound;
    /**
     * @return The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
     * 
     */
    private Double upperBound;

    private GaugeViewResponse() {}
    /**
     * @return The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
     * 
     */
    public Double lowerBound() {
        return this.lowerBound;
    }
    /**
     * @return The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
     * 
     */
    public Double upperBound() {
        return this.upperBound;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GaugeViewResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double lowerBound;
        private Double upperBound;
        public Builder() {}
        public Builder(GaugeViewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lowerBound = defaults.lowerBound;
    	      this.upperBound = defaults.upperBound;
        }

        @CustomType.Setter
        public Builder lowerBound(Double lowerBound) {
            this.lowerBound = Objects.requireNonNull(lowerBound);
            return this;
        }
        @CustomType.Setter
        public Builder upperBound(Double upperBound) {
            this.upperBound = Objects.requireNonNull(upperBound);
            return this;
        }
        public GaugeViewResponse build() {
            final var o = new GaugeViewResponse();
            o.lowerBound = lowerBound;
            o.upperBound = upperBound;
            return o;
        }
    }
}
