// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.apigee.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.
     * 
     */
    private List<String> consumerAcceptList;
    /**
     * @return Time the instance was created in milliseconds since epoch.
     * 
     */
    private String createdAt;
    /**
     * @return Optional. Description of the instance.
     * 
     */
    private String description;
    /**
     * @return Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     * 
     */
    private String diskEncryptionKeyName;
    /**
     * @return Optional. Display name for the instance.
     * 
     */
    private String displayName;
    /**
     * @return Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.
     * 
     */
    private String host;
    /**
     * @return Optional. IP range represents the customer-provided CIDR block of length 22 that will be used for the Apigee instance creation. This optional range, if provided, should be freely available as part of larger named range the customer has allocated to the Service Networking peering. If this is not provided, Apigee will automatically request for any available /22 CIDR block from Service Networking. The customer should use this CIDR block for configuring their firewall needs to allow traffic from Apigee. Input format: &#34;a.b.c.d/22&#34;, Output format: a.b.c.d/22, e.f.g.h/28&#34;
     * 
     */
    private String ipRange;
    /**
     * @return Time the instance was last modified in milliseconds since epoch.
     * 
     */
    private String lastModifiedAt;
    /**
     * @return Compute Engine location where the instance resides.
     * 
     */
    private String location;
    /**
     * @return Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\d]$`.
     * 
     */
    private String name;
    /**
     * @return Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.
     * 
     */
    private String peeringCidrRange;
    /**
     * @return Port number of the exposed Apigee endpoint.
     * 
     */
    private String port;
    /**
     * @return Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.
     * 
     */
    private String runtimeVersion;
    /**
     * @return Resource name of the service attachment created for the instance in the format: `projects/*{@literal /}regions/*{@literal /}serviceAttachments/*` Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.
     * 
     */
    private String serviceAttachment;
    /**
     * @return State of the instance. Values other than `ACTIVE` means the resource is not ready to use.
     * 
     */
    private String state;

    private GetInstanceResult() {}
    /**
     * @return Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.
     * 
     */
    public List<String> consumerAcceptList() {
        return this.consumerAcceptList;
    }
    /**
     * @return Time the instance was created in milliseconds since epoch.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Optional. Description of the instance.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     * 
     */
    public String diskEncryptionKeyName() {
        return this.diskEncryptionKeyName;
    }
    /**
     * @return Optional. Display name for the instance.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Optional. IP range represents the customer-provided CIDR block of length 22 that will be used for the Apigee instance creation. This optional range, if provided, should be freely available as part of larger named range the customer has allocated to the Service Networking peering. If this is not provided, Apigee will automatically request for any available /22 CIDR block from Service Networking. The customer should use this CIDR block for configuring their firewall needs to allow traffic from Apigee. Input format: &#34;a.b.c.d/22&#34;, Output format: a.b.c.d/22, e.f.g.h/28&#34;
     * 
     */
    public String ipRange() {
        return this.ipRange;
    }
    /**
     * @return Time the instance was last modified in milliseconds since epoch.
     * 
     */
    public String lastModifiedAt() {
        return this.lastModifiedAt;
    }
    /**
     * @return Compute Engine location where the instance resides.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\d]$`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.
     * 
     */
    public String peeringCidrRange() {
        return this.peeringCidrRange;
    }
    /**
     * @return Port number of the exposed Apigee endpoint.
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.
     * 
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }
    /**
     * @return Resource name of the service attachment created for the instance in the format: `projects/*{@literal /}regions/*{@literal /}serviceAttachments/*` Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.
     * 
     */
    public String serviceAttachment() {
        return this.serviceAttachment;
    }
    /**
     * @return State of the instance. Values other than `ACTIVE` means the resource is not ready to use.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> consumerAcceptList;
        private String createdAt;
        private String description;
        private String diskEncryptionKeyName;
        private String displayName;
        private String host;
        private String ipRange;
        private String lastModifiedAt;
        private String location;
        private String name;
        private String peeringCidrRange;
        private String port;
        private String runtimeVersion;
        private String serviceAttachment;
        private String state;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerAcceptList = defaults.consumerAcceptList;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.diskEncryptionKeyName = defaults.diskEncryptionKeyName;
    	      this.displayName = defaults.displayName;
    	      this.host = defaults.host;
    	      this.ipRange = defaults.ipRange;
    	      this.lastModifiedAt = defaults.lastModifiedAt;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.peeringCidrRange = defaults.peeringCidrRange;
    	      this.port = defaults.port;
    	      this.runtimeVersion = defaults.runtimeVersion;
    	      this.serviceAttachment = defaults.serviceAttachment;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder consumerAcceptList(List<String> consumerAcceptList) {
            this.consumerAcceptList = Objects.requireNonNull(consumerAcceptList);
            return this;
        }
        public Builder consumerAcceptList(String... consumerAcceptList) {
            return consumerAcceptList(List.of(consumerAcceptList));
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeyName(String diskEncryptionKeyName) {
            this.diskEncryptionKeyName = Objects.requireNonNull(diskEncryptionKeyName);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder ipRange(String ipRange) {
            this.ipRange = Objects.requireNonNull(ipRange);
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedAt(String lastModifiedAt) {
            this.lastModifiedAt = Objects.requireNonNull(lastModifiedAt);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder peeringCidrRange(String peeringCidrRange) {
            this.peeringCidrRange = Objects.requireNonNull(peeringCidrRange);
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder runtimeVersion(String runtimeVersion) {
            this.runtimeVersion = Objects.requireNonNull(runtimeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAttachment(String serviceAttachment) {
            this.serviceAttachment = Objects.requireNonNull(serviceAttachment);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.consumerAcceptList = consumerAcceptList;
            o.createdAt = createdAt;
            o.description = description;
            o.diskEncryptionKeyName = diskEncryptionKeyName;
            o.displayName = displayName;
            o.host = host;
            o.ipRange = ipRange;
            o.lastModifiedAt = lastModifiedAt;
            o.location = location;
            o.name = name;
            o.peeringCidrRange = peeringCidrRange;
            o.port = port;
            o.runtimeVersion = runtimeVersion;
            o.serviceAttachment = serviceAttachment;
            o.state = state;
            return o;
        }
    }
}
