// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class CustomMetricResponse {
    /**
     * @return Allows filtering on the metric&#39;s fields.
     * 
     */
    private String filter;
    /**
     * @return The name of the metric.
     * 
     */
    private String metricName;
    /**
     * @return May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
     * 
     */
    private Double singleInstanceAssignment;
    /**
     * @return The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
     * 
     */
    private String targetType;
    /**
     * @return The target value for the metric.
     * 
     */
    private Double targetUtilization;

    private CustomMetricResponse() {}
    /**
     * @return Allows filtering on the metric&#39;s fields.
     * 
     */
    public String filter() {
        return this.filter;
    }
    /**
     * @return The name of the metric.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
     * 
     */
    public Double singleInstanceAssignment() {
        return this.singleInstanceAssignment;
    }
    /**
     * @return The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
     * 
     */
    public String targetType() {
        return this.targetType;
    }
    /**
     * @return The target value for the metric.
     * 
     */
    public Double targetUtilization() {
        return this.targetUtilization;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomMetricResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String filter;
        private String metricName;
        private Double singleInstanceAssignment;
        private String targetType;
        private Double targetUtilization;
        public Builder() {}
        public Builder(CustomMetricResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filter = defaults.filter;
    	      this.metricName = defaults.metricName;
    	      this.singleInstanceAssignment = defaults.singleInstanceAssignment;
    	      this.targetType = defaults.targetType;
    	      this.targetUtilization = defaults.targetUtilization;
        }

        @CustomType.Setter
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        @CustomType.Setter
        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        @CustomType.Setter
        public Builder singleInstanceAssignment(Double singleInstanceAssignment) {
            this.singleInstanceAssignment = Objects.requireNonNull(singleInstanceAssignment);
            return this;
        }
        @CustomType.Setter
        public Builder targetType(String targetType) {
            this.targetType = Objects.requireNonNull(targetType);
            return this;
        }
        @CustomType.Setter
        public Builder targetUtilization(Double targetUtilization) {
            this.targetUtilization = Objects.requireNonNull(targetUtilization);
            return this;
        }
        public CustomMetricResponse build() {
            final var o = new CustomMetricResponse();
            o.filter = filter;
            o.metricName = metricName;
            o.singleInstanceAssignment = singleInstanceAssignment;
            o.targetType = targetType;
            o.targetUtilization = targetUtilization;
            return o;
        }
    }
}
