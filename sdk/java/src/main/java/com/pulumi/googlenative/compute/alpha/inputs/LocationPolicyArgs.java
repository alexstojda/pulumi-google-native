// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.compute.alpha.enums.LocationPolicyTargetShape;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region).
 * 
 */
public final class LocationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocationPolicyArgs Empty = new LocationPolicyArgs();

    /**
     * Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<Map<String,String>> locations;

    /**
     * @return Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a.
     * 
     */
    public Optional<Output<Map<String,String>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Strategy for distributing VMs across zones in a region.
     * 
     */
    @Import(name="targetShape")
    private @Nullable Output<LocationPolicyTargetShape> targetShape;

    /**
     * @return Strategy for distributing VMs across zones in a region.
     * 
     */
    public Optional<Output<LocationPolicyTargetShape>> targetShape() {
        return Optional.ofNullable(this.targetShape);
    }

    private LocationPolicyArgs() {}

    private LocationPolicyArgs(LocationPolicyArgs $) {
        this.locations = $.locations;
        this.targetShape = $.targetShape;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocationPolicyArgs $;

        public Builder() {
            $ = new LocationPolicyArgs();
        }

        public Builder(LocationPolicyArgs defaults) {
            $ = new LocationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param locations Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<Map<String,String>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a.
         * 
         * @return builder
         * 
         */
        public Builder locations(Map<String,String> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param targetShape Strategy for distributing VMs across zones in a region.
         * 
         * @return builder
         * 
         */
        public Builder targetShape(@Nullable Output<LocationPolicyTargetShape> targetShape) {
            $.targetShape = targetShape;
            return this;
        }

        /**
         * @param targetShape Strategy for distributing VMs across zones in a region.
         * 
         * @return builder
         * 
         */
        public Builder targetShape(LocationPolicyTargetShape targetShape) {
            return targetShape(Output.of(targetShape));
        }

        public LocationPolicyArgs build() {
            return $;
        }
    }

}
