// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.contactcenterinsights.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.contactcenterinsights.v1.outputs.GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPhraseMatcherResult {
    /**
     * @return The most recent time at which the activation status was updated.
     * 
     */
    private String activationUpdateTime;
    /**
     * @return Applies the phrase matcher only when it is active.
     * 
     */
    private Boolean active;
    /**
     * @return The human-readable name of the phrase matcher.
     * 
     */
    private String displayName;
    /**
     * @return The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * 
     */
    private String name;
    /**
     * @return A list of phase match rule groups that are included in this matcher.
     * 
     */
    private List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse> phraseMatchRuleGroups;
    /**
     * @return The timestamp of when the revision was created. It is also the create time when a new matcher is added.
     * 
     */
    private String revisionCreateTime;
    /**
     * @return Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567
     * 
     */
    private String revisionId;
    /**
     * @return The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
     * 
     */
    private String roleMatch;
    /**
     * @return The type of this phrase matcher.
     * 
     */
    private String type;
    /**
     * @return The most recent time at which the phrase matcher was updated.
     * 
     */
    private String updateTime;
    /**
     * @return The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.
     * 
     */
    private String versionTag;

    private GetPhraseMatcherResult() {}
    /**
     * @return The most recent time at which the activation status was updated.
     * 
     */
    public String activationUpdateTime() {
        return this.activationUpdateTime;
    }
    /**
     * @return Applies the phrase matcher only when it is active.
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The human-readable name of the phrase matcher.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of phase match rule groups that are included in this matcher.
     * 
     */
    public List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse> phraseMatchRuleGroups() {
        return this.phraseMatchRuleGroups;
    }
    /**
     * @return The timestamp of when the revision was created. It is also the create time when a new matcher is added.
     * 
     */
    public String revisionCreateTime() {
        return this.revisionCreateTime;
    }
    /**
     * @return Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567
     * 
     */
    public String revisionId() {
        return this.revisionId;
    }
    /**
     * @return The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
     * 
     */
    public String roleMatch() {
        return this.roleMatch;
    }
    /**
     * @return The type of this phrase matcher.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The most recent time at which the phrase matcher was updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.
     * 
     */
    public String versionTag() {
        return this.versionTag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPhraseMatcherResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activationUpdateTime;
        private Boolean active;
        private String displayName;
        private String name;
        private List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse> phraseMatchRuleGroups;
        private String revisionCreateTime;
        private String revisionId;
        private String roleMatch;
        private String type;
        private String updateTime;
        private String versionTag;
        public Builder() {}
        public Builder(GetPhraseMatcherResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationUpdateTime = defaults.activationUpdateTime;
    	      this.active = defaults.active;
    	      this.displayName = defaults.displayName;
    	      this.name = defaults.name;
    	      this.phraseMatchRuleGroups = defaults.phraseMatchRuleGroups;
    	      this.revisionCreateTime = defaults.revisionCreateTime;
    	      this.revisionId = defaults.revisionId;
    	      this.roleMatch = defaults.roleMatch;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
    	      this.versionTag = defaults.versionTag;
        }

        @CustomType.Setter
        public Builder activationUpdateTime(String activationUpdateTime) {
            this.activationUpdateTime = Objects.requireNonNull(activationUpdateTime);
            return this;
        }
        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder phraseMatchRuleGroups(List<GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse> phraseMatchRuleGroups) {
            this.phraseMatchRuleGroups = Objects.requireNonNull(phraseMatchRuleGroups);
            return this;
        }
        public Builder phraseMatchRuleGroups(GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse... phraseMatchRuleGroups) {
            return phraseMatchRuleGroups(List.of(phraseMatchRuleGroups));
        }
        @CustomType.Setter
        public Builder revisionCreateTime(String revisionCreateTime) {
            this.revisionCreateTime = Objects.requireNonNull(revisionCreateTime);
            return this;
        }
        @CustomType.Setter
        public Builder revisionId(String revisionId) {
            this.revisionId = Objects.requireNonNull(revisionId);
            return this;
        }
        @CustomType.Setter
        public Builder roleMatch(String roleMatch) {
            this.roleMatch = Objects.requireNonNull(roleMatch);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        @CustomType.Setter
        public Builder versionTag(String versionTag) {
            this.versionTag = Objects.requireNonNull(versionTag);
            return this;
        }
        public GetPhraseMatcherResult build() {
            final var o = new GetPhraseMatcherResult();
            o.activationUpdateTime = activationUpdateTime;
            o.active = active;
            o.displayName = displayName;
            o.name = name;
            o.phraseMatchRuleGroups = phraseMatchRuleGroups;
            o.revisionCreateTime = revisionCreateTime;
            o.revisionId = revisionId;
            o.roleMatch = roleMatch;
            o.type = type;
            o.updateTime = updateTime;
            o.versionTag = versionTag;
            return o;
        }
    }
}
