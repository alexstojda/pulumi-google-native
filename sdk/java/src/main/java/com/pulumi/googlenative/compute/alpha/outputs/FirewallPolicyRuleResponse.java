// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.FirewallPolicyRuleMatcherResponse;
import com.pulumi.googlenative.compute.alpha.outputs.FirewallPolicyRuleSecureTagResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class FirewallPolicyRuleResponse {
    /**
     * @return The Action to perform when the client connection triggers the rule. Can currently be either &#34;allow&#34; or &#34;deny()&#34; where valid values for status are 403, 404, and 502.
     * 
     */
    private String action;
    /**
     * @return An optional description for this resource.
     * 
     */
    private String description;
    /**
     * @return The direction in which this rule applies.
     * 
     */
    private String direction;
    /**
     * @return Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     * 
     */
    private Boolean disabled;
    /**
     * @return Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on &#34;goto_next&#34; rules.
     * 
     */
    private Boolean enableLogging;
    /**
     * @return [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
     * 
     */
    private String kind;
    /**
     * @return A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * 
     */
    private FirewallPolicyRuleMatcherResponse match;
    /**
     * @return An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
     * 
     */
    private Integer priority;
    /**
     * @return An optional name for the rule. This field is not a unique identifier and can be updated.
     * 
     */
    private String ruleName;
    /**
     * @return Calculation of the complexity of a single firewall policy rule.
     * 
     */
    private Integer ruleTupleCount;
    /**
     * @return A fully-qualified URL of a SecurityProfile resource instance. Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group Must be specified if action = &#39;apply_profile_group&#39; and cannot be specified for other actions.
     * 
     */
    private String securityProfileGroup;
    /**
     * @return A list of network resource URLs to which this rule applies. This field allows you to control which network&#39;s VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
     * 
     */
    private List<String> targetResources;
    /**
     * @return A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * 
     */
    private List<FirewallPolicyRuleSecureTagResponse> targetSecureTags;
    /**
     * @return A list of service accounts indicating the sets of instances that are applied with this rule.
     * 
     */
    private List<String> targetServiceAccounts;

    private FirewallPolicyRuleResponse() {}
    /**
     * @return The Action to perform when the client connection triggers the rule. Can currently be either &#34;allow&#34; or &#34;deny()&#34; where valid values for status are 403, 404, and 502.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return An optional description for this resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The direction in which this rule applies.
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on &#34;goto_next&#34; rules.
     * 
     */
    public Boolean enableLogging() {
        return this.enableLogging;
    }
    /**
     * @return [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding &#39;action&#39; is enforced.
     * 
     */
    public FirewallPolicyRuleMatcherResponse match() {
        return this.match;
    }
    /**
     * @return An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return An optional name for the rule. This field is not a unique identifier and can be updated.
     * 
     */
    public String ruleName() {
        return this.ruleName;
    }
    /**
     * @return Calculation of the complexity of a single firewall policy rule.
     * 
     */
    public Integer ruleTupleCount() {
        return this.ruleTupleCount;
    }
    /**
     * @return A fully-qualified URL of a SecurityProfile resource instance. Example: https://networksecurity.googleapis.com/v1/projects/{project}/locations/{location}/securityProfileGroups/my-security-profile-group Must be specified if action = &#39;apply_profile_group&#39; and cannot be specified for other actions.
     * 
     */
    public String securityProfileGroup() {
        return this.securityProfileGroup;
    }
    /**
     * @return A list of network resource URLs to which this rule applies. This field allows you to control which network&#39;s VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
     * 
     */
    public List<String> targetResources() {
        return this.targetResources;
    }
    /**
     * @return A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     * 
     */
    public List<FirewallPolicyRuleSecureTagResponse> targetSecureTags() {
        return this.targetSecureTags;
    }
    /**
     * @return A list of service accounts indicating the sets of instances that are applied with this rule.
     * 
     */
    public List<String> targetServiceAccounts() {
        return this.targetServiceAccounts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallPolicyRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String description;
        private String direction;
        private Boolean disabled;
        private Boolean enableLogging;
        private String kind;
        private FirewallPolicyRuleMatcherResponse match;
        private Integer priority;
        private String ruleName;
        private Integer ruleTupleCount;
        private String securityProfileGroup;
        private List<String> targetResources;
        private List<FirewallPolicyRuleSecureTagResponse> targetSecureTags;
        private List<String> targetServiceAccounts;
        public Builder() {}
        public Builder(FirewallPolicyRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.disabled = defaults.disabled;
    	      this.enableLogging = defaults.enableLogging;
    	      this.kind = defaults.kind;
    	      this.match = defaults.match;
    	      this.priority = defaults.priority;
    	      this.ruleName = defaults.ruleName;
    	      this.ruleTupleCount = defaults.ruleTupleCount;
    	      this.securityProfileGroup = defaults.securityProfileGroup;
    	      this.targetResources = defaults.targetResources;
    	      this.targetSecureTags = defaults.targetSecureTags;
    	      this.targetServiceAccounts = defaults.targetServiceAccounts;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        @CustomType.Setter
        public Builder enableLogging(Boolean enableLogging) {
            this.enableLogging = Objects.requireNonNull(enableLogging);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder match(FirewallPolicyRuleMatcherResponse match) {
            this.match = Objects.requireNonNull(match);
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(String ruleName) {
            this.ruleName = Objects.requireNonNull(ruleName);
            return this;
        }
        @CustomType.Setter
        public Builder ruleTupleCount(Integer ruleTupleCount) {
            this.ruleTupleCount = Objects.requireNonNull(ruleTupleCount);
            return this;
        }
        @CustomType.Setter
        public Builder securityProfileGroup(String securityProfileGroup) {
            this.securityProfileGroup = Objects.requireNonNull(securityProfileGroup);
            return this;
        }
        @CustomType.Setter
        public Builder targetResources(List<String> targetResources) {
            this.targetResources = Objects.requireNonNull(targetResources);
            return this;
        }
        public Builder targetResources(String... targetResources) {
            return targetResources(List.of(targetResources));
        }
        @CustomType.Setter
        public Builder targetSecureTags(List<FirewallPolicyRuleSecureTagResponse> targetSecureTags) {
            this.targetSecureTags = Objects.requireNonNull(targetSecureTags);
            return this;
        }
        public Builder targetSecureTags(FirewallPolicyRuleSecureTagResponse... targetSecureTags) {
            return targetSecureTags(List.of(targetSecureTags));
        }
        @CustomType.Setter
        public Builder targetServiceAccounts(List<String> targetServiceAccounts) {
            this.targetServiceAccounts = Objects.requireNonNull(targetServiceAccounts);
            return this;
        }
        public Builder targetServiceAccounts(String... targetServiceAccounts) {
            return targetServiceAccounts(List.of(targetServiceAccounts));
        }
        public FirewallPolicyRuleResponse build() {
            final var o = new FirewallPolicyRuleResponse();
            o.action = action;
            o.description = description;
            o.direction = direction;
            o.disabled = disabled;
            o.enableLogging = enableLogging;
            o.kind = kind;
            o.match = match;
            o.priority = priority;
            o.ruleName = ruleName;
            o.ruleTupleCount = ruleTupleCount;
            o.securityProfileGroup = securityProfileGroup;
            o.targetResources = targetResources;
            o.targetSecureTags = targetSecureTags;
            o.targetServiceAccounts = targetServiceAccounts;
            return o;
        }
    }
}
