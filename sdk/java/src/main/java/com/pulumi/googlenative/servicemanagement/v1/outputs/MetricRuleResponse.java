// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class MetricRuleResponse {
    /**
     * @return Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    private Map<String,String> metricCosts;
    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    private String selector;

    private MetricRuleResponse() {}
    /**
     * @return Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
     * 
     */
    public Map<String,String> metricCosts() {
        return this.metricCosts;
    }
    /**
     * @return Selects the methods to which this rule applies. Refer to selector for syntax details.
     * 
     */
    public String selector() {
        return this.selector;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricRuleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> metricCosts;
        private String selector;
        public Builder() {}
        public Builder(MetricRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricCosts = defaults.metricCosts;
    	      this.selector = defaults.selector;
        }

        @CustomType.Setter
        public Builder metricCosts(Map<String,String> metricCosts) {
            this.metricCosts = Objects.requireNonNull(metricCosts);
            return this;
        }
        @CustomType.Setter
        public Builder selector(String selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }
        public MetricRuleResponse build() {
            final var o = new MetricRuleResponse();
            o.metricCosts = metricCosts;
            o.selector = selector;
            return o;
        }
    }
}
