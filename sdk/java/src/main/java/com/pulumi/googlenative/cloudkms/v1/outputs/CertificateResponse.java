// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CertificateResponse {
    /**
     * @return The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    private String issuer;
    /**
     * @return The certificate is not valid after this time. Only present if parsed is true.
     * 
     */
    private String notAfterTime;
    /**
     * @return The certificate is not valid before this time. Only present if parsed is true.
     * 
     */
    private String notBeforeTime;
    /**
     * @return True if the certificate was parsed successfully.
     * 
     */
    private Boolean parsed;
    /**
     * @return The raw certificate bytes in DER format.
     * 
     */
    private String rawDer;
    /**
     * @return The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    private String serialNumber;
    /**
     * @return The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    private String sha256Fingerprint;
    /**
     * @return The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    private String subject;
    /**
     * @return The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    private List<String> subjectAlternativeDnsNames;

    private CertificateResponse() {}
    /**
     * @return The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The certificate is not valid after this time. Only present if parsed is true.
     * 
     */
    public String notAfterTime() {
        return this.notAfterTime;
    }
    /**
     * @return The certificate is not valid before this time. Only present if parsed is true.
     * 
     */
    public String notBeforeTime() {
        return this.notBeforeTime;
    }
    /**
     * @return True if the certificate was parsed successfully.
     * 
     */
    public Boolean parsed() {
        return this.parsed;
    }
    /**
     * @return The raw certificate bytes in DER format.
     * 
     */
    public String rawDer() {
        return this.rawDer;
    }
    /**
     * @return The certificate serial number as a hex string. Only present if parsed is true.
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
     * 
     */
    public String sha256Fingerprint() {
        return this.sha256Fingerprint;
    }
    /**
     * @return The subject distinguished name in RFC 2253 format. Only present if parsed is true.
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return The subject Alternative DNS names. Only present if parsed is true.
     * 
     */
    public List<String> subjectAlternativeDnsNames() {
        return this.subjectAlternativeDnsNames;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String issuer;
        private String notAfterTime;
        private String notBeforeTime;
        private Boolean parsed;
        private String rawDer;
        private String serialNumber;
        private String sha256Fingerprint;
        private String subject;
        private List<String> subjectAlternativeDnsNames;
        public Builder() {}
        public Builder(CertificateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.issuer = defaults.issuer;
    	      this.notAfterTime = defaults.notAfterTime;
    	      this.notBeforeTime = defaults.notBeforeTime;
    	      this.parsed = defaults.parsed;
    	      this.rawDer = defaults.rawDer;
    	      this.serialNumber = defaults.serialNumber;
    	      this.sha256Fingerprint = defaults.sha256Fingerprint;
    	      this.subject = defaults.subject;
    	      this.subjectAlternativeDnsNames = defaults.subjectAlternativeDnsNames;
        }

        @CustomType.Setter
        public Builder issuer(String issuer) {
            this.issuer = Objects.requireNonNull(issuer);
            return this;
        }
        @CustomType.Setter
        public Builder notAfterTime(String notAfterTime) {
            this.notAfterTime = Objects.requireNonNull(notAfterTime);
            return this;
        }
        @CustomType.Setter
        public Builder notBeforeTime(String notBeforeTime) {
            this.notBeforeTime = Objects.requireNonNull(notBeforeTime);
            return this;
        }
        @CustomType.Setter
        public Builder parsed(Boolean parsed) {
            this.parsed = Objects.requireNonNull(parsed);
            return this;
        }
        @CustomType.Setter
        public Builder rawDer(String rawDer) {
            this.rawDer = Objects.requireNonNull(rawDer);
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Objects.requireNonNull(serialNumber);
            return this;
        }
        @CustomType.Setter
        public Builder sha256Fingerprint(String sha256Fingerprint) {
            this.sha256Fingerprint = Objects.requireNonNull(sha256Fingerprint);
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        @CustomType.Setter
        public Builder subjectAlternativeDnsNames(List<String> subjectAlternativeDnsNames) {
            this.subjectAlternativeDnsNames = Objects.requireNonNull(subjectAlternativeDnsNames);
            return this;
        }
        public Builder subjectAlternativeDnsNames(String... subjectAlternativeDnsNames) {
            return subjectAlternativeDnsNames(List.of(subjectAlternativeDnsNames));
        }
        public CertificateResponse build() {
            final var o = new CertificateResponse();
            o.issuer = issuer;
            o.notAfterTime = notAfterTime;
            o.notBeforeTime = notBeforeTime;
            o.parsed = parsed;
            o.rawDer = rawDer;
            o.serialNumber = serialNumber;
            o.sha256Fingerprint = sha256Fingerprint;
            o.subject = subject;
            o.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
            return o;
        }
    }
}
