// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.tpu.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.tpu.v1.outputs.NetworkEndpointResponse;
import com.pulumi.googlenative.tpu.v1.outputs.SchedulingConfigResponse;
import com.pulumi.googlenative.tpu.v1.outputs.SymptomResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodeResult {
    /**
     * @return The type of hardware accelerators associated with this node.
     * 
     */
    private String acceleratorType;
    /**
     * @return The API version that created this Node.
     * 
     */
    private String apiVersion;
    /**
     * @return The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user&#39;s provided network, or the provided network is peered with another network that is using that CIDR block.
     * 
     */
    private String cidrBlock;
    /**
     * @return The time when the node was created.
     * 
     */
    private String createTime;
    /**
     * @return The user-supplied description of the TPU. Maximum of 512 characters.
     * 
     */
    private String description;
    /**
     * @return The health status of the TPU node.
     * 
     */
    private String health;
    /**
     * @return If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    private String healthDescription;
    /**
     * @return DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
     * 
     * @deprecated
     * Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
     * 
     */
    @Deprecated /* Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances. */
    private String ipAddress;
    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Immutable. The name of the TPU
     * 
     */
    private String name;
    /**
     * @return The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, &#34;default&#34; will be used.
     * 
     */
    private String network;
    /**
     * @return The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.
     * 
     */
    private List<NetworkEndpointResponse> networkEndpoints;
    /**
     * @return DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
     * 
     * @deprecated
     * Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
     * 
     */
    @Deprecated /* Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances. */
    private String port;
    /**
     * @return The scheduling options for this node.
     * 
     */
    private SchedulingConfigResponse schedulingConfig;
    /**
     * @return The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
     * 
     */
    private String serviceAccount;
    /**
     * @return The current state for the TPU Node.
     * 
     */
    private String state;
    /**
     * @return The Symptoms that have occurred to the TPU Node.
     * 
     */
    private List<SymptomResponse> symptoms;
    /**
     * @return The version of Tensorflow running in the Node.
     * 
     */
    private String tensorflowVersion;
    /**
     * @return Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.
     * 
     */
    private Boolean useServiceNetworking;

    private GetNodeResult() {}
    /**
     * @return The type of hardware accelerators associated with this node.
     * 
     */
    public String acceleratorType() {
        return this.acceleratorType;
    }
    /**
     * @return The API version that created this Node.
     * 
     */
    public String apiVersion() {
        return this.apiVersion;
    }
    /**
     * @return The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user&#39;s provided network, or the provided network is peered with another network that is using that CIDR block.
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return The time when the node was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The user-supplied description of the TPU. Maximum of 512 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The health status of the TPU node.
     * 
     */
    public String health() {
        return this.health;
    }
    /**
     * @return If this field is populated, it contains a description of why the TPU Node is unhealthy.
     * 
     */
    public String healthDescription() {
        return this.healthDescription;
    }
    /**
     * @return DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
     * 
     * @deprecated
     * Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
     * 
     */
    @Deprecated /* Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances. */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Immutable. The name of the TPU
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, &#34;default&#34; will be used.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.
     * 
     */
    public List<NetworkEndpointResponse> networkEndpoints() {
        return this.networkEndpoints;
    }
    /**
     * @return DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
     * 
     * @deprecated
     * Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
     * 
     */
    @Deprecated /* Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances. */
    public String port() {
        return this.port;
    }
    /**
     * @return The scheduling options for this node.
     * 
     */
    public SchedulingConfigResponse schedulingConfig() {
        return this.schedulingConfig;
    }
    /**
     * @return The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return The current state for the TPU Node.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The Symptoms that have occurred to the TPU Node.
     * 
     */
    public List<SymptomResponse> symptoms() {
        return this.symptoms;
    }
    /**
     * @return The version of Tensorflow running in the Node.
     * 
     */
    public String tensorflowVersion() {
        return this.tensorflowVersion;
    }
    /**
     * @return Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.
     * 
     */
    public Boolean useServiceNetworking() {
        return this.useServiceNetworking;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceleratorType;
        private String apiVersion;
        private String cidrBlock;
        private String createTime;
        private String description;
        private String health;
        private String healthDescription;
        private String ipAddress;
        private Map<String,String> labels;
        private String name;
        private String network;
        private List<NetworkEndpointResponse> networkEndpoints;
        private String port;
        private SchedulingConfigResponse schedulingConfig;
        private String serviceAccount;
        private String state;
        private List<SymptomResponse> symptoms;
        private String tensorflowVersion;
        private Boolean useServiceNetworking;
        public Builder() {}
        public Builder(GetNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratorType = defaults.acceleratorType;
    	      this.apiVersion = defaults.apiVersion;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.health = defaults.health;
    	      this.healthDescription = defaults.healthDescription;
    	      this.ipAddress = defaults.ipAddress;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkEndpoints = defaults.networkEndpoints;
    	      this.port = defaults.port;
    	      this.schedulingConfig = defaults.schedulingConfig;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.state = defaults.state;
    	      this.symptoms = defaults.symptoms;
    	      this.tensorflowVersion = defaults.tensorflowVersion;
    	      this.useServiceNetworking = defaults.useServiceNetworking;
        }

        @CustomType.Setter
        public Builder acceleratorType(String acceleratorType) {
            this.acceleratorType = Objects.requireNonNull(acceleratorType);
            return this;
        }
        @CustomType.Setter
        public Builder apiVersion(String apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlock(String cidrBlock) {
            this.cidrBlock = Objects.requireNonNull(cidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder health(String health) {
            this.health = Objects.requireNonNull(health);
            return this;
        }
        @CustomType.Setter
        public Builder healthDescription(String healthDescription) {
            this.healthDescription = Objects.requireNonNull(healthDescription);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder networkEndpoints(List<NetworkEndpointResponse> networkEndpoints) {
            this.networkEndpoints = Objects.requireNonNull(networkEndpoints);
            return this;
        }
        public Builder networkEndpoints(NetworkEndpointResponse... networkEndpoints) {
            return networkEndpoints(List.of(networkEndpoints));
        }
        @CustomType.Setter
        public Builder port(String port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder schedulingConfig(SchedulingConfigResponse schedulingConfig) {
            this.schedulingConfig = Objects.requireNonNull(schedulingConfig);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder symptoms(List<SymptomResponse> symptoms) {
            this.symptoms = Objects.requireNonNull(symptoms);
            return this;
        }
        public Builder symptoms(SymptomResponse... symptoms) {
            return symptoms(List.of(symptoms));
        }
        @CustomType.Setter
        public Builder tensorflowVersion(String tensorflowVersion) {
            this.tensorflowVersion = Objects.requireNonNull(tensorflowVersion);
            return this;
        }
        @CustomType.Setter
        public Builder useServiceNetworking(Boolean useServiceNetworking) {
            this.useServiceNetworking = Objects.requireNonNull(useServiceNetworking);
            return this;
        }
        public GetNodeResult build() {
            final var o = new GetNodeResult();
            o.acceleratorType = acceleratorType;
            o.apiVersion = apiVersion;
            o.cidrBlock = cidrBlock;
            o.createTime = createTime;
            o.description = description;
            o.health = health;
            o.healthDescription = healthDescription;
            o.ipAddress = ipAddress;
            o.labels = labels;
            o.name = name;
            o.network = network;
            o.networkEndpoints = networkEndpoints;
            o.port = port;
            o.schedulingConfig = schedulingConfig;
            o.serviceAccount = serviceAccount;
            o.state = state;
            o.symptoms = symptoms;
            o.tensorflowVersion = tensorflowVersion;
            o.useServiceNetworking = useServiceNetworking;
            return o;
        }
    }
}
