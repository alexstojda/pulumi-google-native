// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2DetectionRuleResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2DictionaryResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2InfoTypeResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2RegexResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2StoredTypeResponse;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2SurrogateTypeResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GooglePrivacyDlpV2CustomInfoTypeResponse {
    /**
     * @return Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
     * 
     */
    private List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules;
    /**
     * @return A list of phrases to detect as a CustomInfoType.
     * 
     */
    private GooglePrivacyDlpV2DictionaryResponse dictionary;
    /**
     * @return If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
     * 
     */
    private String exclusionType;
    /**
     * @return CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
     * 
     */
    private GooglePrivacyDlpV2InfoTypeResponse infoType;
    /**
     * @return Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
     * 
     */
    private String likelihood;
    /**
     * @return Regular expression based CustomInfoType.
     * 
     */
    private GooglePrivacyDlpV2RegexResponse regex;
    /**
     * @return Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
     * 
     */
    private GooglePrivacyDlpV2StoredTypeResponse storedType;
    /**
     * @return Message for detecting output from deidentification transformations that support reversing.
     * 
     */
    private GooglePrivacyDlpV2SurrogateTypeResponse surrogateType;

    private GooglePrivacyDlpV2CustomInfoTypeResponse() {}
    /**
     * @return Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
     * 
     */
    public List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules() {
        return this.detectionRules;
    }
    /**
     * @return A list of phrases to detect as a CustomInfoType.
     * 
     */
    public GooglePrivacyDlpV2DictionaryResponse dictionary() {
        return this.dictionary;
    }
    /**
     * @return If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
     * 
     */
    public String exclusionType() {
        return this.exclusionType;
    }
    /**
     * @return CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
     * 
     */
    public GooglePrivacyDlpV2InfoTypeResponse infoType() {
        return this.infoType;
    }
    /**
     * @return Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
     * 
     */
    public String likelihood() {
        return this.likelihood;
    }
    /**
     * @return Regular expression based CustomInfoType.
     * 
     */
    public GooglePrivacyDlpV2RegexResponse regex() {
        return this.regex;
    }
    /**
     * @return Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
     * 
     */
    public GooglePrivacyDlpV2StoredTypeResponse storedType() {
        return this.storedType;
    }
    /**
     * @return Message for detecting output from deidentification transformations that support reversing.
     * 
     */
    public GooglePrivacyDlpV2SurrogateTypeResponse surrogateType() {
        return this.surrogateType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2CustomInfoTypeResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules;
        private GooglePrivacyDlpV2DictionaryResponse dictionary;
        private String exclusionType;
        private GooglePrivacyDlpV2InfoTypeResponse infoType;
        private String likelihood;
        private GooglePrivacyDlpV2RegexResponse regex;
        private GooglePrivacyDlpV2StoredTypeResponse storedType;
        private GooglePrivacyDlpV2SurrogateTypeResponse surrogateType;
        public Builder() {}
        public Builder(GooglePrivacyDlpV2CustomInfoTypeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.detectionRules = defaults.detectionRules;
    	      this.dictionary = defaults.dictionary;
    	      this.exclusionType = defaults.exclusionType;
    	      this.infoType = defaults.infoType;
    	      this.likelihood = defaults.likelihood;
    	      this.regex = defaults.regex;
    	      this.storedType = defaults.storedType;
    	      this.surrogateType = defaults.surrogateType;
        }

        @CustomType.Setter
        public Builder detectionRules(List<GooglePrivacyDlpV2DetectionRuleResponse> detectionRules) {
            this.detectionRules = Objects.requireNonNull(detectionRules);
            return this;
        }
        public Builder detectionRules(GooglePrivacyDlpV2DetectionRuleResponse... detectionRules) {
            return detectionRules(List.of(detectionRules));
        }
        @CustomType.Setter
        public Builder dictionary(GooglePrivacyDlpV2DictionaryResponse dictionary) {
            this.dictionary = Objects.requireNonNull(dictionary);
            return this;
        }
        @CustomType.Setter
        public Builder exclusionType(String exclusionType) {
            this.exclusionType = Objects.requireNonNull(exclusionType);
            return this;
        }
        @CustomType.Setter
        public Builder infoType(GooglePrivacyDlpV2InfoTypeResponse infoType) {
            this.infoType = Objects.requireNonNull(infoType);
            return this;
        }
        @CustomType.Setter
        public Builder likelihood(String likelihood) {
            this.likelihood = Objects.requireNonNull(likelihood);
            return this;
        }
        @CustomType.Setter
        public Builder regex(GooglePrivacyDlpV2RegexResponse regex) {
            this.regex = Objects.requireNonNull(regex);
            return this;
        }
        @CustomType.Setter
        public Builder storedType(GooglePrivacyDlpV2StoredTypeResponse storedType) {
            this.storedType = Objects.requireNonNull(storedType);
            return this;
        }
        @CustomType.Setter
        public Builder surrogateType(GooglePrivacyDlpV2SurrogateTypeResponse surrogateType) {
            this.surrogateType = Objects.requireNonNull(surrogateType);
            return this;
        }
        public GooglePrivacyDlpV2CustomInfoTypeResponse build() {
            final var o = new GooglePrivacyDlpV2CustomInfoTypeResponse();
            o.detectionRules = detectionRules;
            o.dictionary = dictionary;
            o.exclusionType = exclusionType;
            o.infoType = infoType;
            o.likelihood = likelihood;
            o.regex = regex;
            o.storedType = storedType;
            o.surrogateType = surrogateType;
            return o;
        }
    }
}
