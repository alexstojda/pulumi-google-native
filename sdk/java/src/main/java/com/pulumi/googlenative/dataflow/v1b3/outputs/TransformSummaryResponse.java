// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataflow.v1b3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dataflow.v1b3.outputs.DisplayDataResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TransformSummaryResponse {
    /**
     * @return Transform-specific display data.
     * 
     */
    private List<DisplayDataResponse> displayData;
    /**
     * @return User names for all collection inputs to this transform.
     * 
     */
    private List<String> inputCollectionName;
    /**
     * @return Type of transform.
     * 
     */
    private String kind;
    /**
     * @return User provided name for this transform instance.
     * 
     */
    private String name;
    /**
     * @return User names for all collection outputs to this transform.
     * 
     */
    private List<String> outputCollectionName;

    private TransformSummaryResponse() {}
    /**
     * @return Transform-specific display data.
     * 
     */
    public List<DisplayDataResponse> displayData() {
        return this.displayData;
    }
    /**
     * @return User names for all collection inputs to this transform.
     * 
     */
    public List<String> inputCollectionName() {
        return this.inputCollectionName;
    }
    /**
     * @return Type of transform.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return User provided name for this transform instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return User names for all collection outputs to this transform.
     * 
     */
    public List<String> outputCollectionName() {
        return this.outputCollectionName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformSummaryResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<DisplayDataResponse> displayData;
        private List<String> inputCollectionName;
        private String kind;
        private String name;
        private List<String> outputCollectionName;
        public Builder() {}
        public Builder(TransformSummaryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.displayData = defaults.displayData;
    	      this.inputCollectionName = defaults.inputCollectionName;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.outputCollectionName = defaults.outputCollectionName;
        }

        @CustomType.Setter
        public Builder displayData(List<DisplayDataResponse> displayData) {
            this.displayData = Objects.requireNonNull(displayData);
            return this;
        }
        public Builder displayData(DisplayDataResponse... displayData) {
            return displayData(List.of(displayData));
        }
        @CustomType.Setter
        public Builder inputCollectionName(List<String> inputCollectionName) {
            this.inputCollectionName = Objects.requireNonNull(inputCollectionName);
            return this;
        }
        public Builder inputCollectionName(String... inputCollectionName) {
            return inputCollectionName(List.of(inputCollectionName));
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outputCollectionName(List<String> outputCollectionName) {
            this.outputCollectionName = Objects.requireNonNull(outputCollectionName);
            return this;
        }
        public Builder outputCollectionName(String... outputCollectionName) {
            return outputCollectionName(List.of(outputCollectionName));
        }
        public TransformSummaryResponse build() {
            final var o = new TransformSummaryResponse();
            o.displayData = displayData;
            o.inputCollectionName = inputCollectionName;
            o.kind = kind;
            o.name = name;
            o.outputCollectionName = outputCollectionName;
            return o;
        }
    }
}
