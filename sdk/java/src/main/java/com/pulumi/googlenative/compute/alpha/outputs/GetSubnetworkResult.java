// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.alpha.outputs.SubnetworkLogConfigResponse;
import com.pulumi.googlenative.compute.alpha.outputs.SubnetworkSecondaryRangeResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSubnetworkResult {
    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled. Sets the aggregation interval for collecting flow logs. Increasing the interval time reduces the amount of generated flow logs for long-lasting connections. Default is an interval of 5 seconds per connection. Valid values: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
     * 
     */
    private String aggregationInterval;
    /**
     * @return Whether this subnetwork&#39;s ranges can conflict with existing static routes. Setting this to true allows this subnetwork&#39;s primary and secondary ranges to overlap with (and contain) static routes that have already been configured on the corresponding network. For example if a static route has range 10.1.0.0/16, a subnet range 10.0.0.0/8 could only be created if allow_conflicting_routes=true. Overlapping is only allowed on subnetwork operations; routes whose ranges conflict with this subnetwork&#39;s ranges won&#39;t be allowed unless route.allow_conflicting_subnetworks is set to true. Typically packets destined to IPs within the subnetwork (which may contain private/sensitive data) are prevented from leaving the virtual network. Setting this field to true will disable this feature. The default value is false and applies to all existing subnetworks and automatically created subnetworks. This field cannot be set to true at resource creation time.
     * 
     */
    private Boolean allowSubnetCidrRoutesOverlap;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private String creationTimestamp;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
     * 
     */
    private String description;
    /**
     * @return Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn&#39;t supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     * 
     */
    private Boolean enableFlowLogs;
    /**
     * @return Enables Layer2 communication on the subnetwork.
     * 
     */
    private Boolean enableL2;
    /**
     * @return Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch.
     * 
     * @deprecated
     * Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch.
     * 
     */
    @Deprecated /* Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch. */
    private Boolean enablePrivateV6Access;
    /**
     * @return The external IPv6 address range that is assigned to this subnetwork.
     * 
     */
    private String externalIpv6Prefix;
    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
     * 
     */
    private String fingerprint;
    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
     * 
     */
    private Double flowSampling;
    /**
     * @return The gateway address for default routes to reach destination addresses outside this subnetwork.
     * 
     */
    private String gatewayAddress;
    /**
     * @return The internal IPv6 address range that is assigned to this subnetwork.
     * 
     */
    private String internalIpv6Prefix;
    /**
     * @return The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
     * 
     */
    private String ipCidrRange;
    /**
     * @return The access type of IPv6 address this subnet holds. It&#39;s immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
     * 
     */
    private String ipv6AccessType;
    /**
     * @return This field is for internal use.
     * 
     */
    private String ipv6CidrRange;
    /**
     * @return Type of the resource. Always compute#subnetwork for Subnetwork resources.
     * 
     */
    private String kind;
    /**
     * @return This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging.
     * 
     */
    private SubnetworkLogConfigResponse logConfig;
    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Options are INCLUDE_ALL_METADATA, EXCLUDE_ALL_METADATA, and CUSTOM_METADATA. Default is EXCLUDE_ALL_METADATA.
     * 
     */
    private String metadata;
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private String name;
    /**
     * @return The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time.
     * 
     */
    private String network;
    /**
     * @return Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
     * 
     */
    private Boolean privateIpGoogleAccess;
    /**
     * @return This field is for internal use. This field can be both set at resource creation time and updated using patch.
     * 
     */
    private String privateIpv6GoogleAccess;
    /**
     * @return The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn&#39;t supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     * 
     */
    private String purpose;
    /**
     * @return URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
     * 
     */
    private String region;
    /**
     * @return The URL of the reserved internal range.
     * 
     */
    private String reservedInternalRange;
    /**
     * @return The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     * 
     */
    private String role;
    /**
     * @return An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
     * 
     */
    private List<SubnetworkSecondaryRangeResponse> secondaryIpRanges;
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    private String selfLink;
    /**
     * @return Server-defined URL for this resource with the resource id.
     * 
     */
    private String selfLinkWithId;
    /**
     * @return The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
     * 
     */
    private String stackType;
    /**
     * @return The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
     * 
     */
    private String state;
    /**
     * @return A repeated field indicating the VLAN IDs supported on this subnetwork. During Subnet creation, specifying vlan is valid only if enable_l2 is true. During Subnet Update, specifying vlan is allowed only for l2 enabled subnets. Restricted to only one VLAN.
     * 
     */
    private List<Integer> vlans;

    private GetSubnetworkResult() {}
    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled. Sets the aggregation interval for collecting flow logs. Increasing the interval time reduces the amount of generated flow logs for long-lasting connections. Default is an interval of 5 seconds per connection. Valid values: INTERVAL_5_SEC, INTERVAL_30_SEC, INTERVAL_1_MIN, INTERVAL_5_MIN, INTERVAL_10_MIN, INTERVAL_15_MIN.
     * 
     */
    public String aggregationInterval() {
        return this.aggregationInterval;
    }
    /**
     * @return Whether this subnetwork&#39;s ranges can conflict with existing static routes. Setting this to true allows this subnetwork&#39;s primary and secondary ranges to overlap with (and contain) static routes that have already been configured on the corresponding network. For example if a static route has range 10.1.0.0/16, a subnet range 10.0.0.0/8 could only be created if allow_conflicting_routes=true. Overlapping is only allowed on subnetwork operations; routes whose ranges conflict with this subnetwork&#39;s ranges won&#39;t be allowed unless route.allow_conflicting_subnetworks is set to true. Typically packets destined to IPs within the subnetwork (which may contain private/sensitive data) are prevented from leaving the virtual network. Setting this field to true will disable this feature. The default value is false and applies to all existing subnetworks and automatically created subnetworks. This field cannot be set to true at resource creation time.
     * 
     */
    public Boolean allowSubnetCidrRoutesOverlap() {
        return this.allowSubnetCidrRoutesOverlap;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn&#39;t supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     * 
     */
    public Boolean enableFlowLogs() {
        return this.enableFlowLogs;
    }
    /**
     * @return Enables Layer2 communication on the subnetwork.
     * 
     */
    public Boolean enableL2() {
        return this.enableL2;
    }
    /**
     * @return Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch.
     * 
     * @deprecated
     * Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch.
     * 
     */
    @Deprecated /* Deprecated in favor of enable in PrivateIpv6GoogleAccess. Whether the VMs in this subnet can directly access Google services via internal IPv6 addresses. This field can be both set at resource creation time and updated using patch. */
    public Boolean enablePrivateV6Access() {
        return this.enablePrivateV6Access;
    }
    /**
     * @return The external IPv6 address range that is assigned to this subnetwork.
     * 
     */
    public String externalIpv6Prefix() {
        return this.externalIpv6Prefix;
    }
    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
     * 
     */
    public Double flowSampling() {
        return this.flowSampling;
    }
    /**
     * @return The gateway address for default routes to reach destination addresses outside this subnetwork.
     * 
     */
    public String gatewayAddress() {
        return this.gatewayAddress;
    }
    /**
     * @return The internal IPv6 address range that is assigned to this subnetwork.
     * 
     */
    public String internalIpv6Prefix() {
        return this.internalIpv6Prefix;
    }
    /**
     * @return The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
     * 
     */
    public String ipCidrRange() {
        return this.ipCidrRange;
    }
    /**
     * @return The access type of IPv6 address this subnet holds. It&#39;s immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
     * 
     */
    public String ipv6AccessType() {
        return this.ipv6AccessType;
    }
    /**
     * @return This field is for internal use.
     * 
     */
    public String ipv6CidrRange() {
        return this.ipv6CidrRange;
    }
    /**
     * @return Type of the resource. Always compute#subnetwork for Subnetwork resources.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging.
     * 
     */
    public SubnetworkLogConfigResponse logConfig() {
        return this.logConfig;
    }
    /**
     * @return Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Options are INCLUDE_ALL_METADATA, EXCLUDE_ALL_METADATA, and CUSTOM_METADATA. Default is EXCLUDE_ALL_METADATA.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
     * 
     */
    public Boolean privateIpGoogleAccess() {
        return this.privateIpGoogleAccess;
    }
    /**
     * @return This field is for internal use. This field can be both set at resource creation time and updated using patch.
     * 
     */
    public String privateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }
    /**
     * @return The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn&#39;t supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The URL of the reserved internal range.
     * 
     */
    public String reservedInternalRange() {
        return this.reservedInternalRange;
    }
    /**
     * @return The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
     * 
     */
    public List<SubnetworkSecondaryRangeResponse> secondaryIpRanges() {
        return this.secondaryIpRanges;
    }
    /**
     * @return Server-defined URL for the resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return Server-defined URL for this resource with the resource id.
     * 
     */
    public String selfLinkWithId() {
        return this.selfLinkWithId;
    }
    /**
     * @return The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A repeated field indicating the VLAN IDs supported on this subnetwork. During Subnet creation, specifying vlan is valid only if enable_l2 is true. During Subnet Update, specifying vlan is allowed only for l2 enabled subnets. Restricted to only one VLAN.
     * 
     */
    public List<Integer> vlans() {
        return this.vlans;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aggregationInterval;
        private Boolean allowSubnetCidrRoutesOverlap;
        private String creationTimestamp;
        private String description;
        private Boolean enableFlowLogs;
        private Boolean enableL2;
        private Boolean enablePrivateV6Access;
        private String externalIpv6Prefix;
        private String fingerprint;
        private Double flowSampling;
        private String gatewayAddress;
        private String internalIpv6Prefix;
        private String ipCidrRange;
        private String ipv6AccessType;
        private String ipv6CidrRange;
        private String kind;
        private SubnetworkLogConfigResponse logConfig;
        private String metadata;
        private String name;
        private String network;
        private Boolean privateIpGoogleAccess;
        private String privateIpv6GoogleAccess;
        private String purpose;
        private String region;
        private String reservedInternalRange;
        private String role;
        private List<SubnetworkSecondaryRangeResponse> secondaryIpRanges;
        private String selfLink;
        private String selfLinkWithId;
        private String stackType;
        private String state;
        private List<Integer> vlans;
        public Builder() {}
        public Builder(GetSubnetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregationInterval = defaults.aggregationInterval;
    	      this.allowSubnetCidrRoutesOverlap = defaults.allowSubnetCidrRoutesOverlap;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.enableFlowLogs = defaults.enableFlowLogs;
    	      this.enableL2 = defaults.enableL2;
    	      this.enablePrivateV6Access = defaults.enablePrivateV6Access;
    	      this.externalIpv6Prefix = defaults.externalIpv6Prefix;
    	      this.fingerprint = defaults.fingerprint;
    	      this.flowSampling = defaults.flowSampling;
    	      this.gatewayAddress = defaults.gatewayAddress;
    	      this.internalIpv6Prefix = defaults.internalIpv6Prefix;
    	      this.ipCidrRange = defaults.ipCidrRange;
    	      this.ipv6AccessType = defaults.ipv6AccessType;
    	      this.ipv6CidrRange = defaults.ipv6CidrRange;
    	      this.kind = defaults.kind;
    	      this.logConfig = defaults.logConfig;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.privateIpGoogleAccess = defaults.privateIpGoogleAccess;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.purpose = defaults.purpose;
    	      this.region = defaults.region;
    	      this.reservedInternalRange = defaults.reservedInternalRange;
    	      this.role = defaults.role;
    	      this.secondaryIpRanges = defaults.secondaryIpRanges;
    	      this.selfLink = defaults.selfLink;
    	      this.selfLinkWithId = defaults.selfLinkWithId;
    	      this.stackType = defaults.stackType;
    	      this.state = defaults.state;
    	      this.vlans = defaults.vlans;
        }

        @CustomType.Setter
        public Builder aggregationInterval(String aggregationInterval) {
            this.aggregationInterval = Objects.requireNonNull(aggregationInterval);
            return this;
        }
        @CustomType.Setter
        public Builder allowSubnetCidrRoutesOverlap(Boolean allowSubnetCidrRoutesOverlap) {
            this.allowSubnetCidrRoutesOverlap = Objects.requireNonNull(allowSubnetCidrRoutesOverlap);
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder enableFlowLogs(Boolean enableFlowLogs) {
            this.enableFlowLogs = Objects.requireNonNull(enableFlowLogs);
            return this;
        }
        @CustomType.Setter
        public Builder enableL2(Boolean enableL2) {
            this.enableL2 = Objects.requireNonNull(enableL2);
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateV6Access(Boolean enablePrivateV6Access) {
            this.enablePrivateV6Access = Objects.requireNonNull(enablePrivateV6Access);
            return this;
        }
        @CustomType.Setter
        public Builder externalIpv6Prefix(String externalIpv6Prefix) {
            this.externalIpv6Prefix = Objects.requireNonNull(externalIpv6Prefix);
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Objects.requireNonNull(fingerprint);
            return this;
        }
        @CustomType.Setter
        public Builder flowSampling(Double flowSampling) {
            this.flowSampling = Objects.requireNonNull(flowSampling);
            return this;
        }
        @CustomType.Setter
        public Builder gatewayAddress(String gatewayAddress) {
            this.gatewayAddress = Objects.requireNonNull(gatewayAddress);
            return this;
        }
        @CustomType.Setter
        public Builder internalIpv6Prefix(String internalIpv6Prefix) {
            this.internalIpv6Prefix = Objects.requireNonNull(internalIpv6Prefix);
            return this;
        }
        @CustomType.Setter
        public Builder ipCidrRange(String ipCidrRange) {
            this.ipCidrRange = Objects.requireNonNull(ipCidrRange);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AccessType(String ipv6AccessType) {
            this.ipv6AccessType = Objects.requireNonNull(ipv6AccessType);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrRange(String ipv6CidrRange) {
            this.ipv6CidrRange = Objects.requireNonNull(ipv6CidrRange);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder logConfig(SubnetworkLogConfigResponse logConfig) {
            this.logConfig = Objects.requireNonNull(logConfig);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder privateIpGoogleAccess(Boolean privateIpGoogleAccess) {
            this.privateIpGoogleAccess = Objects.requireNonNull(privateIpGoogleAccess);
            return this;
        }
        @CustomType.Setter
        public Builder privateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            this.privateIpv6GoogleAccess = Objects.requireNonNull(privateIpv6GoogleAccess);
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder reservedInternalRange(String reservedInternalRange) {
            this.reservedInternalRange = Objects.requireNonNull(reservedInternalRange);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpRanges(List<SubnetworkSecondaryRangeResponse> secondaryIpRanges) {
            this.secondaryIpRanges = Objects.requireNonNull(secondaryIpRanges);
            return this;
        }
        public Builder secondaryIpRanges(SubnetworkSecondaryRangeResponse... secondaryIpRanges) {
            return secondaryIpRanges(List.of(secondaryIpRanges));
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder selfLinkWithId(String selfLinkWithId) {
            this.selfLinkWithId = Objects.requireNonNull(selfLinkWithId);
            return this;
        }
        @CustomType.Setter
        public Builder stackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder vlans(List<Integer> vlans) {
            this.vlans = Objects.requireNonNull(vlans);
            return this;
        }
        public Builder vlans(Integer... vlans) {
            return vlans(List.of(vlans));
        }
        public GetSubnetworkResult build() {
            final var o = new GetSubnetworkResult();
            o.aggregationInterval = aggregationInterval;
            o.allowSubnetCidrRoutesOverlap = allowSubnetCidrRoutesOverlap;
            o.creationTimestamp = creationTimestamp;
            o.description = description;
            o.enableFlowLogs = enableFlowLogs;
            o.enableL2 = enableL2;
            o.enablePrivateV6Access = enablePrivateV6Access;
            o.externalIpv6Prefix = externalIpv6Prefix;
            o.fingerprint = fingerprint;
            o.flowSampling = flowSampling;
            o.gatewayAddress = gatewayAddress;
            o.internalIpv6Prefix = internalIpv6Prefix;
            o.ipCidrRange = ipCidrRange;
            o.ipv6AccessType = ipv6AccessType;
            o.ipv6CidrRange = ipv6CidrRange;
            o.kind = kind;
            o.logConfig = logConfig;
            o.metadata = metadata;
            o.name = name;
            o.network = network;
            o.privateIpGoogleAccess = privateIpGoogleAccess;
            o.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            o.purpose = purpose;
            o.region = region;
            o.reservedInternalRange = reservedInternalRange;
            o.role = role;
            o.secondaryIpRanges = secondaryIpRanges;
            o.selfLink = selfLink;
            o.selfLinkWithId = selfLinkWithId;
            o.stackType = stackType;
            o.state = state;
            o.vlans = vlans;
            return o;
        }
    }
}
