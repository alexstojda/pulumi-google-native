// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1.outputs.CVSSResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.PackageIssueResponse;
import com.pulumi.googlenative.containeranalysis.v1.outputs.RelatedUrlResponse;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class VulnerabilityOccurrenceResponse {
    /**
     * @return The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    private Double cvssScore;
    /**
     * @return The cvss v3 score for the vulnerability.
     * 
     */
    private CVSSResponse cvssv3;
    /**
     * @return The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    private String effectiveSeverity;
    /**
     * @return Whether at least one of the affected packages has a fix available.
     * 
     */
    private Boolean fixAvailable;
    /**
     * @return A detailed description of this vulnerability.
     * 
     */
    private String longDescription;
    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    private List<PackageIssueResponse> packageIssue;
    /**
     * @return URLs related to this vulnerability.
     * 
     */
    private List<RelatedUrlResponse> relatedUrls;
    /**
     * @return The note provider assigned severity of this vulnerability.
     * 
     */
    private String severity;
    /**
     * @return A one sentence description of this vulnerability.
     * 
     */
    private String shortDescription;
    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    private String type;

    private VulnerabilityOccurrenceResponse() {}
    /**
     * @return The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     * 
     */
    public Double cvssScore() {
        return this.cvssScore;
    }
    /**
     * @return The cvss v3 score for the vulnerability.
     * 
     */
    public CVSSResponse cvssv3() {
        return this.cvssv3;
    }
    /**
     * @return The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     * 
     */
    public String effectiveSeverity() {
        return this.effectiveSeverity;
    }
    /**
     * @return Whether at least one of the affected packages has a fix available.
     * 
     */
    public Boolean fixAvailable() {
        return this.fixAvailable;
    }
    /**
     * @return A detailed description of this vulnerability.
     * 
     */
    public String longDescription() {
        return this.longDescription;
    }
    /**
     * @return The set of affected locations and their fixes (if available) within the associated resource.
     * 
     */
    public List<PackageIssueResponse> packageIssue() {
        return this.packageIssue;
    }
    /**
     * @return URLs related to this vulnerability.
     * 
     */
    public List<RelatedUrlResponse> relatedUrls() {
        return this.relatedUrls;
    }
    /**
     * @return The note provider assigned severity of this vulnerability.
     * 
     */
    public String severity() {
        return this.severity;
    }
    /**
     * @return A one sentence description of this vulnerability.
     * 
     */
    public String shortDescription() {
        return this.shortDescription;
    }
    /**
     * @return The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VulnerabilityOccurrenceResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double cvssScore;
        private CVSSResponse cvssv3;
        private String effectiveSeverity;
        private Boolean fixAvailable;
        private String longDescription;
        private List<PackageIssueResponse> packageIssue;
        private List<RelatedUrlResponse> relatedUrls;
        private String severity;
        private String shortDescription;
        private String type;
        public Builder() {}
        public Builder(VulnerabilityOccurrenceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cvssScore = defaults.cvssScore;
    	      this.cvssv3 = defaults.cvssv3;
    	      this.effectiveSeverity = defaults.effectiveSeverity;
    	      this.fixAvailable = defaults.fixAvailable;
    	      this.longDescription = defaults.longDescription;
    	      this.packageIssue = defaults.packageIssue;
    	      this.relatedUrls = defaults.relatedUrls;
    	      this.severity = defaults.severity;
    	      this.shortDescription = defaults.shortDescription;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cvssScore(Double cvssScore) {
            this.cvssScore = Objects.requireNonNull(cvssScore);
            return this;
        }
        @CustomType.Setter
        public Builder cvssv3(CVSSResponse cvssv3) {
            this.cvssv3 = Objects.requireNonNull(cvssv3);
            return this;
        }
        @CustomType.Setter
        public Builder effectiveSeverity(String effectiveSeverity) {
            this.effectiveSeverity = Objects.requireNonNull(effectiveSeverity);
            return this;
        }
        @CustomType.Setter
        public Builder fixAvailable(Boolean fixAvailable) {
            this.fixAvailable = Objects.requireNonNull(fixAvailable);
            return this;
        }
        @CustomType.Setter
        public Builder longDescription(String longDescription) {
            this.longDescription = Objects.requireNonNull(longDescription);
            return this;
        }
        @CustomType.Setter
        public Builder packageIssue(List<PackageIssueResponse> packageIssue) {
            this.packageIssue = Objects.requireNonNull(packageIssue);
            return this;
        }
        public Builder packageIssue(PackageIssueResponse... packageIssue) {
            return packageIssue(List.of(packageIssue));
        }
        @CustomType.Setter
        public Builder relatedUrls(List<RelatedUrlResponse> relatedUrls) {
            this.relatedUrls = Objects.requireNonNull(relatedUrls);
            return this;
        }
        public Builder relatedUrls(RelatedUrlResponse... relatedUrls) {
            return relatedUrls(List.of(relatedUrls));
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }
        @CustomType.Setter
        public Builder shortDescription(String shortDescription) {
            this.shortDescription = Objects.requireNonNull(shortDescription);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public VulnerabilityOccurrenceResponse build() {
            final var o = new VulnerabilityOccurrenceResponse();
            o.cvssScore = cvssScore;
            o.cvssv3 = cvssv3;
            o.effectiveSeverity = effectiveSeverity;
            o.fixAvailable = fixAvailable;
            o.longDescription = longDescription;
            o.packageIssue = packageIssue;
            o.relatedUrls = relatedUrls;
            o.severity = severity;
            o.shortDescription = shortDescription;
            o.type = type;
            return o;
        }
    }
}
