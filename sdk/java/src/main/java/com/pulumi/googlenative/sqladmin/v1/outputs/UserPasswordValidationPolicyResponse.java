// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.sqladmin.v1.outputs.PasswordStatusResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class UserPasswordValidationPolicyResponse {
    /**
     * @return Number of failed login attempts allowed before user get locked.
     * 
     */
    private Integer allowedFailedAttempts;
    /**
     * @return If true, failed login attempts check will be enabled.
     * 
     */
    private Boolean enableFailedAttemptsCheck;
    /**
     * @return If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     * 
     */
    private Boolean enablePasswordVerification;
    /**
     * @return Expiration duration after password is updated.
     * 
     */
    private String passwordExpirationDuration;
    /**
     * @return Read-only password status.
     * 
     */
    private PasswordStatusResponse status;

    private UserPasswordValidationPolicyResponse() {}
    /**
     * @return Number of failed login attempts allowed before user get locked.
     * 
     */
    public Integer allowedFailedAttempts() {
        return this.allowedFailedAttempts;
    }
    /**
     * @return If true, failed login attempts check will be enabled.
     * 
     */
    public Boolean enableFailedAttemptsCheck() {
        return this.enableFailedAttemptsCheck;
    }
    /**
     * @return If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     * 
     */
    public Boolean enablePasswordVerification() {
        return this.enablePasswordVerification;
    }
    /**
     * @return Expiration duration after password is updated.
     * 
     */
    public String passwordExpirationDuration() {
        return this.passwordExpirationDuration;
    }
    /**
     * @return Read-only password status.
     * 
     */
    public PasswordStatusResponse status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserPasswordValidationPolicyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer allowedFailedAttempts;
        private Boolean enableFailedAttemptsCheck;
        private Boolean enablePasswordVerification;
        private String passwordExpirationDuration;
        private PasswordStatusResponse status;
        public Builder() {}
        public Builder(UserPasswordValidationPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedFailedAttempts = defaults.allowedFailedAttempts;
    	      this.enableFailedAttemptsCheck = defaults.enableFailedAttemptsCheck;
    	      this.enablePasswordVerification = defaults.enablePasswordVerification;
    	      this.passwordExpirationDuration = defaults.passwordExpirationDuration;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder allowedFailedAttempts(Integer allowedFailedAttempts) {
            this.allowedFailedAttempts = Objects.requireNonNull(allowedFailedAttempts);
            return this;
        }
        @CustomType.Setter
        public Builder enableFailedAttemptsCheck(Boolean enableFailedAttemptsCheck) {
            this.enableFailedAttemptsCheck = Objects.requireNonNull(enableFailedAttemptsCheck);
            return this;
        }
        @CustomType.Setter
        public Builder enablePasswordVerification(Boolean enablePasswordVerification) {
            this.enablePasswordVerification = Objects.requireNonNull(enablePasswordVerification);
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpirationDuration(String passwordExpirationDuration) {
            this.passwordExpirationDuration = Objects.requireNonNull(passwordExpirationDuration);
            return this;
        }
        @CustomType.Setter
        public Builder status(PasswordStatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public UserPasswordValidationPolicyResponse build() {
            final var o = new UserPasswordValidationPolicyResponse();
            o.allowedFailedAttempts = allowedFailedAttempts;
            o.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
            o.enablePasswordVerification = enablePasswordVerification;
            o.passwordExpirationDuration = passwordExpirationDuration;
            o.status = status;
            return o;
        }
    }
}
