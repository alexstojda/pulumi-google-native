// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.containeranalysis.v1beta1.outputs.AnalysisCompletedResponse;
import com.pulumi.googlenative.containeranalysis.v1beta1.outputs.StatusResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DiscoveredResponse {
    private AnalysisCompletedResponse analysisCompleted;
    /**
     * @return Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
     * 
     */
    private List<StatusResponse> analysisError;
    /**
     * @return The status of discovery for the resource.
     * 
     */
    private String analysisStatus;
    /**
     * @return When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     * 
     */
    private StatusResponse analysisStatusError;
    /**
     * @return Whether the resource is continuously analyzed.
     * 
     */
    private String continuousAnalysis;
    /**
     * @return The last time continuous analysis was done for this resource. Deprecated, do not use.
     * 
     * @deprecated
     * The last time continuous analysis was done for this resource. Deprecated, do not use.
     * 
     */
    @Deprecated /* The last time continuous analysis was done for this resource. Deprecated, do not use. */
    private String lastAnalysisTime;

    private DiscoveredResponse() {}
    public AnalysisCompletedResponse analysisCompleted() {
        return this.analysisCompleted;
    }
    /**
     * @return Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
     * 
     */
    public List<StatusResponse> analysisError() {
        return this.analysisError;
    }
    /**
     * @return The status of discovery for the resource.
     * 
     */
    public String analysisStatus() {
        return this.analysisStatus;
    }
    /**
     * @return When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     * 
     */
    public StatusResponse analysisStatusError() {
        return this.analysisStatusError;
    }
    /**
     * @return Whether the resource is continuously analyzed.
     * 
     */
    public String continuousAnalysis() {
        return this.continuousAnalysis;
    }
    /**
     * @return The last time continuous analysis was done for this resource. Deprecated, do not use.
     * 
     * @deprecated
     * The last time continuous analysis was done for this resource. Deprecated, do not use.
     * 
     */
    @Deprecated /* The last time continuous analysis was done for this resource. Deprecated, do not use. */
    public String lastAnalysisTime() {
        return this.lastAnalysisTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiscoveredResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private AnalysisCompletedResponse analysisCompleted;
        private List<StatusResponse> analysisError;
        private String analysisStatus;
        private StatusResponse analysisStatusError;
        private String continuousAnalysis;
        private String lastAnalysisTime;
        public Builder() {}
        public Builder(DiscoveredResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analysisCompleted = defaults.analysisCompleted;
    	      this.analysisError = defaults.analysisError;
    	      this.analysisStatus = defaults.analysisStatus;
    	      this.analysisStatusError = defaults.analysisStatusError;
    	      this.continuousAnalysis = defaults.continuousAnalysis;
    	      this.lastAnalysisTime = defaults.lastAnalysisTime;
        }

        @CustomType.Setter
        public Builder analysisCompleted(AnalysisCompletedResponse analysisCompleted) {
            this.analysisCompleted = Objects.requireNonNull(analysisCompleted);
            return this;
        }
        @CustomType.Setter
        public Builder analysisError(List<StatusResponse> analysisError) {
            this.analysisError = Objects.requireNonNull(analysisError);
            return this;
        }
        public Builder analysisError(StatusResponse... analysisError) {
            return analysisError(List.of(analysisError));
        }
        @CustomType.Setter
        public Builder analysisStatus(String analysisStatus) {
            this.analysisStatus = Objects.requireNonNull(analysisStatus);
            return this;
        }
        @CustomType.Setter
        public Builder analysisStatusError(StatusResponse analysisStatusError) {
            this.analysisStatusError = Objects.requireNonNull(analysisStatusError);
            return this;
        }
        @CustomType.Setter
        public Builder continuousAnalysis(String continuousAnalysis) {
            this.continuousAnalysis = Objects.requireNonNull(continuousAnalysis);
            return this;
        }
        @CustomType.Setter
        public Builder lastAnalysisTime(String lastAnalysisTime) {
            this.lastAnalysisTime = Objects.requireNonNull(lastAnalysisTime);
            return this;
        }
        public DiscoveredResponse build() {
            final var o = new DiscoveredResponse();
            o.analysisCompleted = analysisCompleted;
            o.analysisError = analysisError;
            o.analysisStatus = analysisStatus;
            o.analysisStatusError = analysisStatusError;
            o.continuousAnalysis = continuousAnalysis;
            o.lastAnalysisTime = lastAnalysisTime;
            return o;
        }
    }
}
