// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storage.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.storage.v1.outputs.BucketAccessControlResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketAutoclassResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketBillingResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketCorsItemResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketCustomPlacementConfigResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketEncryptionResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketIamConfigurationResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketLifecycleResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketLoggingResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketOwnerResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketRetentionPolicyResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketVersioningResponse;
import com.pulumi.googlenative.storage.v1.outputs.BucketWebsiteResponse;
import com.pulumi.googlenative.storage.v1.outputs.ObjectAccessControlResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetBucketResult {
    /**
     * @return Access controls on the bucket.
     * 
     */
    private List<BucketAccessControlResponse> acl;
    /**
     * @return The bucket&#39;s Autoclass configuration.
     * 
     */
    private BucketAutoclassResponse autoclass;
    /**
     * @return The bucket&#39;s billing configuration.
     * 
     */
    private BucketBillingResponse billing;
    /**
     * @return The bucket&#39;s Cross-Origin Resource Sharing (CORS) configuration.
     * 
     */
    private List<BucketCorsItemResponse> cors;
    /**
     * @return The bucket&#39;s custom placement configuration for Custom Dual Regions.
     * 
     */
    private BucketCustomPlacementConfigResponse customPlacementConfig;
    /**
     * @return The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold&#39;s release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
     * 
     */
    private Boolean defaultEventBasedHold;
    /**
     * @return Default access controls to apply to new objects when no ACL is provided.
     * 
     */
    private List<ObjectAccessControlResponse> defaultObjectAcl;
    /**
     * @return Encryption configuration for a bucket.
     * 
     */
    private BucketEncryptionResponse encryption;
    /**
     * @return HTTP 1.1 Entity tag for the bucket.
     * 
     */
    private String etag;
    /**
     * @return The bucket&#39;s IAM configuration.
     * 
     */
    private BucketIamConfigurationResponse iamConfiguration;
    /**
     * @return The kind of item this is. For buckets, this is always storage#bucket.
     * 
     */
    private String kind;
    /**
     * @return User-provided labels, in key/value pairs.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return The bucket&#39;s lifecycle configuration. See lifecycle management for more information.
     * 
     */
    private BucketLifecycleResponse lifecycle;
    /**
     * @return The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer&#39;s guide for the authoritative list.
     * 
     */
    private String location;
    /**
     * @return The type of the bucket location.
     * 
     */
    private String locationType;
    /**
     * @return The bucket&#39;s logging configuration, which defines the destination bucket and optional name prefix for the current bucket&#39;s logs.
     * 
     */
    private BucketLoggingResponse logging;
    /**
     * @return The metadata generation of this bucket.
     * 
     */
    private String metageneration;
    /**
     * @return The name of the bucket.
     * 
     */
    private String name;
    /**
     * @return The owner of the bucket. This is always the project team&#39;s owner group.
     * 
     */
    private BucketOwnerResponse owner;
    /**
     * @return The project number of the project the bucket belongs to.
     * 
     */
    private String projectNumber;
    /**
     * @return The bucket&#39;s retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     * 
     */
    private BucketRetentionPolicyResponse retentionPolicy;
    /**
     * @return The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
     * 
     */
    private String rpo;
    /**
     * @return Reserved for future use.
     * 
     */
    private Boolean satisfiesPZS;
    /**
     * @return The URI of this bucket.
     * 
     */
    private String selfLink;
    /**
     * @return The bucket&#39;s default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
     * 
     */
    private String storageClass;
    /**
     * @return The creation time of the bucket in RFC 3339 format.
     * 
     */
    private String timeCreated;
    /**
     * @return The modification time of the bucket in RFC 3339 format.
     * 
     */
    private String updated;
    /**
     * @return The bucket&#39;s versioning configuration.
     * 
     */
    private BucketVersioningResponse versioning;
    /**
     * @return The bucket&#39;s website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
     * 
     */
    private BucketWebsiteResponse website;

    private GetBucketResult() {}
    /**
     * @return Access controls on the bucket.
     * 
     */
    public List<BucketAccessControlResponse> acl() {
        return this.acl;
    }
    /**
     * @return The bucket&#39;s Autoclass configuration.
     * 
     */
    public BucketAutoclassResponse autoclass() {
        return this.autoclass;
    }
    /**
     * @return The bucket&#39;s billing configuration.
     * 
     */
    public BucketBillingResponse billing() {
        return this.billing;
    }
    /**
     * @return The bucket&#39;s Cross-Origin Resource Sharing (CORS) configuration.
     * 
     */
    public List<BucketCorsItemResponse> cors() {
        return this.cors;
    }
    /**
     * @return The bucket&#39;s custom placement configuration for Custom Dual Regions.
     * 
     */
    public BucketCustomPlacementConfigResponse customPlacementConfig() {
        return this.customPlacementConfig;
    }
    /**
     * @return The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold&#39;s release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
     * 
     */
    public Boolean defaultEventBasedHold() {
        return this.defaultEventBasedHold;
    }
    /**
     * @return Default access controls to apply to new objects when no ACL is provided.
     * 
     */
    public List<ObjectAccessControlResponse> defaultObjectAcl() {
        return this.defaultObjectAcl;
    }
    /**
     * @return Encryption configuration for a bucket.
     * 
     */
    public BucketEncryptionResponse encryption() {
        return this.encryption;
    }
    /**
     * @return HTTP 1.1 Entity tag for the bucket.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The bucket&#39;s IAM configuration.
     * 
     */
    public BucketIamConfigurationResponse iamConfiguration() {
        return this.iamConfiguration;
    }
    /**
     * @return The kind of item this is. For buckets, this is always storage#bucket.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return User-provided labels, in key/value pairs.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return The bucket&#39;s lifecycle configuration. See lifecycle management for more information.
     * 
     */
    public BucketLifecycleResponse lifecycle() {
        return this.lifecycle;
    }
    /**
     * @return The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer&#39;s guide for the authoritative list.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The type of the bucket location.
     * 
     */
    public String locationType() {
        return this.locationType;
    }
    /**
     * @return The bucket&#39;s logging configuration, which defines the destination bucket and optional name prefix for the current bucket&#39;s logs.
     * 
     */
    public BucketLoggingResponse logging() {
        return this.logging;
    }
    /**
     * @return The metadata generation of this bucket.
     * 
     */
    public String metageneration() {
        return this.metageneration;
    }
    /**
     * @return The name of the bucket.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The owner of the bucket. This is always the project team&#39;s owner group.
     * 
     */
    public BucketOwnerResponse owner() {
        return this.owner;
    }
    /**
     * @return The project number of the project the bucket belongs to.
     * 
     */
    public String projectNumber() {
        return this.projectNumber;
    }
    /**
     * @return The bucket&#39;s retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     * 
     */
    public BucketRetentionPolicyResponse retentionPolicy() {
        return this.retentionPolicy;
    }
    /**
     * @return The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
     * 
     */
    public String rpo() {
        return this.rpo;
    }
    /**
     * @return Reserved for future use.
     * 
     */
    public Boolean satisfiesPZS() {
        return this.satisfiesPZS;
    }
    /**
     * @return The URI of this bucket.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return The bucket&#39;s default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
     * 
     */
    public String storageClass() {
        return this.storageClass;
    }
    /**
     * @return The creation time of the bucket in RFC 3339 format.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The modification time of the bucket in RFC 3339 format.
     * 
     */
    public String updated() {
        return this.updated;
    }
    /**
     * @return The bucket&#39;s versioning configuration.
     * 
     */
    public BucketVersioningResponse versioning() {
        return this.versioning;
    }
    /**
     * @return The bucket&#39;s website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
     * 
     */
    public BucketWebsiteResponse website() {
        return this.website;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<BucketAccessControlResponse> acl;
        private BucketAutoclassResponse autoclass;
        private BucketBillingResponse billing;
        private List<BucketCorsItemResponse> cors;
        private BucketCustomPlacementConfigResponse customPlacementConfig;
        private Boolean defaultEventBasedHold;
        private List<ObjectAccessControlResponse> defaultObjectAcl;
        private BucketEncryptionResponse encryption;
        private String etag;
        private BucketIamConfigurationResponse iamConfiguration;
        private String kind;
        private Map<String,String> labels;
        private BucketLifecycleResponse lifecycle;
        private String location;
        private String locationType;
        private BucketLoggingResponse logging;
        private String metageneration;
        private String name;
        private BucketOwnerResponse owner;
        private String projectNumber;
        private BucketRetentionPolicyResponse retentionPolicy;
        private String rpo;
        private Boolean satisfiesPZS;
        private String selfLink;
        private String storageClass;
        private String timeCreated;
        private String updated;
        private BucketVersioningResponse versioning;
        private BucketWebsiteResponse website;
        public Builder() {}
        public Builder(GetBucketResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.autoclass = defaults.autoclass;
    	      this.billing = defaults.billing;
    	      this.cors = defaults.cors;
    	      this.customPlacementConfig = defaults.customPlacementConfig;
    	      this.defaultEventBasedHold = defaults.defaultEventBasedHold;
    	      this.defaultObjectAcl = defaults.defaultObjectAcl;
    	      this.encryption = defaults.encryption;
    	      this.etag = defaults.etag;
    	      this.iamConfiguration = defaults.iamConfiguration;
    	      this.kind = defaults.kind;
    	      this.labels = defaults.labels;
    	      this.lifecycle = defaults.lifecycle;
    	      this.location = defaults.location;
    	      this.locationType = defaults.locationType;
    	      this.logging = defaults.logging;
    	      this.metageneration = defaults.metageneration;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.projectNumber = defaults.projectNumber;
    	      this.retentionPolicy = defaults.retentionPolicy;
    	      this.rpo = defaults.rpo;
    	      this.satisfiesPZS = defaults.satisfiesPZS;
    	      this.selfLink = defaults.selfLink;
    	      this.storageClass = defaults.storageClass;
    	      this.timeCreated = defaults.timeCreated;
    	      this.updated = defaults.updated;
    	      this.versioning = defaults.versioning;
    	      this.website = defaults.website;
        }

        @CustomType.Setter
        public Builder acl(List<BucketAccessControlResponse> acl) {
            this.acl = Objects.requireNonNull(acl);
            return this;
        }
        public Builder acl(BucketAccessControlResponse... acl) {
            return acl(List.of(acl));
        }
        @CustomType.Setter
        public Builder autoclass(BucketAutoclassResponse autoclass) {
            this.autoclass = Objects.requireNonNull(autoclass);
            return this;
        }
        @CustomType.Setter
        public Builder billing(BucketBillingResponse billing) {
            this.billing = Objects.requireNonNull(billing);
            return this;
        }
        @CustomType.Setter
        public Builder cors(List<BucketCorsItemResponse> cors) {
            this.cors = Objects.requireNonNull(cors);
            return this;
        }
        public Builder cors(BucketCorsItemResponse... cors) {
            return cors(List.of(cors));
        }
        @CustomType.Setter
        public Builder customPlacementConfig(BucketCustomPlacementConfigResponse customPlacementConfig) {
            this.customPlacementConfig = Objects.requireNonNull(customPlacementConfig);
            return this;
        }
        @CustomType.Setter
        public Builder defaultEventBasedHold(Boolean defaultEventBasedHold) {
            this.defaultEventBasedHold = Objects.requireNonNull(defaultEventBasedHold);
            return this;
        }
        @CustomType.Setter
        public Builder defaultObjectAcl(List<ObjectAccessControlResponse> defaultObjectAcl) {
            this.defaultObjectAcl = Objects.requireNonNull(defaultObjectAcl);
            return this;
        }
        public Builder defaultObjectAcl(ObjectAccessControlResponse... defaultObjectAcl) {
            return defaultObjectAcl(List.of(defaultObjectAcl));
        }
        @CustomType.Setter
        public Builder encryption(BucketEncryptionResponse encryption) {
            this.encryption = Objects.requireNonNull(encryption);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder iamConfiguration(BucketIamConfigurationResponse iamConfiguration) {
            this.iamConfiguration = Objects.requireNonNull(iamConfiguration);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder lifecycle(BucketLifecycleResponse lifecycle) {
            this.lifecycle = Objects.requireNonNull(lifecycle);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder locationType(String locationType) {
            this.locationType = Objects.requireNonNull(locationType);
            return this;
        }
        @CustomType.Setter
        public Builder logging(BucketLoggingResponse logging) {
            this.logging = Objects.requireNonNull(logging);
            return this;
        }
        @CustomType.Setter
        public Builder metageneration(String metageneration) {
            this.metageneration = Objects.requireNonNull(metageneration);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder owner(BucketOwnerResponse owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        @CustomType.Setter
        public Builder projectNumber(String projectNumber) {
            this.projectNumber = Objects.requireNonNull(projectNumber);
            return this;
        }
        @CustomType.Setter
        public Builder retentionPolicy(BucketRetentionPolicyResponse retentionPolicy) {
            this.retentionPolicy = Objects.requireNonNull(retentionPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder rpo(String rpo) {
            this.rpo = Objects.requireNonNull(rpo);
            return this;
        }
        @CustomType.Setter
        public Builder satisfiesPZS(Boolean satisfiesPZS) {
            this.satisfiesPZS = Objects.requireNonNull(satisfiesPZS);
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(String storageClass) {
            this.storageClass = Objects.requireNonNull(storageClass);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }
        @CustomType.Setter
        public Builder versioning(BucketVersioningResponse versioning) {
            this.versioning = Objects.requireNonNull(versioning);
            return this;
        }
        @CustomType.Setter
        public Builder website(BucketWebsiteResponse website) {
            this.website = Objects.requireNonNull(website);
            return this;
        }
        public GetBucketResult build() {
            final var o = new GetBucketResult();
            o.acl = acl;
            o.autoclass = autoclass;
            o.billing = billing;
            o.cors = cors;
            o.customPlacementConfig = customPlacementConfig;
            o.defaultEventBasedHold = defaultEventBasedHold;
            o.defaultObjectAcl = defaultObjectAcl;
            o.encryption = encryption;
            o.etag = etag;
            o.iamConfiguration = iamConfiguration;
            o.kind = kind;
            o.labels = labels;
            o.lifecycle = lifecycle;
            o.location = location;
            o.locationType = locationType;
            o.logging = logging;
            o.metageneration = metageneration;
            o.name = name;
            o.owner = owner;
            o.projectNumber = projectNumber;
            o.retentionPolicy = retentionPolicy;
            o.rpo = rpo;
            o.satisfiesPZS = satisfiesPZS;
            o.selfLink = selfLink;
            o.storageClass = storageClass;
            o.timeCreated = timeCreated;
            o.updated = updated;
            o.versioning = versioning;
            o.website = website;
            return o;
        }
    }
}
