// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.compute.v1.outputs.AllocationSpecificSKUReservationResponse;
import com.pulumi.googlenative.compute.v1.outputs.ShareSettingsResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ReservationResponse {
    /**
     * @return Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
     * 
     */
    private String commitment;
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    private String creationTimestamp;
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    private String description;
    /**
     * @return Type of the resource. Always compute#reservations for reservations.
     * 
     */
    private String kind;
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private String name;
    /**
     * @return Reserved for future use.
     * 
     */
    private Boolean satisfiesPzs;
    /**
     * @return Server-defined fully-qualified URL for this resource.
     * 
     */
    private String selfLink;
    /**
     * @return Share-settings for shared-reservation
     * 
     */
    private ShareSettingsResponse shareSettings;
    /**
     * @return Reservation for instances with specific machine shapes.
     * 
     */
    private AllocationSpecificSKUReservationResponse specificReservation;
    /**
     * @return Indicates whether the reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
     * 
     */
    private Boolean specificReservationRequired;
    /**
     * @return The status of the reservation.
     * 
     */
    private String status;
    /**
     * @return Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
     * 
     */
    private String zone;

    private ReservationResponse() {}
    /**
     * @return Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
     * 
     */
    public String commitment() {
        return this.commitment;
    }
    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * @return An optional description of this resource. Provide this property when you create the resource.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Type of the resource. Always compute#reservations for reservations.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Reserved for future use.
     * 
     */
    public Boolean satisfiesPzs() {
        return this.satisfiesPzs;
    }
    /**
     * @return Server-defined fully-qualified URL for this resource.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }
    /**
     * @return Share-settings for shared-reservation
     * 
     */
    public ShareSettingsResponse shareSettings() {
        return this.shareSettings;
    }
    /**
     * @return Reservation for instances with specific machine shapes.
     * 
     */
    public AllocationSpecificSKUReservationResponse specificReservation() {
        return this.specificReservation;
    }
    /**
     * @return Indicates whether the reservation can be consumed by VMs with affinity for &#34;any&#34; reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
     * 
     */
    public Boolean specificReservationRequired() {
        return this.specificReservationRequired;
    }
    /**
     * @return The status of the reservation.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReservationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commitment;
        private String creationTimestamp;
        private String description;
        private String kind;
        private String name;
        private Boolean satisfiesPzs;
        private String selfLink;
        private ShareSettingsResponse shareSettings;
        private AllocationSpecificSKUReservationResponse specificReservation;
        private Boolean specificReservationRequired;
        private String status;
        private String zone;
        public Builder() {}
        public Builder(ReservationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commitment = defaults.commitment;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.satisfiesPzs = defaults.satisfiesPzs;
    	      this.selfLink = defaults.selfLink;
    	      this.shareSettings = defaults.shareSettings;
    	      this.specificReservation = defaults.specificReservation;
    	      this.specificReservationRequired = defaults.specificReservationRequired;
    	      this.status = defaults.status;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder commitment(String commitment) {
            this.commitment = Objects.requireNonNull(commitment);
            return this;
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            this.creationTimestamp = Objects.requireNonNull(creationTimestamp);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder satisfiesPzs(Boolean satisfiesPzs) {
            this.satisfiesPzs = Objects.requireNonNull(satisfiesPzs);
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            this.selfLink = Objects.requireNonNull(selfLink);
            return this;
        }
        @CustomType.Setter
        public Builder shareSettings(ShareSettingsResponse shareSettings) {
            this.shareSettings = Objects.requireNonNull(shareSettings);
            return this;
        }
        @CustomType.Setter
        public Builder specificReservation(AllocationSpecificSKUReservationResponse specificReservation) {
            this.specificReservation = Objects.requireNonNull(specificReservation);
            return this;
        }
        @CustomType.Setter
        public Builder specificReservationRequired(Boolean specificReservationRequired) {
            this.specificReservationRequired = Objects.requireNonNull(specificReservationRequired);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }
        public ReservationResponse build() {
            final var o = new ReservationResponse();
            o.commitment = commitment;
            o.creationTimestamp = creationTimestamp;
            o.description = description;
            o.kind = kind;
            o.name = name;
            o.satisfiesPzs = satisfiesPzs;
            o.selfLink = selfLink;
            o.shareSettings = shareSettings;
            o.specificReservation = specificReservation;
            o.specificReservationRequired = specificReservationRequired;
            o.status = status;
            o.zone = zone;
            return o;
        }
    }
}
