// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.notebooks.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class UpgradeHistoryEntryResponse {
    /**
     * @return Action. Rolloback or Upgrade.
     * 
     */
    private String action;
    /**
     * @return The container image before this instance upgrade.
     * 
     */
    private String containerImage;
    /**
     * @return The time that this instance upgrade history entry is created.
     * 
     */
    private String createTime;
    /**
     * @return The framework of this notebook instance.
     * 
     */
    private String framework;
    /**
     * @return The snapshot of the boot disk of this notebook instance before upgrade.
     * 
     */
    private String snapshot;
    /**
     * @return The state of this instance upgrade history entry.
     * 
     */
    private String state;
    /**
     * @return Target VM Image. Format: ainotebooks-vm/project/image-name/name.
     * 
     */
    private String targetImage;
    /**
     * @return Target VM Version, like m63.
     * 
     */
    private String targetVersion;
    /**
     * @return The version of the notebook instance before this upgrade.
     * 
     */
    private String version;
    /**
     * @return The VM image before this instance upgrade.
     * 
     */
    private String vmImage;

    private UpgradeHistoryEntryResponse() {}
    /**
     * @return Action. Rolloback or Upgrade.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The container image before this instance upgrade.
     * 
     */
    public String containerImage() {
        return this.containerImage;
    }
    /**
     * @return The time that this instance upgrade history entry is created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The framework of this notebook instance.
     * 
     */
    public String framework() {
        return this.framework;
    }
    /**
     * @return The snapshot of the boot disk of this notebook instance before upgrade.
     * 
     */
    public String snapshot() {
        return this.snapshot;
    }
    /**
     * @return The state of this instance upgrade history entry.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Target VM Image. Format: ainotebooks-vm/project/image-name/name.
     * 
     */
    public String targetImage() {
        return this.targetImage;
    }
    /**
     * @return Target VM Version, like m63.
     * 
     */
    public String targetVersion() {
        return this.targetVersion;
    }
    /**
     * @return The version of the notebook instance before this upgrade.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return The VM image before this instance upgrade.
     * 
     */
    public String vmImage() {
        return this.vmImage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UpgradeHistoryEntryResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String containerImage;
        private String createTime;
        private String framework;
        private String snapshot;
        private String state;
        private String targetImage;
        private String targetVersion;
        private String version;
        private String vmImage;
        public Builder() {}
        public Builder(UpgradeHistoryEntryResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.containerImage = defaults.containerImage;
    	      this.createTime = defaults.createTime;
    	      this.framework = defaults.framework;
    	      this.snapshot = defaults.snapshot;
    	      this.state = defaults.state;
    	      this.targetImage = defaults.targetImage;
    	      this.targetVersion = defaults.targetVersion;
    	      this.version = defaults.version;
    	      this.vmImage = defaults.vmImage;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder containerImage(String containerImage) {
            this.containerImage = Objects.requireNonNull(containerImage);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder framework(String framework) {
            this.framework = Objects.requireNonNull(framework);
            return this;
        }
        @CustomType.Setter
        public Builder snapshot(String snapshot) {
            this.snapshot = Objects.requireNonNull(snapshot);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder targetImage(String targetImage) {
            this.targetImage = Objects.requireNonNull(targetImage);
            return this;
        }
        @CustomType.Setter
        public Builder targetVersion(String targetVersion) {
            this.targetVersion = Objects.requireNonNull(targetVersion);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder vmImage(String vmImage) {
            this.vmImage = Objects.requireNonNull(vmImage);
            return this;
        }
        public UpgradeHistoryEntryResponse build() {
            final var o = new UpgradeHistoryEntryResponse();
            o.action = action;
            o.containerImage = containerImage;
            o.createTime = createTime;
            o.framework = framework;
            o.snapshot = snapshot;
            o.state = state;
            o.targetImage = targetImage;
            o.targetVersion = targetVersion;
            o.version = version;
            o.vmImage = vmImage;
            return o;
        }
    }
}
