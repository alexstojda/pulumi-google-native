// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.toolresults.v1beta3.outputs.FileReferenceResponse;
import com.pulumi.googlenative.toolresults.v1beta3.outputs.ToolExitCodeResponse;
import com.pulumi.googlenative.toolresults.v1beta3.outputs.ToolOutputReferenceResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ToolExecutionResponse {
    /**
     * @return The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set
     * 
     */
    private List<String> commandLineArguments;
    /**
     * @return Tool execution exit code. This field will be set once the tool has exited. - In response: present if set by create/update request - In create request: optional - In update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is already set.
     * 
     */
    private ToolExitCodeResponse exitCode;
    /**
     * @return References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     * 
     */
    private List<FileReferenceResponse> toolLogs;
    /**
     * @return References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     * 
     */
    private List<ToolOutputReferenceResponse> toolOutputs;

    private ToolExecutionResponse() {}
    /**
     * @return The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set
     * 
     */
    public List<String> commandLineArguments() {
        return this.commandLineArguments;
    }
    /**
     * @return Tool execution exit code. This field will be set once the tool has exited. - In response: present if set by create/update request - In create request: optional - In update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is already set.
     * 
     */
    public ToolExitCodeResponse exitCode() {
        return this.exitCode;
    }
    /**
     * @return References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     * 
     */
    public List<FileReferenceResponse> toolLogs() {
        return this.toolLogs;
    }
    /**
     * @return References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     * 
     */
    public List<ToolOutputReferenceResponse> toolOutputs() {
        return this.toolOutputs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ToolExecutionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> commandLineArguments;
        private ToolExitCodeResponse exitCode;
        private List<FileReferenceResponse> toolLogs;
        private List<ToolOutputReferenceResponse> toolOutputs;
        public Builder() {}
        public Builder(ToolExecutionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandLineArguments = defaults.commandLineArguments;
    	      this.exitCode = defaults.exitCode;
    	      this.toolLogs = defaults.toolLogs;
    	      this.toolOutputs = defaults.toolOutputs;
        }

        @CustomType.Setter
        public Builder commandLineArguments(List<String> commandLineArguments) {
            this.commandLineArguments = Objects.requireNonNull(commandLineArguments);
            return this;
        }
        public Builder commandLineArguments(String... commandLineArguments) {
            return commandLineArguments(List.of(commandLineArguments));
        }
        @CustomType.Setter
        public Builder exitCode(ToolExitCodeResponse exitCode) {
            this.exitCode = Objects.requireNonNull(exitCode);
            return this;
        }
        @CustomType.Setter
        public Builder toolLogs(List<FileReferenceResponse> toolLogs) {
            this.toolLogs = Objects.requireNonNull(toolLogs);
            return this;
        }
        public Builder toolLogs(FileReferenceResponse... toolLogs) {
            return toolLogs(List.of(toolLogs));
        }
        @CustomType.Setter
        public Builder toolOutputs(List<ToolOutputReferenceResponse> toolOutputs) {
            this.toolOutputs = Objects.requireNonNull(toolOutputs);
            return this;
        }
        public Builder toolOutputs(ToolOutputReferenceResponse... toolOutputs) {
            return toolOutputs(List.of(toolOutputs));
        }
        public ToolExecutionResponse build() {
            final var o = new ToolExecutionResponse();
            o.commandLineArguments = commandLineArguments;
            o.exitCode = exitCode;
            o.toolLogs = toolLogs;
            o.toolOutputs = toolOutputs;
            return o;
        }
    }
}
