// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firestore.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return The App Engine integration mode to use for this database.
     * 
     */
    private String appEngineIntegrationMode;
    /**
     * @return The concurrency control mode to use for this database.
     * 
     */
    private String concurrencyMode;
    /**
     * @return This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    private String etag;
    /**
     * @return The key_prefix for this database. This key_prefix is used, in combination with the project id (&#34;~&#34;) to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
     * 
     */
    private String keyPrefix;
    /**
     * @return The location of the database. Available databases are listed at https://cloud.google.com/firestore/docs/locations.
     * 
     */
    private String location;
    /**
     * @return The resource name of the Database. Format: `projects/{project}/databases/{database}`
     * 
     */
    private String name;
    /**
     * @return The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
     * 
     */
    private String type;

    private GetDatabaseResult() {}
    /**
     * @return The App Engine integration mode to use for this database.
     * 
     */
    public String appEngineIntegrationMode() {
        return this.appEngineIntegrationMode;
    }
    /**
     * @return The concurrency control mode to use for this database.
     * 
     */
    public String concurrencyMode() {
        return this.concurrencyMode;
    }
    /**
     * @return This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The key_prefix for this database. This key_prefix is used, in combination with the project id (&#34;~&#34;) to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
     * 
     */
    public String keyPrefix() {
        return this.keyPrefix;
    }
    /**
     * @return The location of the database. Available databases are listed at https://cloud.google.com/firestore/docs/locations.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The resource name of the Database. Format: `projects/{project}/databases/{database}`
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appEngineIntegrationMode;
        private String concurrencyMode;
        private String etag;
        private String keyPrefix;
        private String location;
        private String name;
        private String type;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appEngineIntegrationMode = defaults.appEngineIntegrationMode;
    	      this.concurrencyMode = defaults.concurrencyMode;
    	      this.etag = defaults.etag;
    	      this.keyPrefix = defaults.keyPrefix;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder appEngineIntegrationMode(String appEngineIntegrationMode) {
            this.appEngineIntegrationMode = Objects.requireNonNull(appEngineIntegrationMode);
            return this;
        }
        @CustomType.Setter
        public Builder concurrencyMode(String concurrencyMode) {
            this.concurrencyMode = Objects.requireNonNull(concurrencyMode);
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        @CustomType.Setter
        public Builder keyPrefix(String keyPrefix) {
            this.keyPrefix = Objects.requireNonNull(keyPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDatabaseResult build() {
            final var o = new GetDatabaseResult();
            o.appEngineIntegrationMode = appEngineIntegrationMode;
            o.concurrencyMode = concurrencyMode;
            o.etag = etag;
            o.keyPrefix = keyPrefix;
            o.location = location;
            o.name = name;
            o.type = type;
            return o;
        }
    }
}
