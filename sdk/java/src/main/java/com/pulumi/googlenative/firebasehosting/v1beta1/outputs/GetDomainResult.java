// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.firebasehosting.v1beta1.outputs.DomainProvisioningResponse;
import com.pulumi.googlenative.firebasehosting.v1beta1.outputs.DomainRedirectResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDomainResult {
    /**
     * @return The domain name of the association.
     * 
     */
    private String domainName;
    /**
     * @return If set, the domain should redirect with the provided parameters.
     * 
     */
    private DomainRedirectResponse domainRedirect;
    /**
     * @return Information about the provisioning of certificates and the health of the DNS resolution for the domain.
     * 
     */
    private DomainProvisioningResponse provisioning;
    /**
     * @return The site name of the association.
     * 
     */
    private String site;
    /**
     * @return Additional status of the domain association.
     * 
     */
    private String status;
    /**
     * @return The time at which the domain was last updated.
     * 
     */
    private String updateTime;

    private GetDomainResult() {}
    /**
     * @return The domain name of the association.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return If set, the domain should redirect with the provided parameters.
     * 
     */
    public DomainRedirectResponse domainRedirect() {
        return this.domainRedirect;
    }
    /**
     * @return Information about the provisioning of certificates and the health of the DNS resolution for the domain.
     * 
     */
    public DomainProvisioningResponse provisioning() {
        return this.provisioning;
    }
    /**
     * @return The site name of the association.
     * 
     */
    public String site() {
        return this.site;
    }
    /**
     * @return Additional status of the domain association.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The time at which the domain was last updated.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domainName;
        private DomainRedirectResponse domainRedirect;
        private DomainProvisioningResponse provisioning;
        private String site;
        private String status;
        private String updateTime;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.domainRedirect = defaults.domainRedirect;
    	      this.provisioning = defaults.provisioning;
    	      this.site = defaults.site;
    	      this.status = defaults.status;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder domainRedirect(DomainRedirectResponse domainRedirect) {
            this.domainRedirect = Objects.requireNonNull(domainRedirect);
            return this;
        }
        @CustomType.Setter
        public Builder provisioning(DomainProvisioningResponse provisioning) {
            this.provisioning = Objects.requireNonNull(provisioning);
            return this;
        }
        @CustomType.Setter
        public Builder site(String site) {
            this.site = Objects.requireNonNull(site);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetDomainResult build() {
            final var o = new GetDomainResult();
            o.domainName = domainName;
            o.domainRedirect = domainRedirect;
            o.provisioning = provisioning;
            o.site = site;
            o.status = status;
            o.updateTime = updateTime;
            return o;
        }
    }
}
