// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.networkservices.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.networkservices.v1beta1.outputs.HttpRouteHeaderMatchIntegerRangeResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class HttpRouteHeaderMatchResponse {
    /**
     * @return The value of the header should match exactly the content of exact_match.
     * 
     */
    private String exactMatch;
    /**
     * @return The name of the HTTP header to match against.
     * 
     */
    private String header;
    /**
     * @return If specified, the match result will be inverted before checking. Default value is set to false.
     * 
     */
    private Boolean invertMatch;
    /**
     * @return The value of the header must start with the contents of prefix_match.
     * 
     */
    private String prefixMatch;
    /**
     * @return A header with header_name must exist. The match takes place whether or not the header has a value.
     * 
     */
    private Boolean presentMatch;
    /**
     * @return If specified, the rule will match if the request header value is within the range.
     * 
     */
    private HttpRouteHeaderMatchIntegerRangeResponse rangeMatch;
    /**
     * @return The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
     * 
     */
    private String regexMatch;
    /**
     * @return The value of the header must end with the contents of suffix_match.
     * 
     */
    private String suffixMatch;

    private HttpRouteHeaderMatchResponse() {}
    /**
     * @return The value of the header should match exactly the content of exact_match.
     * 
     */
    public String exactMatch() {
        return this.exactMatch;
    }
    /**
     * @return The name of the HTTP header to match against.
     * 
     */
    public String header() {
        return this.header;
    }
    /**
     * @return If specified, the match result will be inverted before checking. Default value is set to false.
     * 
     */
    public Boolean invertMatch() {
        return this.invertMatch;
    }
    /**
     * @return The value of the header must start with the contents of prefix_match.
     * 
     */
    public String prefixMatch() {
        return this.prefixMatch;
    }
    /**
     * @return A header with header_name must exist. The match takes place whether or not the header has a value.
     * 
     */
    public Boolean presentMatch() {
        return this.presentMatch;
    }
    /**
     * @return If specified, the rule will match if the request header value is within the range.
     * 
     */
    public HttpRouteHeaderMatchIntegerRangeResponse rangeMatch() {
        return this.rangeMatch;
    }
    /**
     * @return The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
     * 
     */
    public String regexMatch() {
        return this.regexMatch;
    }
    /**
     * @return The value of the header must end with the contents of suffix_match.
     * 
     */
    public String suffixMatch() {
        return this.suffixMatch;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpRouteHeaderMatchResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String exactMatch;
        private String header;
        private Boolean invertMatch;
        private String prefixMatch;
        private Boolean presentMatch;
        private HttpRouteHeaderMatchIntegerRangeResponse rangeMatch;
        private String regexMatch;
        private String suffixMatch;
        public Builder() {}
        public Builder(HttpRouteHeaderMatchResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exactMatch = defaults.exactMatch;
    	      this.header = defaults.header;
    	      this.invertMatch = defaults.invertMatch;
    	      this.prefixMatch = defaults.prefixMatch;
    	      this.presentMatch = defaults.presentMatch;
    	      this.rangeMatch = defaults.rangeMatch;
    	      this.regexMatch = defaults.regexMatch;
    	      this.suffixMatch = defaults.suffixMatch;
        }

        @CustomType.Setter
        public Builder exactMatch(String exactMatch) {
            this.exactMatch = Objects.requireNonNull(exactMatch);
            return this;
        }
        @CustomType.Setter
        public Builder header(String header) {
            this.header = Objects.requireNonNull(header);
            return this;
        }
        @CustomType.Setter
        public Builder invertMatch(Boolean invertMatch) {
            this.invertMatch = Objects.requireNonNull(invertMatch);
            return this;
        }
        @CustomType.Setter
        public Builder prefixMatch(String prefixMatch) {
            this.prefixMatch = Objects.requireNonNull(prefixMatch);
            return this;
        }
        @CustomType.Setter
        public Builder presentMatch(Boolean presentMatch) {
            this.presentMatch = Objects.requireNonNull(presentMatch);
            return this;
        }
        @CustomType.Setter
        public Builder rangeMatch(HttpRouteHeaderMatchIntegerRangeResponse rangeMatch) {
            this.rangeMatch = Objects.requireNonNull(rangeMatch);
            return this;
        }
        @CustomType.Setter
        public Builder regexMatch(String regexMatch) {
            this.regexMatch = Objects.requireNonNull(regexMatch);
            return this;
        }
        @CustomType.Setter
        public Builder suffixMatch(String suffixMatch) {
            this.suffixMatch = Objects.requireNonNull(suffixMatch);
            return this;
        }
        public HttpRouteHeaderMatchResponse build() {
            final var o = new HttpRouteHeaderMatchResponse();
            o.exactMatch = exactMatch;
            o.header = header;
            o.invertMatch = invertMatch;
            o.prefixMatch = prefixMatch;
            o.presentMatch = presentMatch;
            o.rangeMatch = rangeMatch;
            o.regexMatch = regexMatch;
            o.suffixMatch = suffixMatch;
            return o;
        }
    }
}
