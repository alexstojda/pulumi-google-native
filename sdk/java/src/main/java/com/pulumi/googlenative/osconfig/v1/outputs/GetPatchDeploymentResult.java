// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.osconfig.v1.outputs.OneTimeScheduleResponse;
import com.pulumi.googlenative.osconfig.v1.outputs.PatchConfigResponse;
import com.pulumi.googlenative.osconfig.v1.outputs.PatchInstanceFilterResponse;
import com.pulumi.googlenative.osconfig.v1.outputs.PatchRolloutResponse;
import com.pulumi.googlenative.osconfig.v1.outputs.RecurringScheduleResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPatchDeploymentResult {
    /**
     * @return Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    private String createTime;
    /**
     * @return Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    private String description;
    /**
     * @return Optional. Duration of the patch. After the duration ends, the patch times out.
     * 
     */
    private String duration;
    /**
     * @return VM instances to patch.
     * 
     */
    private PatchInstanceFilterResponse instanceFilter;
    /**
     * @return The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    private String lastExecuteTime;
    /**
     * @return Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
     * 
     */
    private String name;
    /**
     * @return Schedule a one-time execution.
     * 
     */
    private OneTimeScheduleResponse oneTimeSchedule;
    /**
     * @return Optional. Patch configuration that is applied.
     * 
     */
    private PatchConfigResponse patchConfig;
    /**
     * @return Schedule recurring executions.
     * 
     */
    private RecurringScheduleResponse recurringSchedule;
    /**
     * @return Optional. Rollout strategy of the patch job.
     * 
     */
    private PatchRolloutResponse rollout;
    /**
     * @return Current state of the patch deployment.
     * 
     */
    private String state;
    /**
     * @return Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    private String updateTime;

    private GetPatchDeploymentResult() {}
    /**
     * @return Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Optional. Duration of the patch. After the duration ends, the patch times out.
     * 
     */
    public String duration() {
        return this.duration;
    }
    /**
     * @return VM instances to patch.
     * 
     */
    public PatchInstanceFilterResponse instanceFilter() {
        return this.instanceFilter;
    }
    /**
     * @return The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    public String lastExecuteTime() {
        return this.lastExecuteTime;
    }
    /**
     * @return Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Schedule a one-time execution.
     * 
     */
    public OneTimeScheduleResponse oneTimeSchedule() {
        return this.oneTimeSchedule;
    }
    /**
     * @return Optional. Patch configuration that is applied.
     * 
     */
    public PatchConfigResponse patchConfig() {
        return this.patchConfig;
    }
    /**
     * @return Schedule recurring executions.
     * 
     */
    public RecurringScheduleResponse recurringSchedule() {
        return this.recurringSchedule;
    }
    /**
     * @return Optional. Rollout strategy of the patch job.
     * 
     */
    public PatchRolloutResponse rollout() {
        return this.rollout;
    }
    /**
     * @return Current state of the patch deployment.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPatchDeploymentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private String duration;
        private PatchInstanceFilterResponse instanceFilter;
        private String lastExecuteTime;
        private String name;
        private OneTimeScheduleResponse oneTimeSchedule;
        private PatchConfigResponse patchConfig;
        private RecurringScheduleResponse recurringSchedule;
        private PatchRolloutResponse rollout;
        private String state;
        private String updateTime;
        public Builder() {}
        public Builder(GetPatchDeploymentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.duration = defaults.duration;
    	      this.instanceFilter = defaults.instanceFilter;
    	      this.lastExecuteTime = defaults.lastExecuteTime;
    	      this.name = defaults.name;
    	      this.oneTimeSchedule = defaults.oneTimeSchedule;
    	      this.patchConfig = defaults.patchConfig;
    	      this.recurringSchedule = defaults.recurringSchedule;
    	      this.rollout = defaults.rollout;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder duration(String duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        @CustomType.Setter
        public Builder instanceFilter(PatchInstanceFilterResponse instanceFilter) {
            this.instanceFilter = Objects.requireNonNull(instanceFilter);
            return this;
        }
        @CustomType.Setter
        public Builder lastExecuteTime(String lastExecuteTime) {
            this.lastExecuteTime = Objects.requireNonNull(lastExecuteTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder oneTimeSchedule(OneTimeScheduleResponse oneTimeSchedule) {
            this.oneTimeSchedule = Objects.requireNonNull(oneTimeSchedule);
            return this;
        }
        @CustomType.Setter
        public Builder patchConfig(PatchConfigResponse patchConfig) {
            this.patchConfig = Objects.requireNonNull(patchConfig);
            return this;
        }
        @CustomType.Setter
        public Builder recurringSchedule(RecurringScheduleResponse recurringSchedule) {
            this.recurringSchedule = Objects.requireNonNull(recurringSchedule);
            return this;
        }
        @CustomType.Setter
        public Builder rollout(PatchRolloutResponse rollout) {
            this.rollout = Objects.requireNonNull(rollout);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        public GetPatchDeploymentResult build() {
            final var o = new GetPatchDeploymentResult();
            o.createTime = createTime;
            o.description = description;
            o.duration = duration;
            o.instanceFilter = instanceFilter;
            o.lastExecuteTime = lastExecuteTime;
            o.name = name;
            o.oneTimeSchedule = oneTimeSchedule;
            o.patchConfig = patchConfig;
            o.recurringSchedule = recurringSchedule;
            o.rollout = rollout;
            o.state = state;
            o.updateTime = updateTime;
            return o;
        }
    }
}
