// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.osconfig.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.osconfig.v1beta.outputs.MonthlyScheduleResponse;
import com.pulumi.googlenative.osconfig.v1beta.outputs.TimeOfDayResponse;
import com.pulumi.googlenative.osconfig.v1beta.outputs.TimeZoneResponse;
import com.pulumi.googlenative.osconfig.v1beta.outputs.WeeklyScheduleResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class RecurringScheduleResponse {
    /**
     * @return Optional. The end time at which a recurring patch deployment schedule is no longer active.
     * 
     */
    private String endTime;
    /**
     * @return The frequency unit of this recurring schedule.
     * 
     */
    private String frequency;
    /**
     * @return The time the last patch job ran successfully.
     * 
     */
    private String lastExecuteTime;
    /**
     * @return Schedule with monthly executions.
     * 
     */
    private MonthlyScheduleResponse monthly;
    /**
     * @return The time the next patch job is scheduled to run.
     * 
     */
    private String nextExecuteTime;
    /**
     * @return Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
     * 
     */
    private String startTime;
    /**
     * @return Time of the day to run a recurring deployment.
     * 
     */
    private TimeOfDayResponse timeOfDay;
    /**
     * @return Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
     * 
     */
    private TimeZoneResponse timeZone;
    /**
     * @return Schedule with weekly executions.
     * 
     */
    private WeeklyScheduleResponse weekly;

    private RecurringScheduleResponse() {}
    /**
     * @return Optional. The end time at which a recurring patch deployment schedule is no longer active.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return The frequency unit of this recurring schedule.
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return The time the last patch job ran successfully.
     * 
     */
    public String lastExecuteTime() {
        return this.lastExecuteTime;
    }
    /**
     * @return Schedule with monthly executions.
     * 
     */
    public MonthlyScheduleResponse monthly() {
        return this.monthly;
    }
    /**
     * @return The time the next patch job is scheduled to run.
     * 
     */
    public String nextExecuteTime() {
        return this.nextExecuteTime;
    }
    /**
     * @return Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return Time of the day to run a recurring deployment.
     * 
     */
    public TimeOfDayResponse timeOfDay() {
        return this.timeOfDay;
    }
    /**
     * @return Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
     * 
     */
    public TimeZoneResponse timeZone() {
        return this.timeZone;
    }
    /**
     * @return Schedule with weekly executions.
     * 
     */
    public WeeklyScheduleResponse weekly() {
        return this.weekly;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecurringScheduleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String endTime;
        private String frequency;
        private String lastExecuteTime;
        private MonthlyScheduleResponse monthly;
        private String nextExecuteTime;
        private String startTime;
        private TimeOfDayResponse timeOfDay;
        private TimeZoneResponse timeZone;
        private WeeklyScheduleResponse weekly;
        public Builder() {}
        public Builder(RecurringScheduleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.lastExecuteTime = defaults.lastExecuteTime;
    	      this.monthly = defaults.monthly;
    	      this.nextExecuteTime = defaults.nextExecuteTime;
    	      this.startTime = defaults.startTime;
    	      this.timeOfDay = defaults.timeOfDay;
    	      this.timeZone = defaults.timeZone;
    	      this.weekly = defaults.weekly;
        }

        @CustomType.Setter
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        @CustomType.Setter
        public Builder lastExecuteTime(String lastExecuteTime) {
            this.lastExecuteTime = Objects.requireNonNull(lastExecuteTime);
            return this;
        }
        @CustomType.Setter
        public Builder monthly(MonthlyScheduleResponse monthly) {
            this.monthly = Objects.requireNonNull(monthly);
            return this;
        }
        @CustomType.Setter
        public Builder nextExecuteTime(String nextExecuteTime) {
            this.nextExecuteTime = Objects.requireNonNull(nextExecuteTime);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDay(TimeOfDayResponse timeOfDay) {
            this.timeOfDay = Objects.requireNonNull(timeOfDay);
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(TimeZoneResponse timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }
        @CustomType.Setter
        public Builder weekly(WeeklyScheduleResponse weekly) {
            this.weekly = Objects.requireNonNull(weekly);
            return this;
        }
        public RecurringScheduleResponse build() {
            final var o = new RecurringScheduleResponse();
            o.endTime = endTime;
            o.frequency = frequency;
            o.lastExecuteTime = lastExecuteTime;
            o.monthly = monthly;
            o.nextExecuteTime = nextExecuteTime;
            o.startTime = startTime;
            o.timeOfDay = timeOfDay;
            o.timeZone = timeZone;
            o.weekly = weekly;
            return o;
        }
    }
}
