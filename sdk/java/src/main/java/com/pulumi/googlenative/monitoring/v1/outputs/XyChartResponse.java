// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v1.outputs.AxisResponse;
import com.pulumi.googlenative.monitoring.v1.outputs.ChartOptionsResponse;
import com.pulumi.googlenative.monitoring.v1.outputs.DataSetResponse;
import com.pulumi.googlenative.monitoring.v1.outputs.ThresholdResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class XyChartResponse {
    /**
     * @return Display options for the chart.
     * 
     */
    private ChartOptionsResponse chartOptions;
    /**
     * @return The data displayed in this chart.
     * 
     */
    private List<DataSetResponse> dataSets;
    /**
     * @return Threshold lines drawn horizontally across the chart.
     * 
     */
    private List<ThresholdResponse> thresholds;
    /**
     * @return The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     * 
     */
    private String timeshiftDuration;
    /**
     * @return The properties applied to the X axis.
     * 
     */
    private AxisResponse xAxis;
    /**
     * @return The properties applied to the Y2 axis.
     * 
     */
    private AxisResponse y2Axis;
    /**
     * @return The properties applied to the Y axis.
     * 
     */
    private AxisResponse yAxis;

    private XyChartResponse() {}
    /**
     * @return Display options for the chart.
     * 
     */
    public ChartOptionsResponse chartOptions() {
        return this.chartOptions;
    }
    /**
     * @return The data displayed in this chart.
     * 
     */
    public List<DataSetResponse> dataSets() {
        return this.dataSets;
    }
    /**
     * @return Threshold lines drawn horizontally across the chart.
     * 
     */
    public List<ThresholdResponse> thresholds() {
        return this.thresholds;
    }
    /**
     * @return The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     * 
     */
    public String timeshiftDuration() {
        return this.timeshiftDuration;
    }
    /**
     * @return The properties applied to the X axis.
     * 
     */
    public AxisResponse xAxis() {
        return this.xAxis;
    }
    /**
     * @return The properties applied to the Y2 axis.
     * 
     */
    public AxisResponse y2Axis() {
        return this.y2Axis;
    }
    /**
     * @return The properties applied to the Y axis.
     * 
     */
    public AxisResponse yAxis() {
        return this.yAxis;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(XyChartResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ChartOptionsResponse chartOptions;
        private List<DataSetResponse> dataSets;
        private List<ThresholdResponse> thresholds;
        private String timeshiftDuration;
        private AxisResponse xAxis;
        private AxisResponse y2Axis;
        private AxisResponse yAxis;
        public Builder() {}
        public Builder(XyChartResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chartOptions = defaults.chartOptions;
    	      this.dataSets = defaults.dataSets;
    	      this.thresholds = defaults.thresholds;
    	      this.timeshiftDuration = defaults.timeshiftDuration;
    	      this.xAxis = defaults.xAxis;
    	      this.y2Axis = defaults.y2Axis;
    	      this.yAxis = defaults.yAxis;
        }

        @CustomType.Setter
        public Builder chartOptions(ChartOptionsResponse chartOptions) {
            this.chartOptions = Objects.requireNonNull(chartOptions);
            return this;
        }
        @CustomType.Setter
        public Builder dataSets(List<DataSetResponse> dataSets) {
            this.dataSets = Objects.requireNonNull(dataSets);
            return this;
        }
        public Builder dataSets(DataSetResponse... dataSets) {
            return dataSets(List.of(dataSets));
        }
        @CustomType.Setter
        public Builder thresholds(List<ThresholdResponse> thresholds) {
            this.thresholds = Objects.requireNonNull(thresholds);
            return this;
        }
        public Builder thresholds(ThresholdResponse... thresholds) {
            return thresholds(List.of(thresholds));
        }
        @CustomType.Setter
        public Builder timeshiftDuration(String timeshiftDuration) {
            this.timeshiftDuration = Objects.requireNonNull(timeshiftDuration);
            return this;
        }
        @CustomType.Setter
        public Builder xAxis(AxisResponse xAxis) {
            this.xAxis = Objects.requireNonNull(xAxis);
            return this;
        }
        @CustomType.Setter
        public Builder y2Axis(AxisResponse y2Axis) {
            this.y2Axis = Objects.requireNonNull(y2Axis);
            return this;
        }
        @CustomType.Setter
        public Builder yAxis(AxisResponse yAxis) {
            this.yAxis = Objects.requireNonNull(yAxis);
            return this;
        }
        public XyChartResponse build() {
            final var o = new XyChartResponse();
            o.chartOptions = chartOptions;
            o.dataSets = dataSets;
            o.thresholds = thresholds;
            o.timeshiftDuration = timeshiftDuration;
            o.xAxis = xAxis;
            o.y2Axis = y2Axis;
            o.yAxis = yAxis;
            return o;
        }
    }
}
