// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.transcoder.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.transcoder.v1.outputs.AudioMappingResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AudioStreamResponse {
    /**
     * @return Audio bitrate in bits per second. Must be between 1 and 10,000,000.
     * 
     */
    private Integer bitrateBps;
    /**
     * @return Number of audio channels. Must be between 1 and 6. The default is 2.
     * 
     */
    private Integer channelCount;
    /**
     * @return A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[&#34;fl&#34;, &#34;fr&#34;]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
     * 
     */
    private List<String> channelLayout;
    /**
     * @return The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
     * 
     */
    private String codec;
    /**
     * @return The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
     * 
     */
    private List<AudioMappingResponse> mapping;
    /**
     * @return The audio sample rate in Hertz. The default is 48000 Hertz.
     * 
     */
    private Integer sampleRateHertz;

    private AudioStreamResponse() {}
    /**
     * @return Audio bitrate in bits per second. Must be between 1 and 10,000,000.
     * 
     */
    public Integer bitrateBps() {
        return this.bitrateBps;
    }
    /**
     * @return Number of audio channels. Must be between 1 and 6. The default is 2.
     * 
     */
    public Integer channelCount() {
        return this.channelCount;
    }
    /**
     * @return A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[&#34;fl&#34;, &#34;fr&#34;]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
     * 
     */
    public List<String> channelLayout() {
        return this.channelLayout;
    }
    /**
     * @return The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
     * 
     */
    public String codec() {
        return this.codec;
    }
    /**
     * @return The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
     * 
     */
    public List<AudioMappingResponse> mapping() {
        return this.mapping;
    }
    /**
     * @return The audio sample rate in Hertz. The default is 48000 Hertz.
     * 
     */
    public Integer sampleRateHertz() {
        return this.sampleRateHertz;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AudioStreamResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer bitrateBps;
        private Integer channelCount;
        private List<String> channelLayout;
        private String codec;
        private List<AudioMappingResponse> mapping;
        private Integer sampleRateHertz;
        public Builder() {}
        public Builder(AudioStreamResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitrateBps = defaults.bitrateBps;
    	      this.channelCount = defaults.channelCount;
    	      this.channelLayout = defaults.channelLayout;
    	      this.codec = defaults.codec;
    	      this.mapping = defaults.mapping;
    	      this.sampleRateHertz = defaults.sampleRateHertz;
        }

        @CustomType.Setter
        public Builder bitrateBps(Integer bitrateBps) {
            this.bitrateBps = Objects.requireNonNull(bitrateBps);
            return this;
        }
        @CustomType.Setter
        public Builder channelCount(Integer channelCount) {
            this.channelCount = Objects.requireNonNull(channelCount);
            return this;
        }
        @CustomType.Setter
        public Builder channelLayout(List<String> channelLayout) {
            this.channelLayout = Objects.requireNonNull(channelLayout);
            return this;
        }
        public Builder channelLayout(String... channelLayout) {
            return channelLayout(List.of(channelLayout));
        }
        @CustomType.Setter
        public Builder codec(String codec) {
            this.codec = Objects.requireNonNull(codec);
            return this;
        }
        @CustomType.Setter
        public Builder mapping(List<AudioMappingResponse> mapping) {
            this.mapping = Objects.requireNonNull(mapping);
            return this;
        }
        public Builder mapping(AudioMappingResponse... mapping) {
            return mapping(List.of(mapping));
        }
        @CustomType.Setter
        public Builder sampleRateHertz(Integer sampleRateHertz) {
            this.sampleRateHertz = Objects.requireNonNull(sampleRateHertz);
            return this;
        }
        public AudioStreamResponse build() {
            final var o = new AudioStreamResponse();
            o.bitrateBps = bitrateBps;
            o.channelCount = channelCount;
            o.channelLayout = channelLayout;
            o.codec = codec;
            o.mapping = mapping;
            o.sampleRateHertz = sampleRateHertz;
            return o;
        }
    }
}
