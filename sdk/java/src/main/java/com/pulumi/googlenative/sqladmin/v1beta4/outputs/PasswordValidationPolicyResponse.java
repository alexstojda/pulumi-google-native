// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1beta4.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PasswordValidationPolicyResponse {
    /**
     * @return The complexity of the password.
     * 
     */
    private String complexity;
    /**
     * @return Disallow username as a part of the password.
     * 
     */
    private Boolean disallowUsernameSubstring;
    /**
     * @return Whether the password policy is enabled or not.
     * 
     */
    private Boolean enablePasswordPolicy;
    /**
     * @return Minimum number of characters allowed.
     * 
     */
    private Integer minLength;
    /**
     * @return Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
     * 
     */
    private String passwordChangeInterval;
    /**
     * @return Number of previous passwords that cannot be reused.
     * 
     */
    private Integer reuseInterval;

    private PasswordValidationPolicyResponse() {}
    /**
     * @return The complexity of the password.
     * 
     */
    public String complexity() {
        return this.complexity;
    }
    /**
     * @return Disallow username as a part of the password.
     * 
     */
    public Boolean disallowUsernameSubstring() {
        return this.disallowUsernameSubstring;
    }
    /**
     * @return Whether the password policy is enabled or not.
     * 
     */
    public Boolean enablePasswordPolicy() {
        return this.enablePasswordPolicy;
    }
    /**
     * @return Minimum number of characters allowed.
     * 
     */
    public Integer minLength() {
        return this.minLength;
    }
    /**
     * @return Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
     * 
     */
    public String passwordChangeInterval() {
        return this.passwordChangeInterval;
    }
    /**
     * @return Number of previous passwords that cannot be reused.
     * 
     */
    public Integer reuseInterval() {
        return this.reuseInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PasswordValidationPolicyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String complexity;
        private Boolean disallowUsernameSubstring;
        private Boolean enablePasswordPolicy;
        private Integer minLength;
        private String passwordChangeInterval;
        private Integer reuseInterval;
        public Builder() {}
        public Builder(PasswordValidationPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complexity = defaults.complexity;
    	      this.disallowUsernameSubstring = defaults.disallowUsernameSubstring;
    	      this.enablePasswordPolicy = defaults.enablePasswordPolicy;
    	      this.minLength = defaults.minLength;
    	      this.passwordChangeInterval = defaults.passwordChangeInterval;
    	      this.reuseInterval = defaults.reuseInterval;
        }

        @CustomType.Setter
        public Builder complexity(String complexity) {
            this.complexity = Objects.requireNonNull(complexity);
            return this;
        }
        @CustomType.Setter
        public Builder disallowUsernameSubstring(Boolean disallowUsernameSubstring) {
            this.disallowUsernameSubstring = Objects.requireNonNull(disallowUsernameSubstring);
            return this;
        }
        @CustomType.Setter
        public Builder enablePasswordPolicy(Boolean enablePasswordPolicy) {
            this.enablePasswordPolicy = Objects.requireNonNull(enablePasswordPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder minLength(Integer minLength) {
            this.minLength = Objects.requireNonNull(minLength);
            return this;
        }
        @CustomType.Setter
        public Builder passwordChangeInterval(String passwordChangeInterval) {
            this.passwordChangeInterval = Objects.requireNonNull(passwordChangeInterval);
            return this;
        }
        @CustomType.Setter
        public Builder reuseInterval(Integer reuseInterval) {
            this.reuseInterval = Objects.requireNonNull(reuseInterval);
            return this;
        }
        public PasswordValidationPolicyResponse build() {
            final var o = new PasswordValidationPolicyResponse();
            o.complexity = complexity;
            o.disallowUsernameSubstring = disallowUsernameSubstring;
            o.enablePasswordPolicy = enablePasswordPolicy;
            o.minLength = minLength;
            o.passwordChangeInterval = passwordChangeInterval;
            o.reuseInterval = reuseInterval;
            return o;
        }
    }
}
