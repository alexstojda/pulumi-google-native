// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.beyondcorp.v1alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.beyondcorp.v1alpha.outputs.AllocatedConnectionResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAppGatewayResult {
    /**
     * @return A list of connections allocated for the Gateway
     * 
     */
    private List<AllocatedConnectionResponse> allocatedConnections;
    /**
     * @return Timestamp when the resource was created.
     * 
     */
    private String createTime;
    /**
     * @return Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters.
     * 
     */
    private String displayName;
    /**
     * @return The type of hosting used by the AppGateway.
     * 
     */
    private String hostType;
    /**
     * @return Optional. Resource labels to represent user provided metadata.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Unique resource name of the AppGateway. The name is ignored when creating an AppGateway.
     * 
     */
    private String name;
    /**
     * @return The current state of the AppGateway.
     * 
     */
    private String state;
    /**
     * @return The type of network connectivity used by the AppGateway.
     * 
     */
    private String type;
    /**
     * @return A unique identifier for the instance generated by the system.
     * 
     */
    private String uid;
    /**
     * @return Timestamp when the resource was last modified.
     * 
     */
    private String updateTime;
    /**
     * @return Server-defined URI for this resource.
     * 
     */
    private String uri;

    private GetAppGatewayResult() {}
    /**
     * @return A list of connections allocated for the Gateway
     * 
     */
    public List<AllocatedConnectionResponse> allocatedConnections() {
        return this.allocatedConnections;
    }
    /**
     * @return Timestamp when the resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The type of hosting used by the AppGateway.
     * 
     */
    public String hostType() {
        return this.hostType;
    }
    /**
     * @return Optional. Resource labels to represent user provided metadata.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Unique resource name of the AppGateway. The name is ignored when creating an AppGateway.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The current state of the AppGateway.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The type of network connectivity used by the AppGateway.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return A unique identifier for the instance generated by the system.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return Timestamp when the resource was last modified.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return Server-defined URI for this resource.
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<AllocatedConnectionResponse> allocatedConnections;
        private String createTime;
        private String displayName;
        private String hostType;
        private Map<String,String> labels;
        private String name;
        private String state;
        private String type;
        private String uid;
        private String updateTime;
        private String uri;
        public Builder() {}
        public Builder(GetAppGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedConnections = defaults.allocatedConnections;
    	      this.createTime = defaults.createTime;
    	      this.displayName = defaults.displayName;
    	      this.hostType = defaults.hostType;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder allocatedConnections(List<AllocatedConnectionResponse> allocatedConnections) {
            this.allocatedConnections = Objects.requireNonNull(allocatedConnections);
            return this;
        }
        public Builder allocatedConnections(AllocatedConnectionResponse... allocatedConnections) {
            return allocatedConnections(List.of(allocatedConnections));
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder hostType(String hostType) {
            this.hostType = Objects.requireNonNull(hostType);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            this.updateTime = Objects.requireNonNull(updateTime);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        public GetAppGatewayResult build() {
            final var o = new GetAppGatewayResult();
            o.allocatedConnections = allocatedConnections;
            o.createTime = createTime;
            o.displayName = displayName;
            o.hostType = hostType;
            o.labels = labels;
            o.name = name;
            o.state = state;
            o.type = type;
            o.uid = uid;
            o.updateTime = updateTime;
            o.uri = uri;
            return o;
        }
    }
}
