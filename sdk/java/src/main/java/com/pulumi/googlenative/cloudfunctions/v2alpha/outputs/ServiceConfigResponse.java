// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudfunctions.v2alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudfunctions.v2alpha.outputs.SecretEnvVarResponse;
import com.pulumi.googlenative.cloudfunctions.v2alpha.outputs.SecretVolumeResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class ServiceConfigResponse {
    /**
     * @return Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.
     * 
     */
    private Boolean allTrafficOnLatestRevision;
    /**
     * @return The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.
     * 
     */
    private String availableMemory;
    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    private Map<String,String> environmentVariables;
    /**
     * @return The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    private String ingressSettings;
    /**
     * @return The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    private Integer maxInstanceCount;
    /**
     * @return The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.
     * 
     */
    private Integer minInstanceCount;
    /**
     * @return The name of service revision.
     * 
     */
    private String revision;
    /**
     * @return Secret environment variables configuration.
     * 
     */
    private List<SecretEnvVarResponse> secretEnvironmentVariables;
    /**
     * @return Secret volumes configuration.
     * 
     */
    private List<SecretVolumeResponse> secretVolumes;
    /**
     * @return Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`
     * 
     */
    private String service;
    /**
     * @return The email of the service&#39;s service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.
     * 
     */
    private String serviceAccountEmail;
    /**
     * @return The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    private Integer timeoutSeconds;
    /**
     * @return URI of the Service deployed.
     * 
     */
    private String uri;
    /**
     * @return The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*`.
     * 
     */
    private String vpcConnector;
    /**
     * @return The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    private String vpcConnectorEgressSettings;

    private ServiceConfigResponse() {}
    /**
     * @return Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.
     * 
     */
    public Boolean allTrafficOnLatestRevision() {
        return this.allTrafficOnLatestRevision;
    }
    /**
     * @return The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.
     * 
     */
    public String availableMemory() {
        return this.availableMemory;
    }
    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return The ingress settings for the function, controlling what traffic can reach it.
     * 
     */
    public String ingressSettings() {
        return this.ingressSettings;
    }
    /**
     * @return The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
     * 
     */
    public Integer maxInstanceCount() {
        return this.maxInstanceCount;
    }
    /**
     * @return The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.
     * 
     */
    public Integer minInstanceCount() {
        return this.minInstanceCount;
    }
    /**
     * @return The name of service revision.
     * 
     */
    public String revision() {
        return this.revision;
    }
    /**
     * @return Secret environment variables configuration.
     * 
     */
    public List<SecretEnvVarResponse> secretEnvironmentVariables() {
        return this.secretEnvironmentVariables;
    }
    /**
     * @return Secret volumes configuration.
     * 
     */
    public List<SecretVolumeResponse> secretVolumes() {
        return this.secretVolumes;
    }
    /**
     * @return Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return The email of the service&#39;s service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.
     * 
     */
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * @return The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * @return URI of the Service deployed.
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*{@literal /}locations/*{@literal /}connectors/*`.
     * 
     */
    public String vpcConnector() {
        return this.vpcConnector;
    }
    /**
     * @return The egress settings for the connector, controlling what traffic is diverted through it.
     * 
     */
    public String vpcConnectorEgressSettings() {
        return this.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allTrafficOnLatestRevision;
        private String availableMemory;
        private Map<String,String> environmentVariables;
        private String ingressSettings;
        private Integer maxInstanceCount;
        private Integer minInstanceCount;
        private String revision;
        private List<SecretEnvVarResponse> secretEnvironmentVariables;
        private List<SecretVolumeResponse> secretVolumes;
        private String service;
        private String serviceAccountEmail;
        private Integer timeoutSeconds;
        private String uri;
        private String vpcConnector;
        private String vpcConnectorEgressSettings;
        public Builder() {}
        public Builder(ServiceConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allTrafficOnLatestRevision = defaults.allTrafficOnLatestRevision;
    	      this.availableMemory = defaults.availableMemory;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.maxInstanceCount = defaults.maxInstanceCount;
    	      this.minInstanceCount = defaults.minInstanceCount;
    	      this.revision = defaults.revision;
    	      this.secretEnvironmentVariables = defaults.secretEnvironmentVariables;
    	      this.secretVolumes = defaults.secretVolumes;
    	      this.service = defaults.service;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.uri = defaults.uri;
    	      this.vpcConnector = defaults.vpcConnector;
    	      this.vpcConnectorEgressSettings = defaults.vpcConnectorEgressSettings;
        }

        @CustomType.Setter
        public Builder allTrafficOnLatestRevision(Boolean allTrafficOnLatestRevision) {
            this.allTrafficOnLatestRevision = Objects.requireNonNull(allTrafficOnLatestRevision);
            return this;
        }
        @CustomType.Setter
        public Builder availableMemory(String availableMemory) {
            this.availableMemory = Objects.requireNonNull(availableMemory);
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }
        @CustomType.Setter
        public Builder ingressSettings(String ingressSettings) {
            this.ingressSettings = Objects.requireNonNull(ingressSettings);
            return this;
        }
        @CustomType.Setter
        public Builder maxInstanceCount(Integer maxInstanceCount) {
            this.maxInstanceCount = Objects.requireNonNull(maxInstanceCount);
            return this;
        }
        @CustomType.Setter
        public Builder minInstanceCount(Integer minInstanceCount) {
            this.minInstanceCount = Objects.requireNonNull(minInstanceCount);
            return this;
        }
        @CustomType.Setter
        public Builder revision(String revision) {
            this.revision = Objects.requireNonNull(revision);
            return this;
        }
        @CustomType.Setter
        public Builder secretEnvironmentVariables(List<SecretEnvVarResponse> secretEnvironmentVariables) {
            this.secretEnvironmentVariables = Objects.requireNonNull(secretEnvironmentVariables);
            return this;
        }
        public Builder secretEnvironmentVariables(SecretEnvVarResponse... secretEnvironmentVariables) {
            return secretEnvironmentVariables(List.of(secretEnvironmentVariables));
        }
        @CustomType.Setter
        public Builder secretVolumes(List<SecretVolumeResponse> secretVolumes) {
            this.secretVolumes = Objects.requireNonNull(secretVolumes);
            return this;
        }
        public Builder secretVolumes(SecretVolumeResponse... secretVolumes) {
            return secretVolumes(List.of(secretVolumes));
        }
        @CustomType.Setter
        public Builder service(String service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = Objects.requireNonNull(timeoutSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        @CustomType.Setter
        public Builder vpcConnector(String vpcConnector) {
            this.vpcConnector = Objects.requireNonNull(vpcConnector);
            return this;
        }
        @CustomType.Setter
        public Builder vpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            this.vpcConnectorEgressSettings = Objects.requireNonNull(vpcConnectorEgressSettings);
            return this;
        }
        public ServiceConfigResponse build() {
            final var o = new ServiceConfigResponse();
            o.allTrafficOnLatestRevision = allTrafficOnLatestRevision;
            o.availableMemory = availableMemory;
            o.environmentVariables = environmentVariables;
            o.ingressSettings = ingressSettings;
            o.maxInstanceCount = maxInstanceCount;
            o.minInstanceCount = minInstanceCount;
            o.revision = revision;
            o.secretEnvironmentVariables = secretEnvironmentVariables;
            o.secretVolumes = secretVolumes;
            o.service = service;
            o.serviceAccountEmail = serviceAccountEmail;
            o.timeoutSeconds = timeoutSeconds;
            o.uri = uri;
            o.vpcConnector = vpcConnector;
            o.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
            return o;
        }
    }
}
