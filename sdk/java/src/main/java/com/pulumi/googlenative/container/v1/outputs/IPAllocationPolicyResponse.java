// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class IPAllocationPolicyResponse {
    /**
     * @return This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
    private String clusterIpv4Cidr;
    /**
     * @return The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private String clusterIpv4CidrBlock;
    /**
     * @return The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    private String clusterSecondaryRangeName;
    /**
     * @return Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     * 
     */
    private Boolean createSubnetwork;
    /**
     * @return This field is deprecated, use node_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
    private String nodeIpv4Cidr;
    /**
     * @return The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private String nodeIpv4CidrBlock;
    /**
     * @return This field is deprecated, use services_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
    private String servicesIpv4Cidr;
    /**
     * @return The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private String servicesIpv4CidrBlock;
    /**
     * @return The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    private String servicesSecondaryRangeName;
    /**
     * @return A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     * 
     */
    private String subnetworkName;
    /**
     * @return The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    private String tpuIpv4CidrBlock;
    /**
     * @return Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    private Boolean useIpAliases;
    /**
     * @return Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    private Boolean useRoutes;

    private IPAllocationPolicyResponse() {}
    /**
     * @return This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use cluster_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use cluster_ipv4_cidr_block. */
    public String clusterIpv4Cidr() {
        return this.clusterIpv4Cidr;
    }
    /**
     * @return The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String clusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock;
    }
    /**
     * @return The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    public String clusterSecondaryRangeName() {
        return this.clusterSecondaryRangeName;
    }
    /**
     * @return Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     * 
     */
    public Boolean createSubnetwork() {
        return this.createSubnetwork;
    }
    /**
     * @return This field is deprecated, use node_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use node_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use node_ipv4_cidr_block. */
    public String nodeIpv4Cidr() {
        return this.nodeIpv4Cidr;
    }
    /**
     * @return The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String nodeIpv4CidrBlock() {
        return this.nodeIpv4CidrBlock;
    }
    /**
     * @return This field is deprecated, use services_ipv4_cidr_block.
     * 
     * @deprecated
     * This field is deprecated, use services_ipv4_cidr_block.
     * 
     */
    @Deprecated /* This field is deprecated, use services_ipv4_cidr_block. */
    public String servicesIpv4Cidr() {
        return this.servicesIpv4Cidr;
    }
    /**
     * @return The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String servicesIpv4CidrBlock() {
        return this.servicesIpv4CidrBlock;
    }
    /**
     * @return The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
     * 
     */
    public String servicesSecondaryRangeName() {
        return this.servicesSecondaryRangeName;
    }
    /**
     * @return A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     * 
     */
    public String subnetworkName() {
        return this.subnetworkName;
    }
    /**
     * @return The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     * 
     */
    public String tpuIpv4CidrBlock() {
        return this.tpuIpv4CidrBlock;
    }
    /**
     * @return Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    public Boolean useIpAliases() {
        return this.useIpAliases;
    }
    /**
     * @return Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     * 
     */
    public Boolean useRoutes() {
        return this.useRoutes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IPAllocationPolicyResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterIpv4Cidr;
        private String clusterIpv4CidrBlock;
        private String clusterSecondaryRangeName;
        private Boolean createSubnetwork;
        private String nodeIpv4Cidr;
        private String nodeIpv4CidrBlock;
        private String servicesIpv4Cidr;
        private String servicesIpv4CidrBlock;
        private String servicesSecondaryRangeName;
        private String subnetworkName;
        private String tpuIpv4CidrBlock;
        private Boolean useIpAliases;
        private Boolean useRoutes;
        public Builder() {}
        public Builder(IPAllocationPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterIpv4Cidr = defaults.clusterIpv4Cidr;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.clusterSecondaryRangeName = defaults.clusterSecondaryRangeName;
    	      this.createSubnetwork = defaults.createSubnetwork;
    	      this.nodeIpv4Cidr = defaults.nodeIpv4Cidr;
    	      this.nodeIpv4CidrBlock = defaults.nodeIpv4CidrBlock;
    	      this.servicesIpv4Cidr = defaults.servicesIpv4Cidr;
    	      this.servicesIpv4CidrBlock = defaults.servicesIpv4CidrBlock;
    	      this.servicesSecondaryRangeName = defaults.servicesSecondaryRangeName;
    	      this.subnetworkName = defaults.subnetworkName;
    	      this.tpuIpv4CidrBlock = defaults.tpuIpv4CidrBlock;
    	      this.useIpAliases = defaults.useIpAliases;
    	      this.useRoutes = defaults.useRoutes;
        }

        @CustomType.Setter
        public Builder clusterIpv4Cidr(String clusterIpv4Cidr) {
            this.clusterIpv4Cidr = Objects.requireNonNull(clusterIpv4Cidr);
            return this;
        }
        @CustomType.Setter
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            this.clusterIpv4CidrBlock = Objects.requireNonNull(clusterIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder clusterSecondaryRangeName(String clusterSecondaryRangeName) {
            this.clusterSecondaryRangeName = Objects.requireNonNull(clusterSecondaryRangeName);
            return this;
        }
        @CustomType.Setter
        public Builder createSubnetwork(Boolean createSubnetwork) {
            this.createSubnetwork = Objects.requireNonNull(createSubnetwork);
            return this;
        }
        @CustomType.Setter
        public Builder nodeIpv4Cidr(String nodeIpv4Cidr) {
            this.nodeIpv4Cidr = Objects.requireNonNull(nodeIpv4Cidr);
            return this;
        }
        @CustomType.Setter
        public Builder nodeIpv4CidrBlock(String nodeIpv4CidrBlock) {
            this.nodeIpv4CidrBlock = Objects.requireNonNull(nodeIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder servicesIpv4Cidr(String servicesIpv4Cidr) {
            this.servicesIpv4Cidr = Objects.requireNonNull(servicesIpv4Cidr);
            return this;
        }
        @CustomType.Setter
        public Builder servicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
            this.servicesIpv4CidrBlock = Objects.requireNonNull(servicesIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder servicesSecondaryRangeName(String servicesSecondaryRangeName) {
            this.servicesSecondaryRangeName = Objects.requireNonNull(servicesSecondaryRangeName);
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkName(String subnetworkName) {
            this.subnetworkName = Objects.requireNonNull(subnetworkName);
            return this;
        }
        @CustomType.Setter
        public Builder tpuIpv4CidrBlock(String tpuIpv4CidrBlock) {
            this.tpuIpv4CidrBlock = Objects.requireNonNull(tpuIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder useIpAliases(Boolean useIpAliases) {
            this.useIpAliases = Objects.requireNonNull(useIpAliases);
            return this;
        }
        @CustomType.Setter
        public Builder useRoutes(Boolean useRoutes) {
            this.useRoutes = Objects.requireNonNull(useRoutes);
            return this;
        }
        public IPAllocationPolicyResponse build() {
            final var o = new IPAllocationPolicyResponse();
            o.clusterIpv4Cidr = clusterIpv4Cidr;
            o.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            o.clusterSecondaryRangeName = clusterSecondaryRangeName;
            o.createSubnetwork = createSubnetwork;
            o.nodeIpv4Cidr = nodeIpv4Cidr;
            o.nodeIpv4CidrBlock = nodeIpv4CidrBlock;
            o.servicesIpv4Cidr = servicesIpv4Cidr;
            o.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
            o.servicesSecondaryRangeName = servicesSecondaryRangeName;
            o.subnetworkName = subnetworkName;
            o.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
            o.useIpAliases = useIpAliases;
            o.useRoutes = useRoutes;
            return o;
        }
    }
}
