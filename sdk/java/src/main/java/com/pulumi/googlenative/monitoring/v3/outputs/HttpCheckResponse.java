// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v3.outputs.BasicAuthenticationResponse;
import com.pulumi.googlenative.monitoring.v3.outputs.ResponseStatusCodeResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class HttpCheckResponse {
    /**
     * @return If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
     * 
     */
    private List<ResponseStatusCodeResponse> acceptedResponseStatusCodes;
    /**
     * @return The authentication information. Optional when creating an HTTP check; defaults to empty.
     * 
     */
    private BasicAuthenticationResponse authInfo;
    /**
     * @return The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte.Note: If client libraries aren&#39;t used (which performs the conversion automatically) base64 encode your body data since the field is of bytes type.
     * 
     */
    private String body;
    /**
     * @return The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a &#34;Content-Type&#34; header is provided via headers field. The content_type field should be used instead.
     * 
     */
    private String contentType;
    /**
     * @return The list of headers to send as part of the Uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
     * 
     */
    private Map<String,String> headers;
    /**
     * @return Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
     * 
     */
    private Boolean maskHeaders;
    /**
     * @return Optional (defaults to &#34;/&#34;). The path to the page against which to run the check. Will be combined with the host (specified within the monitored_resource) and port to construct the full URL. If the provided path does not begin with &#34;/&#34;, a &#34;/&#34; will be prepended automatically.
     * 
     */
    private String path;
    /**
     * @return Optional (defaults to 80 when use_ssl is false, and 443 when use_ssl is true). The TCP port on the HTTP server against which to run the check. Will be combined with host (specified within the monitored_resource) and path to construct the full URL.
     * 
     */
    private Integer port;
    /**
     * @return The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
     * 
     */
    private String requestMethod;
    /**
     * @return If true, use HTTPS instead of HTTP to run the check.
     * 
     */
    private Boolean useSsl;
    /**
     * @return Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
     * 
     */
    private Boolean validateSsl;

    private HttpCheckResponse() {}
    /**
     * @return If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
     * 
     */
    public List<ResponseStatusCodeResponse> acceptedResponseStatusCodes() {
        return this.acceptedResponseStatusCodes;
    }
    /**
     * @return The authentication information. Optional when creating an HTTP check; defaults to empty.
     * 
     */
    public BasicAuthenticationResponse authInfo() {
        return this.authInfo;
    }
    /**
     * @return The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte.Note: If client libraries aren&#39;t used (which performs the conversion automatically) base64 encode your body data since the field is of bytes type.
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a &#34;Content-Type&#34; header is provided via headers field. The content_type field should be used instead.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return The list of headers to send as part of the Uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
     * 
     */
    public Map<String,String> headers() {
        return this.headers;
    }
    /**
     * @return Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
     * 
     */
    public Boolean maskHeaders() {
        return this.maskHeaders;
    }
    /**
     * @return Optional (defaults to &#34;/&#34;). The path to the page against which to run the check. Will be combined with the host (specified within the monitored_resource) and port to construct the full URL. If the provided path does not begin with &#34;/&#34;, a &#34;/&#34; will be prepended automatically.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Optional (defaults to 80 when use_ssl is false, and 443 when use_ssl is true). The TCP port on the HTTP server against which to run the check. Will be combined with host (specified within the monitored_resource) and path to construct the full URL.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
     * 
     */
    public String requestMethod() {
        return this.requestMethod;
    }
    /**
     * @return If true, use HTTPS instead of HTTP to run the check.
     * 
     */
    public Boolean useSsl() {
        return this.useSsl;
    }
    /**
     * @return Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
     * 
     */
    public Boolean validateSsl() {
        return this.validateSsl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HttpCheckResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ResponseStatusCodeResponse> acceptedResponseStatusCodes;
        private BasicAuthenticationResponse authInfo;
        private String body;
        private String contentType;
        private Map<String,String> headers;
        private Boolean maskHeaders;
        private String path;
        private Integer port;
        private String requestMethod;
        private Boolean useSsl;
        private Boolean validateSsl;
        public Builder() {}
        public Builder(HttpCheckResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptedResponseStatusCodes = defaults.acceptedResponseStatusCodes;
    	      this.authInfo = defaults.authInfo;
    	      this.body = defaults.body;
    	      this.contentType = defaults.contentType;
    	      this.headers = defaults.headers;
    	      this.maskHeaders = defaults.maskHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.requestMethod = defaults.requestMethod;
    	      this.useSsl = defaults.useSsl;
    	      this.validateSsl = defaults.validateSsl;
        }

        @CustomType.Setter
        public Builder acceptedResponseStatusCodes(List<ResponseStatusCodeResponse> acceptedResponseStatusCodes) {
            this.acceptedResponseStatusCodes = Objects.requireNonNull(acceptedResponseStatusCodes);
            return this;
        }
        public Builder acceptedResponseStatusCodes(ResponseStatusCodeResponse... acceptedResponseStatusCodes) {
            return acceptedResponseStatusCodes(List.of(acceptedResponseStatusCodes));
        }
        @CustomType.Setter
        public Builder authInfo(BasicAuthenticationResponse authInfo) {
            this.authInfo = Objects.requireNonNull(authInfo);
            return this;
        }
        @CustomType.Setter
        public Builder body(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        @CustomType.Setter
        public Builder headers(Map<String,String> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }
        @CustomType.Setter
        public Builder maskHeaders(Boolean maskHeaders) {
            this.maskHeaders = Objects.requireNonNull(maskHeaders);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder requestMethod(String requestMethod) {
            this.requestMethod = Objects.requireNonNull(requestMethod);
            return this;
        }
        @CustomType.Setter
        public Builder useSsl(Boolean useSsl) {
            this.useSsl = Objects.requireNonNull(useSsl);
            return this;
        }
        @CustomType.Setter
        public Builder validateSsl(Boolean validateSsl) {
            this.validateSsl = Objects.requireNonNull(validateSsl);
            return this;
        }
        public HttpCheckResponse build() {
            final var o = new HttpCheckResponse();
            o.acceptedResponseStatusCodes = acceptedResponseStatusCodes;
            o.authInfo = authInfo;
            o.body = body;
            o.contentType = contentType;
            o.headers = headers;
            o.maskHeaders = maskHeaders;
            o.path = path;
            o.port = port;
            o.requestMethod = requestMethod;
            o.useSsl = useSsl;
            o.validateSsl = validateSsl;
            return o;
        }
    }
}
