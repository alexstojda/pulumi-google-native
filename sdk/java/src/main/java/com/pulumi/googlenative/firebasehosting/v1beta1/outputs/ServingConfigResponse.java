// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.firebasehosting.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.firebasehosting.v1beta1.outputs.HeaderResponse;
import com.pulumi.googlenative.firebasehosting.v1beta1.outputs.I18nConfigResponse;
import com.pulumi.googlenative.firebasehosting.v1beta1.outputs.RedirectResponse;
import com.pulumi.googlenative.firebasehosting.v1beta1.outputs.RewriteResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ServingConfigResponse {
    /**
     * @return How to handle well known App Association files.
     * 
     */
    private String appAssociation;
    /**
     * @return Defines whether to drop the file extension from uploaded files.
     * 
     */
    private Boolean cleanUrls;
    /**
     * @return An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
     * 
     */
    private List<HeaderResponse> headers;
    /**
     * @return Optional. Defines i18n rewrite behavior.
     * 
     */
    private I18nConfigResponse i18n;
    /**
     * @return An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
     * 
     */
    private List<RedirectResponse> redirects;
    /**
     * @return An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     * 
     */
    private List<RewriteResponse> rewrites;
    /**
     * @return Defines how to handle a trailing slash in the URL path.
     * 
     */
    private String trailingSlashBehavior;

    private ServingConfigResponse() {}
    /**
     * @return How to handle well known App Association files.
     * 
     */
    public String appAssociation() {
        return this.appAssociation;
    }
    /**
     * @return Defines whether to drop the file extension from uploaded files.
     * 
     */
    public Boolean cleanUrls() {
        return this.cleanUrls;
    }
    /**
     * @return An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
     * 
     */
    public List<HeaderResponse> headers() {
        return this.headers;
    }
    /**
     * @return Optional. Defines i18n rewrite behavior.
     * 
     */
    public I18nConfigResponse i18n() {
        return this.i18n;
    }
    /**
     * @return An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
     * 
     */
    public List<RedirectResponse> redirects() {
        return this.redirects;
    }
    /**
     * @return An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     * 
     */
    public List<RewriteResponse> rewrites() {
        return this.rewrites;
    }
    /**
     * @return Defines how to handle a trailing slash in the URL path.
     * 
     */
    public String trailingSlashBehavior() {
        return this.trailingSlashBehavior;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServingConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appAssociation;
        private Boolean cleanUrls;
        private List<HeaderResponse> headers;
        private I18nConfigResponse i18n;
        private List<RedirectResponse> redirects;
        private List<RewriteResponse> rewrites;
        private String trailingSlashBehavior;
        public Builder() {}
        public Builder(ServingConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appAssociation = defaults.appAssociation;
    	      this.cleanUrls = defaults.cleanUrls;
    	      this.headers = defaults.headers;
    	      this.i18n = defaults.i18n;
    	      this.redirects = defaults.redirects;
    	      this.rewrites = defaults.rewrites;
    	      this.trailingSlashBehavior = defaults.trailingSlashBehavior;
        }

        @CustomType.Setter
        public Builder appAssociation(String appAssociation) {
            this.appAssociation = Objects.requireNonNull(appAssociation);
            return this;
        }
        @CustomType.Setter
        public Builder cleanUrls(Boolean cleanUrls) {
            this.cleanUrls = Objects.requireNonNull(cleanUrls);
            return this;
        }
        @CustomType.Setter
        public Builder headers(List<HeaderResponse> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }
        public Builder headers(HeaderResponse... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder i18n(I18nConfigResponse i18n) {
            this.i18n = Objects.requireNonNull(i18n);
            return this;
        }
        @CustomType.Setter
        public Builder redirects(List<RedirectResponse> redirects) {
            this.redirects = Objects.requireNonNull(redirects);
            return this;
        }
        public Builder redirects(RedirectResponse... redirects) {
            return redirects(List.of(redirects));
        }
        @CustomType.Setter
        public Builder rewrites(List<RewriteResponse> rewrites) {
            this.rewrites = Objects.requireNonNull(rewrites);
            return this;
        }
        public Builder rewrites(RewriteResponse... rewrites) {
            return rewrites(List.of(rewrites));
        }
        @CustomType.Setter
        public Builder trailingSlashBehavior(String trailingSlashBehavior) {
            this.trailingSlashBehavior = Objects.requireNonNull(trailingSlashBehavior);
            return this;
        }
        public ServingConfigResponse build() {
            final var o = new ServingConfigResponse();
            o.appAssociation = appAssociation;
            o.cleanUrls = cleanUrls;
            o.headers = headers;
            o.i18n = i18n;
            o.redirects = redirects;
            o.rewrites = rewrites;
            o.trailingSlashBehavior = trailingSlashBehavior;
            return o;
        }
    }
}
