// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudiot.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudiot.v1.outputs.DeviceConfigResponse;
import com.pulumi.googlenative.cloudiot.v1.outputs.DeviceCredentialResponse;
import com.pulumi.googlenative.cloudiot.v1.outputs.DeviceStateResponse;
import com.pulumi.googlenative.cloudiot.v1.outputs.GatewayConfigResponse;
import com.pulumi.googlenative.cloudiot.v1.outputs.StatusResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeviceResult {
    /**
     * @return If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
     * 
     */
    private Boolean blocked;
    /**
     * @return The most recent device configuration, which is eventually sent from Cloud IoT Core to the device. If not present on creation, the configuration will be initialized with an empty payload and version value of `1`. To update this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig` method.
     * 
     */
    private DeviceConfigResponse config;
    /**
     * @return The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
     * 
     */
    private List<DeviceCredentialResponse> credentials;
    /**
     * @return Gateway-related configuration and state.
     * 
     */
    private GatewayConfigResponse gatewayConfig;
    /**
     * @return [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
     * 
     */
    private String lastConfigAckTime;
    /**
     * @return [Output only] The last time a cloud-to-device config version was sent to the device.
     * 
     */
    private String lastConfigSendTime;
    /**
     * @return [Output only] The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub. &#39;last_error_time&#39; is the timestamp of this field. If no errors have occurred, this field has an empty message and the status code 0 == OK. Otherwise, this field is expected to have a status code other than OK.
     * 
     */
    private StatusResponse lastErrorStatus;
    /**
     * @return [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of &#39;last_error_status&#39;.
     * 
     */
    private String lastErrorTime;
    /**
     * @return [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    private String lastEventTime;
    /**
     * @return [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    private String lastHeartbeatTime;
    /**
     * @return [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    private String lastStateTime;
    /**
     * @return **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
     * 
     */
    private String logLevel;
    /**
     * @return The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
     * 
     */
    private Map<String,String> metadata;
    /**
     * @return The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
     * 
     */
    private String name;
    /**
     * @return [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
     * 
     */
    private String numId;
    /**
     * @return [Output only] The state most recently received from the device. If no state has been reported, this field is not present.
     * 
     */
    private DeviceStateResponse state;

    private GetDeviceResult() {}
    /**
     * @return If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
     * 
     */
    public Boolean blocked() {
        return this.blocked;
    }
    /**
     * @return The most recent device configuration, which is eventually sent from Cloud IoT Core to the device. If not present on creation, the configuration will be initialized with an empty payload and version value of `1`. To update this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig` method.
     * 
     */
    public DeviceConfigResponse config() {
        return this.config;
    }
    /**
     * @return The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
     * 
     */
    public List<DeviceCredentialResponse> credentials() {
        return this.credentials;
    }
    /**
     * @return Gateway-related configuration and state.
     * 
     */
    public GatewayConfigResponse gatewayConfig() {
        return this.gatewayConfig;
    }
    /**
     * @return [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
     * 
     */
    public String lastConfigAckTime() {
        return this.lastConfigAckTime;
    }
    /**
     * @return [Output only] The last time a cloud-to-device config version was sent to the device.
     * 
     */
    public String lastConfigSendTime() {
        return this.lastConfigSendTime;
    }
    /**
     * @return [Output only] The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub. &#39;last_error_time&#39; is the timestamp of this field. If no errors have occurred, this field has an empty message and the status code 0 == OK. Otherwise, this field is expected to have a status code other than OK.
     * 
     */
    public StatusResponse lastErrorStatus() {
        return this.lastErrorStatus;
    }
    /**
     * @return [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of &#39;last_error_status&#39;.
     * 
     */
    public String lastErrorTime() {
        return this.lastErrorTime;
    }
    /**
     * @return [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    public String lastEventTime() {
        return this.lastEventTime;
    }
    /**
     * @return [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    public String lastHeartbeatTime() {
        return this.lastHeartbeatTime;
    }
    /**
     * @return [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     * 
     */
    public String lastStateTime() {
        return this.lastStateTime;
    }
    /**
     * @return **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
     * 
     */
    public String logLevel() {
        return this.logLevel;
    }
    /**
     * @return The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata;
    }
    /**
     * @return The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
     * 
     */
    public String numId() {
        return this.numId;
    }
    /**
     * @return [Output only] The state most recently received from the device. If no state has been reported, this field is not present.
     * 
     */
    public DeviceStateResponse state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean blocked;
        private DeviceConfigResponse config;
        private List<DeviceCredentialResponse> credentials;
        private GatewayConfigResponse gatewayConfig;
        private String lastConfigAckTime;
        private String lastConfigSendTime;
        private StatusResponse lastErrorStatus;
        private String lastErrorTime;
        private String lastEventTime;
        private String lastHeartbeatTime;
        private String lastStateTime;
        private String logLevel;
        private Map<String,String> metadata;
        private String name;
        private String numId;
        private DeviceStateResponse state;
        public Builder() {}
        public Builder(GetDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blocked = defaults.blocked;
    	      this.config = defaults.config;
    	      this.credentials = defaults.credentials;
    	      this.gatewayConfig = defaults.gatewayConfig;
    	      this.lastConfigAckTime = defaults.lastConfigAckTime;
    	      this.lastConfigSendTime = defaults.lastConfigSendTime;
    	      this.lastErrorStatus = defaults.lastErrorStatus;
    	      this.lastErrorTime = defaults.lastErrorTime;
    	      this.lastEventTime = defaults.lastEventTime;
    	      this.lastHeartbeatTime = defaults.lastHeartbeatTime;
    	      this.lastStateTime = defaults.lastStateTime;
    	      this.logLevel = defaults.logLevel;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.numId = defaults.numId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder blocked(Boolean blocked) {
            this.blocked = Objects.requireNonNull(blocked);
            return this;
        }
        @CustomType.Setter
        public Builder config(DeviceConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        @CustomType.Setter
        public Builder credentials(List<DeviceCredentialResponse> credentials) {
            this.credentials = Objects.requireNonNull(credentials);
            return this;
        }
        public Builder credentials(DeviceCredentialResponse... credentials) {
            return credentials(List.of(credentials));
        }
        @CustomType.Setter
        public Builder gatewayConfig(GatewayConfigResponse gatewayConfig) {
            this.gatewayConfig = Objects.requireNonNull(gatewayConfig);
            return this;
        }
        @CustomType.Setter
        public Builder lastConfigAckTime(String lastConfigAckTime) {
            this.lastConfigAckTime = Objects.requireNonNull(lastConfigAckTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastConfigSendTime(String lastConfigSendTime) {
            this.lastConfigSendTime = Objects.requireNonNull(lastConfigSendTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastErrorStatus(StatusResponse lastErrorStatus) {
            this.lastErrorStatus = Objects.requireNonNull(lastErrorStatus);
            return this;
        }
        @CustomType.Setter
        public Builder lastErrorTime(String lastErrorTime) {
            this.lastErrorTime = Objects.requireNonNull(lastErrorTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastEventTime(String lastEventTime) {
            this.lastEventTime = Objects.requireNonNull(lastEventTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartbeatTime(String lastHeartbeatTime) {
            this.lastHeartbeatTime = Objects.requireNonNull(lastHeartbeatTime);
            return this;
        }
        @CustomType.Setter
        public Builder lastStateTime(String lastStateTime) {
            this.lastStateTime = Objects.requireNonNull(lastStateTime);
            return this;
        }
        @CustomType.Setter
        public Builder logLevel(String logLevel) {
            this.logLevel = Objects.requireNonNull(logLevel);
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,String> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numId(String numId) {
            this.numId = Objects.requireNonNull(numId);
            return this;
        }
        @CustomType.Setter
        public Builder state(DeviceStateResponse state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public GetDeviceResult build() {
            final var o = new GetDeviceResult();
            o.blocked = blocked;
            o.config = config;
            o.credentials = credentials;
            o.gatewayConfig = gatewayConfig;
            o.lastConfigAckTime = lastConfigAckTime;
            o.lastConfigSendTime = lastConfigSendTime;
            o.lastErrorStatus = lastErrorStatus;
            o.lastErrorTime = lastErrorTime;
            o.lastEventTime = lastEventTime;
            o.lastHeartbeatTime = lastHeartbeatTime;
            o.lastStateTime = lastStateTime;
            o.logLevel = logLevel;
            o.metadata = metadata;
            o.name = name;
            o.numId = numId;
            o.state = state;
            return o;
        }
    }
}
