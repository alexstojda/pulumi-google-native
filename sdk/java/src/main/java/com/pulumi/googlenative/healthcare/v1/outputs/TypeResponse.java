// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.healthcare.v1.outputs.FieldResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class TypeResponse {
    /**
     * @return The (sub) fields this type has (if not primitive).
     * 
     */
    private List<FieldResponse> fields;
    /**
     * @return The name of this type. This would be the segment or datatype name. For example, &#34;PID&#34; or &#34;XPN&#34;.
     * 
     */
    private String name;
    /**
     * @return If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
     * 
     */
    private String primitive;

    private TypeResponse() {}
    /**
     * @return The (sub) fields this type has (if not primitive).
     * 
     */
    public List<FieldResponse> fields() {
        return this.fields;
    }
    /**
     * @return The name of this type. This would be the segment or datatype name. For example, &#34;PID&#34; or &#34;XPN&#34;.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
     * 
     */
    public String primitive() {
        return this.primitive;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<FieldResponse> fields;
        private String name;
        private String primitive;
        public Builder() {}
        public Builder(TypeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fields = defaults.fields;
    	      this.name = defaults.name;
    	      this.primitive = defaults.primitive;
        }

        @CustomType.Setter
        public Builder fields(List<FieldResponse> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(FieldResponse... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder primitive(String primitive) {
            this.primitive = Objects.requireNonNull(primitive);
            return this;
        }
        public TypeResponse build() {
            final var o = new TypeResponse();
            o.fields = fields;
            o.name = name;
            o.primitive = primitive;
            return o;
        }
    }
}
