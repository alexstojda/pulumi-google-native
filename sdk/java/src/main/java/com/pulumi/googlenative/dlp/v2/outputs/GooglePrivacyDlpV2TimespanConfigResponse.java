// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dlp.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dlp.v2.outputs.GooglePrivacyDlpV2FieldIdResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GooglePrivacyDlpV2TimespanConfigResponse {
    /**
     * @return When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger.
     * 
     */
    private Boolean enableAutoPopulationOfTimespanConfig;
    /**
     * @return Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
     * 
     */
    private String endTime;
    /**
     * @return Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
     * 
     */
    private String startTime;
    /**
     * @return Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. For BigQuery: If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. For Datastore: If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`.
     * 
     */
    private GooglePrivacyDlpV2FieldIdResponse timestampField;

    private GooglePrivacyDlpV2TimespanConfigResponse() {}
    /**
     * @return When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger.
     * 
     */
    public Boolean enableAutoPopulationOfTimespanConfig() {
        return this.enableAutoPopulationOfTimespanConfig;
    }
    /**
     * @return Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. For BigQuery: If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. For Datastore: If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`.
     * 
     */
    public GooglePrivacyDlpV2FieldIdResponse timestampField() {
        return this.timestampField;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GooglePrivacyDlpV2TimespanConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableAutoPopulationOfTimespanConfig;
        private String endTime;
        private String startTime;
        private GooglePrivacyDlpV2FieldIdResponse timestampField;
        public Builder() {}
        public Builder(GooglePrivacyDlpV2TimespanConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableAutoPopulationOfTimespanConfig = defaults.enableAutoPopulationOfTimespanConfig;
    	      this.endTime = defaults.endTime;
    	      this.startTime = defaults.startTime;
    	      this.timestampField = defaults.timestampField;
        }

        @CustomType.Setter
        public Builder enableAutoPopulationOfTimespanConfig(Boolean enableAutoPopulationOfTimespanConfig) {
            this.enableAutoPopulationOfTimespanConfig = Objects.requireNonNull(enableAutoPopulationOfTimespanConfig);
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        @CustomType.Setter
        public Builder timestampField(GooglePrivacyDlpV2FieldIdResponse timestampField) {
            this.timestampField = Objects.requireNonNull(timestampField);
            return this;
        }
        public GooglePrivacyDlpV2TimespanConfigResponse build() {
            final var o = new GooglePrivacyDlpV2TimespanConfigResponse();
            o.enableAutoPopulationOfTimespanConfig = enableAutoPopulationOfTimespanConfig;
            o.endTime = endTime;
            o.startTime = startTime;
            o.timestampField = timestampField;
            return o;
        }
    }
}
