// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1beta4.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.sqladmin.v1beta4.outputs.InstanceReferenceResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class OnPremisesConfigurationResponse {
    /**
     * @return PEM representation of the trusted CA&#39;s x509 certificate.
     * 
     */
    private String caCertificate;
    /**
     * @return PEM representation of the replica&#39;s x509 certificate.
     * 
     */
    private String clientCertificate;
    /**
     * @return PEM representation of the replica&#39;s private key. The corresponsing public key is encoded in the client&#39;s certificate.
     * 
     */
    private String clientKey;
    /**
     * @return The dump file to create the Cloud SQL replica.
     * 
     */
    private String dumpFilePath;
    /**
     * @return The host and port of the on-premises instance in host:port format
     * 
     */
    private String hostPort;
    /**
     * @return This is always `sql#onPremisesConfiguration`.
     * 
     */
    private String kind;
    /**
     * @return The password for connecting to on-premises instance.
     * 
     */
    private String password;
    /**
     * @return The reference to Cloud SQL instance if the source is Cloud SQL.
     * 
     */
    private InstanceReferenceResponse sourceInstance;
    /**
     * @return The username for connecting to on-premises instance.
     * 
     */
    private String username;

    private OnPremisesConfigurationResponse() {}
    /**
     * @return PEM representation of the trusted CA&#39;s x509 certificate.
     * 
     */
    public String caCertificate() {
        return this.caCertificate;
    }
    /**
     * @return PEM representation of the replica&#39;s x509 certificate.
     * 
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }
    /**
     * @return PEM representation of the replica&#39;s private key. The corresponsing public key is encoded in the client&#39;s certificate.
     * 
     */
    public String clientKey() {
        return this.clientKey;
    }
    /**
     * @return The dump file to create the Cloud SQL replica.
     * 
     */
    public String dumpFilePath() {
        return this.dumpFilePath;
    }
    /**
     * @return The host and port of the on-premises instance in host:port format
     * 
     */
    public String hostPort() {
        return this.hostPort;
    }
    /**
     * @return This is always `sql#onPremisesConfiguration`.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The password for connecting to on-premises instance.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The reference to Cloud SQL instance if the source is Cloud SQL.
     * 
     */
    public InstanceReferenceResponse sourceInstance() {
        return this.sourceInstance;
    }
    /**
     * @return The username for connecting to on-premises instance.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OnPremisesConfigurationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private String dumpFilePath;
        private String hostPort;
        private String kind;
        private String password;
        private InstanceReferenceResponse sourceInstance;
        private String username;
        public Builder() {}
        public Builder(OnPremisesConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.hostPort = defaults.hostPort;
    	      this.kind = defaults.kind;
    	      this.password = defaults.password;
    	      this.sourceInstance = defaults.sourceInstance;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder caCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        @CustomType.Setter
        public Builder dumpFilePath(String dumpFilePath) {
            this.dumpFilePath = Objects.requireNonNull(dumpFilePath);
            return this;
        }
        @CustomType.Setter
        public Builder hostPort(String hostPort) {
            this.hostPort = Objects.requireNonNull(hostPort);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInstance(InstanceReferenceResponse sourceInstance) {
            this.sourceInstance = Objects.requireNonNull(sourceInstance);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public OnPremisesConfigurationResponse build() {
            final var o = new OnPremisesConfigurationResponse();
            o.caCertificate = caCertificate;
            o.clientCertificate = clientCertificate;
            o.clientKey = clientKey;
            o.dumpFilePath = dumpFilePath;
            o.hostPort = hostPort;
            o.kind = kind;
            o.password = password;
            o.sourceInstance = sourceInstance;
            o.username = username;
            return o;
        }
    }
}
