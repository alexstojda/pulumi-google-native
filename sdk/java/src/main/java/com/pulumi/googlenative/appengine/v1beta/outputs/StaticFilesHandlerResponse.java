// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class StaticFilesHandlerResponse {
    /**
     * @return Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
     * 
     */
    private Boolean applicationReadable;
    /**
     * @return Time a static file served by this handler should be cached by web proxies and browsers.
     * 
     */
    private String expiration;
    /**
     * @return HTTP headers to use for all responses from these URLs.
     * 
     */
    private Map<String,String> httpHeaders;
    /**
     * @return MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.
     * 
     */
    private String mimeType;
    /**
     * @return Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
     * 
     */
    private String path;
    /**
     * @return Whether this handler should match the request if the file referenced by the handler does not exist.
     * 
     */
    private Boolean requireMatchingFile;
    /**
     * @return Regular expression that matches the file paths for all files that should be referenced by this handler.
     * 
     */
    private String uploadPathRegex;

    private StaticFilesHandlerResponse() {}
    /**
     * @return Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
     * 
     */
    public Boolean applicationReadable() {
        return this.applicationReadable;
    }
    /**
     * @return Time a static file served by this handler should be cached by web proxies and browsers.
     * 
     */
    public String expiration() {
        return this.expiration;
    }
    /**
     * @return HTTP headers to use for all responses from these URLs.
     * 
     */
    public Map<String,String> httpHeaders() {
        return this.httpHeaders;
    }
    /**
     * @return MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file&#39;s filename extension.
     * 
     */
    public String mimeType() {
        return this.mimeType;
    }
    /**
     * @return Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Whether this handler should match the request if the file referenced by the handler does not exist.
     * 
     */
    public Boolean requireMatchingFile() {
        return this.requireMatchingFile;
    }
    /**
     * @return Regular expression that matches the file paths for all files that should be referenced by this handler.
     * 
     */
    public String uploadPathRegex() {
        return this.uploadPathRegex;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StaticFilesHandlerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean applicationReadable;
        private String expiration;
        private Map<String,String> httpHeaders;
        private String mimeType;
        private String path;
        private Boolean requireMatchingFile;
        private String uploadPathRegex;
        public Builder() {}
        public Builder(StaticFilesHandlerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationReadable = defaults.applicationReadable;
    	      this.expiration = defaults.expiration;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.mimeType = defaults.mimeType;
    	      this.path = defaults.path;
    	      this.requireMatchingFile = defaults.requireMatchingFile;
    	      this.uploadPathRegex = defaults.uploadPathRegex;
        }

        @CustomType.Setter
        public Builder applicationReadable(Boolean applicationReadable) {
            this.applicationReadable = Objects.requireNonNull(applicationReadable);
            return this;
        }
        @CustomType.Setter
        public Builder expiration(String expiration) {
            this.expiration = Objects.requireNonNull(expiration);
            return this;
        }
        @CustomType.Setter
        public Builder httpHeaders(Map<String,String> httpHeaders) {
            this.httpHeaders = Objects.requireNonNull(httpHeaders);
            return this;
        }
        @CustomType.Setter
        public Builder mimeType(String mimeType) {
            this.mimeType = Objects.requireNonNull(mimeType);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder requireMatchingFile(Boolean requireMatchingFile) {
            this.requireMatchingFile = Objects.requireNonNull(requireMatchingFile);
            return this;
        }
        @CustomType.Setter
        public Builder uploadPathRegex(String uploadPathRegex) {
            this.uploadPathRegex = Objects.requireNonNull(uploadPathRegex);
            return this;
        }
        public StaticFilesHandlerResponse build() {
            final var o = new StaticFilesHandlerResponse();
            o.applicationReadable = applicationReadable;
            o.expiration = expiration;
            o.httpHeaders = httpHeaders;
            o.mimeType = mimeType;
            o.path = path;
            o.requireMatchingFile = requireMatchingFile;
            o.uploadPathRegex = uploadPathRegex;
            return o;
        }
    }
}
