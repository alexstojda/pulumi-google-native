// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.servicemanagement.v1.outputs.DocumentationRuleResponse;
import com.pulumi.googlenative.servicemanagement.v1.outputs.PageResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DocumentationResponse {
    /**
     * @return The URL to the root of documentation.
     * 
     */
    private String documentationRootUrl;
    /**
     * @return Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
     * 
     */
    private String overview;
    /**
     * @return The top level pages for the documentation set.
     * 
     */
    private List<PageResponse> pages;
    /**
     * @return A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    private List<DocumentationRuleResponse> rules;
    /**
     * @return Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
     * 
     */
    private String serviceRootUrl;
    /**
     * @return A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
     * 
     */
    private String summary;

    private DocumentationResponse() {}
    /**
     * @return The URL to the root of documentation.
     * 
     */
    public String documentationRootUrl() {
        return this.documentationRootUrl;
    }
    /**
     * @return Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
     * 
     */
    public String overview() {
        return this.overview;
    }
    /**
     * @return The top level pages for the documentation set.
     * 
     */
    public List<PageResponse> pages() {
        return this.pages;
    }
    /**
     * @return A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow &#34;last one wins&#34; order.
     * 
     */
    public List<DocumentationRuleResponse> rules() {
        return this.rules;
    }
    /**
     * @return Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
     * 
     */
    public String serviceRootUrl() {
        return this.serviceRootUrl;
    }
    /**
     * @return A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
     * 
     */
    public String summary() {
        return this.summary;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DocumentationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String documentationRootUrl;
        private String overview;
        private List<PageResponse> pages;
        private List<DocumentationRuleResponse> rules;
        private String serviceRootUrl;
        private String summary;
        public Builder() {}
        public Builder(DocumentationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.documentationRootUrl = defaults.documentationRootUrl;
    	      this.overview = defaults.overview;
    	      this.pages = defaults.pages;
    	      this.rules = defaults.rules;
    	      this.serviceRootUrl = defaults.serviceRootUrl;
    	      this.summary = defaults.summary;
        }

        @CustomType.Setter
        public Builder documentationRootUrl(String documentationRootUrl) {
            this.documentationRootUrl = Objects.requireNonNull(documentationRootUrl);
            return this;
        }
        @CustomType.Setter
        public Builder overview(String overview) {
            this.overview = Objects.requireNonNull(overview);
            return this;
        }
        @CustomType.Setter
        public Builder pages(List<PageResponse> pages) {
            this.pages = Objects.requireNonNull(pages);
            return this;
        }
        public Builder pages(PageResponse... pages) {
            return pages(List.of(pages));
        }
        @CustomType.Setter
        public Builder rules(List<DocumentationRuleResponse> rules) {
            this.rules = Objects.requireNonNull(rules);
            return this;
        }
        public Builder rules(DocumentationRuleResponse... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder serviceRootUrl(String serviceRootUrl) {
            this.serviceRootUrl = Objects.requireNonNull(serviceRootUrl);
            return this;
        }
        @CustomType.Setter
        public Builder summary(String summary) {
            this.summary = Objects.requireNonNull(summary);
            return this;
        }
        public DocumentationResponse build() {
            final var o = new DocumentationResponse();
            o.documentationRootUrl = documentationRootUrl;
            o.overview = overview;
            o.pages = pages;
            o.rules = rules;
            o.serviceRootUrl = serviceRootUrl;
            o.summary = summary;
            return o;
        }
    }
}
