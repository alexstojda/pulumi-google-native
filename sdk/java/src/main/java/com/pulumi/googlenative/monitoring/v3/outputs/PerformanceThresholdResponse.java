// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.monitoring.v3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.monitoring.v3.outputs.BasicSliResponse;
import com.pulumi.googlenative.monitoring.v3.outputs.RequestBasedSliResponse;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class PerformanceThresholdResponse {
    /**
     * @return BasicSli to evaluate to judge window quality.
     * 
     */
    private BasicSliResponse basicSliPerformance;
    /**
     * @return RequestBasedSli to evaluate to judge window quality.
     * 
     */
    private RequestBasedSliResponse performance;
    /**
     * @return If window performance &gt;= threshold, the window is counted as good.
     * 
     */
    private Double threshold;

    private PerformanceThresholdResponse() {}
    /**
     * @return BasicSli to evaluate to judge window quality.
     * 
     */
    public BasicSliResponse basicSliPerformance() {
        return this.basicSliPerformance;
    }
    /**
     * @return RequestBasedSli to evaluate to judge window quality.
     * 
     */
    public RequestBasedSliResponse performance() {
        return this.performance;
    }
    /**
     * @return If window performance &gt;= threshold, the window is counted as good.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PerformanceThresholdResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private BasicSliResponse basicSliPerformance;
        private RequestBasedSliResponse performance;
        private Double threshold;
        public Builder() {}
        public Builder(PerformanceThresholdResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.basicSliPerformance = defaults.basicSliPerformance;
    	      this.performance = defaults.performance;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder basicSliPerformance(BasicSliResponse basicSliPerformance) {
            this.basicSliPerformance = Objects.requireNonNull(basicSliPerformance);
            return this;
        }
        @CustomType.Setter
        public Builder performance(RequestBasedSliResponse performance) {
            this.performance = Objects.requireNonNull(performance);
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public PerformanceThresholdResponse build() {
            final var o = new PerformanceThresholdResponse();
            o.basicSliPerformance = basicSliPerformance;
            o.performance = performance;
            o.threshold = threshold;
            return o;
        }
    }
}
