// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project&#39;s Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
 * 
 */
public final class KmsWrappedCryptoKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final KmsWrappedCryptoKeyArgs Empty = new KmsWrappedCryptoKeyArgs();

    /**
     * The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
     * 
     */
    @Import(name="cryptoKey", required=true)
    private Output<String> cryptoKey;

    /**
     * @return The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
     * 
     */
    public Output<String> cryptoKey() {
        return this.cryptoKey;
    }

    /**
     * The wrapped data crypto key.
     * 
     */
    @Import(name="wrappedKey", required=true)
    private Output<String> wrappedKey;

    /**
     * @return The wrapped data crypto key.
     * 
     */
    public Output<String> wrappedKey() {
        return this.wrappedKey;
    }

    private KmsWrappedCryptoKeyArgs() {}

    private KmsWrappedCryptoKeyArgs(KmsWrappedCryptoKeyArgs $) {
        this.cryptoKey = $.cryptoKey;
        this.wrappedKey = $.wrappedKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KmsWrappedCryptoKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KmsWrappedCryptoKeyArgs $;

        public Builder() {
            $ = new KmsWrappedCryptoKeyArgs();
        }

        public Builder(KmsWrappedCryptoKeyArgs defaults) {
            $ = new KmsWrappedCryptoKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cryptoKey The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(Output<String> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        /**
         * @param wrappedKey The wrapped data crypto key.
         * 
         * @return builder
         * 
         */
        public Builder wrappedKey(Output<String> wrappedKey) {
            $.wrappedKey = wrappedKey;
            return this;
        }

        /**
         * @param wrappedKey The wrapped data crypto key.
         * 
         * @return builder
         * 
         */
        public Builder wrappedKey(String wrappedKey) {
            return wrappedKey(Output.of(wrappedKey));
        }

        public KmsWrappedCryptoKeyArgs build() {
            $.cryptoKey = Objects.requireNonNull($.cryptoKey, "expected parameter 'cryptoKey' to be non-null");
            $.wrappedKey = Objects.requireNonNull($.wrappedKey, "expected parameter 'wrappedKey' to be non-null");
            return $;
        }
    }

}
