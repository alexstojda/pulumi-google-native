// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1beta.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class NetworkResponse {
    /**
     * @return List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
     * 
     */
    private List<String> forwardedPorts;
    /**
     * @return The IP mode for instances. Only applicable in the App Engine flexible environment.
     * 
     */
    private String instanceIpMode;
    /**
     * @return Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
     * 
     */
    private String instanceTag;
    /**
     * @return Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
     * 
     */
    private String name;
    /**
     * @return Enable session affinity. Only applicable in the App Engine flexible environment.
     * 
     */
    private Boolean sessionAffinity;
    /**
     * @return Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
     * 
     */
    private String subnetworkName;

    private NetworkResponse() {}
    /**
     * @return List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
     * 
     */
    public List<String> forwardedPorts() {
        return this.forwardedPorts;
    }
    /**
     * @return The IP mode for instances. Only applicable in the App Engine flexible environment.
     * 
     */
    public String instanceIpMode() {
        return this.instanceIpMode;
    }
    /**
     * @return Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
     * 
     */
    public String instanceTag() {
        return this.instanceTag;
    }
    /**
     * @return Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable session affinity. Only applicable in the App Engine flexible environment.
     * 
     */
    public Boolean sessionAffinity() {
        return this.sessionAffinity;
    }
    /**
     * @return Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
     * 
     */
    public String subnetworkName() {
        return this.subnetworkName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> forwardedPorts;
        private String instanceIpMode;
        private String instanceTag;
        private String name;
        private Boolean sessionAffinity;
        private String subnetworkName;
        public Builder() {}
        public Builder(NetworkResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.forwardedPorts = defaults.forwardedPorts;
    	      this.instanceIpMode = defaults.instanceIpMode;
    	      this.instanceTag = defaults.instanceTag;
    	      this.name = defaults.name;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.subnetworkName = defaults.subnetworkName;
        }

        @CustomType.Setter
        public Builder forwardedPorts(List<String> forwardedPorts) {
            this.forwardedPorts = Objects.requireNonNull(forwardedPorts);
            return this;
        }
        public Builder forwardedPorts(String... forwardedPorts) {
            return forwardedPorts(List.of(forwardedPorts));
        }
        @CustomType.Setter
        public Builder instanceIpMode(String instanceIpMode) {
            this.instanceIpMode = Objects.requireNonNull(instanceIpMode);
            return this;
        }
        @CustomType.Setter
        public Builder instanceTag(String instanceTag) {
            this.instanceTag = Objects.requireNonNull(instanceTag);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinity(Boolean sessionAffinity) {
            this.sessionAffinity = Objects.requireNonNull(sessionAffinity);
            return this;
        }
        @CustomType.Setter
        public Builder subnetworkName(String subnetworkName) {
            this.subnetworkName = Objects.requireNonNull(subnetworkName);
            return this;
        }
        public NetworkResponse build() {
            final var o = new NetworkResponse();
            o.forwardedPorts = forwardedPorts;
            o.instanceIpMode = instanceIpMode;
            o.instanceTag = instanceTag;
            o.name = name;
            o.sessionAffinity = sessionAffinity;
            o.subnetworkName = subnetworkName;
            return o;
        }
    }
}
