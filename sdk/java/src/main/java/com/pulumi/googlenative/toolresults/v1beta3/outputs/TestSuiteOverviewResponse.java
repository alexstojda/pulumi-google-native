// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.toolresults.v1beta3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.toolresults.v1beta3.outputs.DurationResponse;
import com.pulumi.googlenative.toolresults.v1beta3.outputs.FileReferenceResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class TestSuiteOverviewResponse {
    /**
     * @return Elapsed time of test suite.
     * 
     */
    private DurationResponse elapsedTime;
    /**
     * @return Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    private Integer errorCount;
    /**
     * @return Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     * 
     */
    private Integer failureCount;
    /**
     * @return Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     * 
     */
    private Integer flakyCount;
    /**
     * @return The name of the test suite. - In create/response: always set - In update request: never
     * 
     */
    private String name;
    /**
     * @return Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    private Integer skippedCount;
    /**
     * @return Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    private Integer totalCount;
    /**
     * @return If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     * 
     */
    private FileReferenceResponse xmlSource;

    private TestSuiteOverviewResponse() {}
    /**
     * @return Elapsed time of test suite.
     * 
     */
    public DurationResponse elapsedTime() {
        return this.elapsedTime;
    }
    /**
     * @return Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    public Integer errorCount() {
        return this.errorCount;
    }
    /**
     * @return Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     * 
     */
    public Integer failureCount() {
        return this.failureCount;
    }
    /**
     * @return Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     * 
     */
    public Integer flakyCount() {
        return this.flakyCount;
    }
    /**
     * @return The name of the test suite. - In create/response: always set - In update request: never
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    public Integer skippedCount() {
        return this.skippedCount;
    }
    /**
     * @return Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     * 
     */
    public Integer totalCount() {
        return this.totalCount;
    }
    /**
     * @return If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     * 
     */
    public FileReferenceResponse xmlSource() {
        return this.xmlSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TestSuiteOverviewResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private DurationResponse elapsedTime;
        private Integer errorCount;
        private Integer failureCount;
        private Integer flakyCount;
        private String name;
        private Integer skippedCount;
        private Integer totalCount;
        private FileReferenceResponse xmlSource;
        public Builder() {}
        public Builder(TestSuiteOverviewResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elapsedTime = defaults.elapsedTime;
    	      this.errorCount = defaults.errorCount;
    	      this.failureCount = defaults.failureCount;
    	      this.flakyCount = defaults.flakyCount;
    	      this.name = defaults.name;
    	      this.skippedCount = defaults.skippedCount;
    	      this.totalCount = defaults.totalCount;
    	      this.xmlSource = defaults.xmlSource;
        }

        @CustomType.Setter
        public Builder elapsedTime(DurationResponse elapsedTime) {
            this.elapsedTime = Objects.requireNonNull(elapsedTime);
            return this;
        }
        @CustomType.Setter
        public Builder errorCount(Integer errorCount) {
            this.errorCount = Objects.requireNonNull(errorCount);
            return this;
        }
        @CustomType.Setter
        public Builder failureCount(Integer failureCount) {
            this.failureCount = Objects.requireNonNull(failureCount);
            return this;
        }
        @CustomType.Setter
        public Builder flakyCount(Integer flakyCount) {
            this.flakyCount = Objects.requireNonNull(flakyCount);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder skippedCount(Integer skippedCount) {
            this.skippedCount = Objects.requireNonNull(skippedCount);
            return this;
        }
        @CustomType.Setter
        public Builder totalCount(Integer totalCount) {
            this.totalCount = Objects.requireNonNull(totalCount);
            return this;
        }
        @CustomType.Setter
        public Builder xmlSource(FileReferenceResponse xmlSource) {
            this.xmlSource = Objects.requireNonNull(xmlSource);
            return this;
        }
        public TestSuiteOverviewResponse build() {
            final var o = new TestSuiteOverviewResponse();
            o.elapsedTime = elapsedTime;
            o.errorCount = errorCount;
            o.failureCount = failureCount;
            o.flakyCount = flakyCount;
            o.name = name;
            o.skippedCount = skippedCount;
            o.totalCount = totalCount;
            o.xmlSource = xmlSource;
            return o;
        }
    }
}
