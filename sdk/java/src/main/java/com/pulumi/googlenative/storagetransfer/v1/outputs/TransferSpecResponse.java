// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.storagetransfer.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.storagetransfer.v1.outputs.AwsS3CompatibleDataResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.AwsS3DataResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.AzureBlobStorageDataResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.GcsDataResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.HttpDataResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.ObjectConditionsResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.PosixFilesystemResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.TransferManifestResponse;
import com.pulumi.googlenative.storagetransfer.v1.outputs.TransferOptionsResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class TransferSpecResponse {
    /**
     * @return An AWS S3 compatible data source.
     * 
     */
    private AwsS3CompatibleDataResponse awsS3CompatibleDataSource;
    /**
     * @return An AWS S3 data source.
     * 
     */
    private AwsS3DataResponse awsS3DataSource;
    /**
     * @return An Azure Blob Storage data source.
     * 
     */
    private AzureBlobStorageDataResponse azureBlobStorageDataSource;
    /**
     * @return A Cloud Storage data sink.
     * 
     */
    private GcsDataResponse gcsDataSink;
    /**
     * @return A Cloud Storage data source.
     * 
     */
    private GcsDataResponse gcsDataSource;
    /**
     * @return Cloud Storage intermediate data location.
     * 
     */
    private GcsDataResponse gcsIntermediateDataLocation;
    /**
     * @return An HTTP URL data source.
     * 
     */
    private HttpDataResponse httpDataSource;
    /**
     * @return Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
     * 
     */
    private ObjectConditionsResponse objectConditions;
    /**
     * @return A POSIX Filesystem data sink.
     * 
     */
    private PosixFilesystemResponse posixDataSink;
    /**
     * @return A POSIX Filesystem data source.
     * 
     */
    private PosixFilesystemResponse posixDataSource;
    /**
     * @return Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    private String sinkAgentPoolName;
    /**
     * @return Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    private String sourceAgentPoolName;
    /**
     * @return A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    private TransferManifestResponse transferManifest;
    /**
     * @return If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    private TransferOptionsResponse transferOptions;

    private TransferSpecResponse() {}
    /**
     * @return An AWS S3 compatible data source.
     * 
     */
    public AwsS3CompatibleDataResponse awsS3CompatibleDataSource() {
        return this.awsS3CompatibleDataSource;
    }
    /**
     * @return An AWS S3 data source.
     * 
     */
    public AwsS3DataResponse awsS3DataSource() {
        return this.awsS3DataSource;
    }
    /**
     * @return An Azure Blob Storage data source.
     * 
     */
    public AzureBlobStorageDataResponse azureBlobStorageDataSource() {
        return this.azureBlobStorageDataSource;
    }
    /**
     * @return A Cloud Storage data sink.
     * 
     */
    public GcsDataResponse gcsDataSink() {
        return this.gcsDataSink;
    }
    /**
     * @return A Cloud Storage data source.
     * 
     */
    public GcsDataResponse gcsDataSource() {
        return this.gcsDataSource;
    }
    /**
     * @return Cloud Storage intermediate data location.
     * 
     */
    public GcsDataResponse gcsIntermediateDataLocation() {
        return this.gcsIntermediateDataLocation;
    }
    /**
     * @return An HTTP URL data source.
     * 
     */
    public HttpDataResponse httpDataSource() {
        return this.httpDataSource;
    }
    /**
     * @return Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects&#39; &#34;last modification time&#34; do not exclude objects in a data sink.
     * 
     */
    public ObjectConditionsResponse objectConditions() {
        return this.objectConditions;
    }
    /**
     * @return A POSIX Filesystem data sink.
     * 
     */
    public PosixFilesystemResponse posixDataSink() {
        return this.posixDataSink;
    }
    /**
     * @return A POSIX Filesystem data source.
     * 
     */
    public PosixFilesystemResponse posixDataSource() {
        return this.posixDataSource;
    }
    /**
     * @return Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
     * 
     */
    public String sinkAgentPoolName() {
        return this.sinkAgentPoolName;
    }
    /**
     * @return Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
     * 
     */
    public String sourceAgentPoolName() {
        return this.sourceAgentPoolName;
    }
    /**
     * @return A manifest file provides a list of objects to be transferred from the data source. This field points to the location of the manifest file. Otherwise, the entire source bucket is used. ObjectConditions still apply.
     * 
     */
    public TransferManifestResponse transferManifest() {
        return this.transferManifest;
    }
    /**
     * @return If the option delete_objects_unique_in_sink is `true` and time-based object conditions such as &#39;last modification time&#39; are specified, the request fails with an INVALID_ARGUMENT error.
     * 
     */
    public TransferOptionsResponse transferOptions() {
        return this.transferOptions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransferSpecResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private AwsS3CompatibleDataResponse awsS3CompatibleDataSource;
        private AwsS3DataResponse awsS3DataSource;
        private AzureBlobStorageDataResponse azureBlobStorageDataSource;
        private GcsDataResponse gcsDataSink;
        private GcsDataResponse gcsDataSource;
        private GcsDataResponse gcsIntermediateDataLocation;
        private HttpDataResponse httpDataSource;
        private ObjectConditionsResponse objectConditions;
        private PosixFilesystemResponse posixDataSink;
        private PosixFilesystemResponse posixDataSource;
        private String sinkAgentPoolName;
        private String sourceAgentPoolName;
        private TransferManifestResponse transferManifest;
        private TransferOptionsResponse transferOptions;
        public Builder() {}
        public Builder(TransferSpecResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsS3CompatibleDataSource = defaults.awsS3CompatibleDataSource;
    	      this.awsS3DataSource = defaults.awsS3DataSource;
    	      this.azureBlobStorageDataSource = defaults.azureBlobStorageDataSource;
    	      this.gcsDataSink = defaults.gcsDataSink;
    	      this.gcsDataSource = defaults.gcsDataSource;
    	      this.gcsIntermediateDataLocation = defaults.gcsIntermediateDataLocation;
    	      this.httpDataSource = defaults.httpDataSource;
    	      this.objectConditions = defaults.objectConditions;
    	      this.posixDataSink = defaults.posixDataSink;
    	      this.posixDataSource = defaults.posixDataSource;
    	      this.sinkAgentPoolName = defaults.sinkAgentPoolName;
    	      this.sourceAgentPoolName = defaults.sourceAgentPoolName;
    	      this.transferManifest = defaults.transferManifest;
    	      this.transferOptions = defaults.transferOptions;
        }

        @CustomType.Setter
        public Builder awsS3CompatibleDataSource(AwsS3CompatibleDataResponse awsS3CompatibleDataSource) {
            this.awsS3CompatibleDataSource = Objects.requireNonNull(awsS3CompatibleDataSource);
            return this;
        }
        @CustomType.Setter
        public Builder awsS3DataSource(AwsS3DataResponse awsS3DataSource) {
            this.awsS3DataSource = Objects.requireNonNull(awsS3DataSource);
            return this;
        }
        @CustomType.Setter
        public Builder azureBlobStorageDataSource(AzureBlobStorageDataResponse azureBlobStorageDataSource) {
            this.azureBlobStorageDataSource = Objects.requireNonNull(azureBlobStorageDataSource);
            return this;
        }
        @CustomType.Setter
        public Builder gcsDataSink(GcsDataResponse gcsDataSink) {
            this.gcsDataSink = Objects.requireNonNull(gcsDataSink);
            return this;
        }
        @CustomType.Setter
        public Builder gcsDataSource(GcsDataResponse gcsDataSource) {
            this.gcsDataSource = Objects.requireNonNull(gcsDataSource);
            return this;
        }
        @CustomType.Setter
        public Builder gcsIntermediateDataLocation(GcsDataResponse gcsIntermediateDataLocation) {
            this.gcsIntermediateDataLocation = Objects.requireNonNull(gcsIntermediateDataLocation);
            return this;
        }
        @CustomType.Setter
        public Builder httpDataSource(HttpDataResponse httpDataSource) {
            this.httpDataSource = Objects.requireNonNull(httpDataSource);
            return this;
        }
        @CustomType.Setter
        public Builder objectConditions(ObjectConditionsResponse objectConditions) {
            this.objectConditions = Objects.requireNonNull(objectConditions);
            return this;
        }
        @CustomType.Setter
        public Builder posixDataSink(PosixFilesystemResponse posixDataSink) {
            this.posixDataSink = Objects.requireNonNull(posixDataSink);
            return this;
        }
        @CustomType.Setter
        public Builder posixDataSource(PosixFilesystemResponse posixDataSource) {
            this.posixDataSource = Objects.requireNonNull(posixDataSource);
            return this;
        }
        @CustomType.Setter
        public Builder sinkAgentPoolName(String sinkAgentPoolName) {
            this.sinkAgentPoolName = Objects.requireNonNull(sinkAgentPoolName);
            return this;
        }
        @CustomType.Setter
        public Builder sourceAgentPoolName(String sourceAgentPoolName) {
            this.sourceAgentPoolName = Objects.requireNonNull(sourceAgentPoolName);
            return this;
        }
        @CustomType.Setter
        public Builder transferManifest(TransferManifestResponse transferManifest) {
            this.transferManifest = Objects.requireNonNull(transferManifest);
            return this;
        }
        @CustomType.Setter
        public Builder transferOptions(TransferOptionsResponse transferOptions) {
            this.transferOptions = Objects.requireNonNull(transferOptions);
            return this;
        }
        public TransferSpecResponse build() {
            final var o = new TransferSpecResponse();
            o.awsS3CompatibleDataSource = awsS3CompatibleDataSource;
            o.awsS3DataSource = awsS3DataSource;
            o.azureBlobStorageDataSource = azureBlobStorageDataSource;
            o.gcsDataSink = gcsDataSink;
            o.gcsDataSource = gcsDataSource;
            o.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
            o.httpDataSource = httpDataSource;
            o.objectConditions = objectConditions;
            o.posixDataSink = posixDataSink;
            o.posixDataSource = posixDataSource;
            o.sinkAgentPoolName = sinkAgentPoolName;
            o.sourceAgentPoolName = sourceAgentPoolName;
            o.transferManifest = transferManifest;
            o.transferOptions = transferOptions;
            return o;
        }
    }
}
