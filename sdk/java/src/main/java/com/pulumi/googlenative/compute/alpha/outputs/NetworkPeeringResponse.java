// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.compute.alpha.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class NetworkPeeringResponse {
    /**
     * @return Whether Cloud Routers in this network can automatically advertise subnets from the peer network.
     * 
     */
    private Boolean advertisePeerSubnetsViaRouters;
    /**
     * @return This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     * 
     */
    private Boolean autoCreateRoutes;
    /**
     * @return Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     * 
     */
    private Boolean exchangeSubnetRoutes;
    /**
     * @return Whether to export the custom routes to peer network. The default value is false.
     * 
     */
    private Boolean exportCustomRoutes;
    /**
     * @return Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
     * 
     */
    private Boolean exportSubnetRoutesWithPublicIp;
    /**
     * @return Whether to import the custom routes from peer network. The default value is false.
     * 
     */
    private Boolean importCustomRoutes;
    /**
     * @return Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
     * 
     */
    private Boolean importSubnetRoutesWithPublicIp;
    /**
     * @return Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    private String name;
    /**
     * @return The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
     * 
     */
    private String network;
    /**
     * @return Maximum Transmission Unit in bytes.
     * 
     */
    private Integer peerMtu;
    /**
     * @return Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
     * 
     */
    private String stackType;
    /**
     * @return State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there&#39;s a matching configuration in the peer network.
     * 
     */
    private String state;
    /**
     * @return Details about the current state of the peering.
     * 
     */
    private String stateDetails;

    private NetworkPeeringResponse() {}
    /**
     * @return Whether Cloud Routers in this network can automatically advertise subnets from the peer network.
     * 
     */
    public Boolean advertisePeerSubnetsViaRouters() {
        return this.advertisePeerSubnetsViaRouters;
    }
    /**
     * @return This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     * 
     */
    public Boolean autoCreateRoutes() {
        return this.autoCreateRoutes;
    }
    /**
     * @return Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     * 
     */
    public Boolean exchangeSubnetRoutes() {
        return this.exchangeSubnetRoutes;
    }
    /**
     * @return Whether to export the custom routes to peer network. The default value is false.
     * 
     */
    public Boolean exportCustomRoutes() {
        return this.exportCustomRoutes;
    }
    /**
     * @return Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
     * 
     */
    public Boolean exportSubnetRoutesWithPublicIp() {
        return this.exportSubnetRoutesWithPublicIp;
    }
    /**
     * @return Whether to import the custom routes from peer network. The default value is false.
     * 
     */
    public Boolean importCustomRoutes() {
        return this.importCustomRoutes;
    }
    /**
     * @return Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
     * 
     */
    public Boolean importSubnetRoutesWithPublicIp() {
        return this.importSubnetRoutesWithPublicIp;
    }
    /**
     * @return Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return Maximum Transmission Unit in bytes.
     * 
     */
    public Integer peerMtu() {
        return this.peerMtu;
    }
    /**
     * @return Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
     * 
     */
    public String stackType() {
        return this.stackType;
    }
    /**
     * @return State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there&#39;s a matching configuration in the peer network.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Details about the current state of the peering.
     * 
     */
    public String stateDetails() {
        return this.stateDetails;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkPeeringResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean advertisePeerSubnetsViaRouters;
        private Boolean autoCreateRoutes;
        private Boolean exchangeSubnetRoutes;
        private Boolean exportCustomRoutes;
        private Boolean exportSubnetRoutesWithPublicIp;
        private Boolean importCustomRoutes;
        private Boolean importSubnetRoutesWithPublicIp;
        private String name;
        private String network;
        private Integer peerMtu;
        private String stackType;
        private String state;
        private String stateDetails;
        public Builder() {}
        public Builder(NetworkPeeringResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertisePeerSubnetsViaRouters = defaults.advertisePeerSubnetsViaRouters;
    	      this.autoCreateRoutes = defaults.autoCreateRoutes;
    	      this.exchangeSubnetRoutes = defaults.exchangeSubnetRoutes;
    	      this.exportCustomRoutes = defaults.exportCustomRoutes;
    	      this.exportSubnetRoutesWithPublicIp = defaults.exportSubnetRoutesWithPublicIp;
    	      this.importCustomRoutes = defaults.importCustomRoutes;
    	      this.importSubnetRoutesWithPublicIp = defaults.importSubnetRoutesWithPublicIp;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.peerMtu = defaults.peerMtu;
    	      this.stackType = defaults.stackType;
    	      this.state = defaults.state;
    	      this.stateDetails = defaults.stateDetails;
        }

        @CustomType.Setter
        public Builder advertisePeerSubnetsViaRouters(Boolean advertisePeerSubnetsViaRouters) {
            this.advertisePeerSubnetsViaRouters = Objects.requireNonNull(advertisePeerSubnetsViaRouters);
            return this;
        }
        @CustomType.Setter
        public Builder autoCreateRoutes(Boolean autoCreateRoutes) {
            this.autoCreateRoutes = Objects.requireNonNull(autoCreateRoutes);
            return this;
        }
        @CustomType.Setter
        public Builder exchangeSubnetRoutes(Boolean exchangeSubnetRoutes) {
            this.exchangeSubnetRoutes = Objects.requireNonNull(exchangeSubnetRoutes);
            return this;
        }
        @CustomType.Setter
        public Builder exportCustomRoutes(Boolean exportCustomRoutes) {
            this.exportCustomRoutes = Objects.requireNonNull(exportCustomRoutes);
            return this;
        }
        @CustomType.Setter
        public Builder exportSubnetRoutesWithPublicIp(Boolean exportSubnetRoutesWithPublicIp) {
            this.exportSubnetRoutesWithPublicIp = Objects.requireNonNull(exportSubnetRoutesWithPublicIp);
            return this;
        }
        @CustomType.Setter
        public Builder importCustomRoutes(Boolean importCustomRoutes) {
            this.importCustomRoutes = Objects.requireNonNull(importCustomRoutes);
            return this;
        }
        @CustomType.Setter
        public Builder importSubnetRoutesWithPublicIp(Boolean importSubnetRoutesWithPublicIp) {
            this.importSubnetRoutesWithPublicIp = Objects.requireNonNull(importSubnetRoutesWithPublicIp);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder peerMtu(Integer peerMtu) {
            this.peerMtu = Objects.requireNonNull(peerMtu);
            return this;
        }
        @CustomType.Setter
        public Builder stackType(String stackType) {
            this.stackType = Objects.requireNonNull(stackType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder stateDetails(String stateDetails) {
            this.stateDetails = Objects.requireNonNull(stateDetails);
            return this;
        }
        public NetworkPeeringResponse build() {
            final var o = new NetworkPeeringResponse();
            o.advertisePeerSubnetsViaRouters = advertisePeerSubnetsViaRouters;
            o.autoCreateRoutes = autoCreateRoutes;
            o.exchangeSubnetRoutes = exchangeSubnetRoutes;
            o.exportCustomRoutes = exportCustomRoutes;
            o.exportSubnetRoutesWithPublicIp = exportSubnetRoutesWithPublicIp;
            o.importCustomRoutes = importCustomRoutes;
            o.importSubnetRoutesWithPublicIp = importSubnetRoutesWithPublicIp;
            o.name = name;
            o.network = network;
            o.peerMtu = peerMtu;
            o.stackType = stackType;
            o.state = state;
            o.stateDetails = stateDetails;
            return o;
        }
    }
}
