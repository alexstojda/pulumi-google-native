// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.containeranalysis.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
 * 
 */
public final class AnalysisCompletedArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalysisCompletedArgs Empty = new AnalysisCompletedArgs();

    @Import(name="analysisType")
    private @Nullable Output<List<String>> analysisType;

    public Optional<Output<List<String>>> analysisType() {
        return Optional.ofNullable(this.analysisType);
    }

    private AnalysisCompletedArgs() {}

    private AnalysisCompletedArgs(AnalysisCompletedArgs $) {
        this.analysisType = $.analysisType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalysisCompletedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalysisCompletedArgs $;

        public Builder() {
            $ = new AnalysisCompletedArgs();
        }

        public Builder(AnalysisCompletedArgs defaults) {
            $ = new AnalysisCompletedArgs(Objects.requireNonNull(defaults));
        }

        public Builder analysisType(@Nullable Output<List<String>> analysisType) {
            $.analysisType = analysisType;
            return this;
        }

        public Builder analysisType(List<String> analysisType) {
            return analysisType(Output.of(analysisType));
        }

        public Builder analysisType(String... analysisType) {
            return analysisType(List.of(analysisType));
        }

        public AnalysisCompletedArgs build() {
            return $;
        }
    }

}
