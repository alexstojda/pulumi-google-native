// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.recommendationengine.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.recommendationengine.v1beta1.outputs.GoogleCloudRecommendationengineV1beta1ImageResponse;
import com.pulumi.googlenative.recommendationengine.v1beta1.outputs.GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPriceResponse;
import com.pulumi.googlenative.recommendationengine.v1beta1.outputs.GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRangeResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse {
    /**
     * @return Optional. The available quantity of the item.
     * 
     */
    private String availableQuantity;
    /**
     * @return Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..
     * 
     */
    private String canonicalProductUri;
    /**
     * @return Optional. A map to pass the costs associated with the product. For example: {&#34;manufacturing&#34;: 45.5} The profit of selling this item is computed like so: * If &#39;exactPrice&#39; is provided, profit = displayPrice - sum(costs) * If &#39;priceRange&#39; is provided, profit = minPrice - sum(costs)
     * 
     */
    private Map<String,String> costs;
    /**
     * @return Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.
     * 
     */
    private String currencyCode;
    /**
     * @return Optional. The exact product price.
     * 
     */
    private GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPriceResponse exactPrice;
    /**
     * @return Optional. Product images for the catalog item.
     * 
     */
    private List<GoogleCloudRecommendationengineV1beta1ImageResponse> images;
    /**
     * @return Optional. The product price range.
     * 
     */
    private GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRangeResponse priceRange;
    /**
     * @return Optional. Online stock state of the catalog item. Default is `IN_STOCK`.
     * 
     */
    private String stockState;

    private GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse() {}
    /**
     * @return Optional. The available quantity of the item.
     * 
     */
    public String availableQuantity() {
        return this.availableQuantity;
    }
    /**
     * @return Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..
     * 
     */
    public String canonicalProductUri() {
        return this.canonicalProductUri;
    }
    /**
     * @return Optional. A map to pass the costs associated with the product. For example: {&#34;manufacturing&#34;: 45.5} The profit of selling this item is computed like so: * If &#39;exactPrice&#39; is provided, profit = displayPrice - sum(costs) * If &#39;priceRange&#39; is provided, profit = minPrice - sum(costs)
     * 
     */
    public Map<String,String> costs() {
        return this.costs;
    }
    /**
     * @return Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.
     * 
     */
    public String currencyCode() {
        return this.currencyCode;
    }
    /**
     * @return Optional. The exact product price.
     * 
     */
    public GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPriceResponse exactPrice() {
        return this.exactPrice;
    }
    /**
     * @return Optional. Product images for the catalog item.
     * 
     */
    public List<GoogleCloudRecommendationengineV1beta1ImageResponse> images() {
        return this.images;
    }
    /**
     * @return Optional. The product price range.
     * 
     */
    public GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRangeResponse priceRange() {
        return this.priceRange;
    }
    /**
     * @return Optional. Online stock state of the catalog item. Default is `IN_STOCK`.
     * 
     */
    public String stockState() {
        return this.stockState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availableQuantity;
        private String canonicalProductUri;
        private Map<String,String> costs;
        private String currencyCode;
        private GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPriceResponse exactPrice;
        private List<GoogleCloudRecommendationengineV1beta1ImageResponse> images;
        private GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRangeResponse priceRange;
        private String stockState;
        public Builder() {}
        public Builder(GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableQuantity = defaults.availableQuantity;
    	      this.canonicalProductUri = defaults.canonicalProductUri;
    	      this.costs = defaults.costs;
    	      this.currencyCode = defaults.currencyCode;
    	      this.exactPrice = defaults.exactPrice;
    	      this.images = defaults.images;
    	      this.priceRange = defaults.priceRange;
    	      this.stockState = defaults.stockState;
        }

        @CustomType.Setter
        public Builder availableQuantity(String availableQuantity) {
            this.availableQuantity = Objects.requireNonNull(availableQuantity);
            return this;
        }
        @CustomType.Setter
        public Builder canonicalProductUri(String canonicalProductUri) {
            this.canonicalProductUri = Objects.requireNonNull(canonicalProductUri);
            return this;
        }
        @CustomType.Setter
        public Builder costs(Map<String,String> costs) {
            this.costs = Objects.requireNonNull(costs);
            return this;
        }
        @CustomType.Setter
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = Objects.requireNonNull(currencyCode);
            return this;
        }
        @CustomType.Setter
        public Builder exactPrice(GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPriceResponse exactPrice) {
            this.exactPrice = Objects.requireNonNull(exactPrice);
            return this;
        }
        @CustomType.Setter
        public Builder images(List<GoogleCloudRecommendationengineV1beta1ImageResponse> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }
        public Builder images(GoogleCloudRecommendationengineV1beta1ImageResponse... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder priceRange(GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRangeResponse priceRange) {
            this.priceRange = Objects.requireNonNull(priceRange);
            return this;
        }
        @CustomType.Setter
        public Builder stockState(String stockState) {
            this.stockState = Objects.requireNonNull(stockState);
            return this;
        }
        public GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse build() {
            final var o = new GoogleCloudRecommendationengineV1beta1ProductCatalogItemResponse();
            o.availableQuantity = availableQuantity;
            o.canonicalProductUri = canonicalProductUri;
            o.costs = costs;
            o.currencyCode = currencyCode;
            o.exactPrice = exactPrice;
            o.images = images;
            o.priceRange = priceRange;
            o.stockState = stockState;
            return o;
        }
    }
}
