// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.container.v1beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.container.v1beta1.outputs.PrivateClusterMasterGlobalAccessConfigResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class PrivateClusterConfigResponse {
    /**
     * @return Whether the master&#39;s internal IP address is used as the cluster endpoint.
     * 
     */
    private Boolean enablePrivateEndpoint;
    /**
     * @return Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
     * 
     */
    private Boolean enablePrivateNodes;
    /**
     * @return Controls master global access settings.
     * 
     */
    private PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig;
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
     * 
     */
    private String masterIpv4CidrBlock;
    /**
     * @return The peering name in the customer VPC used by this cluster.
     * 
     */
    private String peeringName;
    /**
     * @return The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    private String privateEndpoint;
    /**
     * @return The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    private String publicEndpoint;

    private PrivateClusterConfigResponse() {}
    /**
     * @return Whether the master&#39;s internal IP address is used as the cluster endpoint.
     * 
     */
    public Boolean enablePrivateEndpoint() {
        return this.enablePrivateEndpoint;
    }
    /**
     * @return Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
     * 
     */
    public Boolean enablePrivateNodes() {
        return this.enablePrivateNodes;
    }
    /**
     * @return Controls master global access settings.
     * 
     */
    public PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig() {
        return this.masterGlobalAccessConfig;
    }
    /**
     * @return The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
     * 
     */
    public String masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }
    /**
     * @return The peering name in the customer VPC used by this cluster.
     * 
     */
    public String peeringName() {
        return this.peeringName;
    }
    /**
     * @return The internal IP address of this cluster&#39;s master endpoint.
     * 
     */
    public String privateEndpoint() {
        return this.privateEndpoint;
    }
    /**
     * @return The external IP address of this cluster&#39;s master endpoint.
     * 
     */
    public String publicEndpoint() {
        return this.publicEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateClusterConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enablePrivateEndpoint;
        private Boolean enablePrivateNodes;
        private PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig;
        private String masterIpv4CidrBlock;
        private String peeringName;
        private String privateEndpoint;
        private String publicEndpoint;
        public Builder() {}
        public Builder(PrivateClusterConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enablePrivateEndpoint = defaults.enablePrivateEndpoint;
    	      this.enablePrivateNodes = defaults.enablePrivateNodes;
    	      this.masterGlobalAccessConfig = defaults.masterGlobalAccessConfig;
    	      this.masterIpv4CidrBlock = defaults.masterIpv4CidrBlock;
    	      this.peeringName = defaults.peeringName;
    	      this.privateEndpoint = defaults.privateEndpoint;
    	      this.publicEndpoint = defaults.publicEndpoint;
        }

        @CustomType.Setter
        public Builder enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
            this.enablePrivateEndpoint = Objects.requireNonNull(enablePrivateEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            this.enablePrivateNodes = Objects.requireNonNull(enablePrivateNodes);
            return this;
        }
        @CustomType.Setter
        public Builder masterGlobalAccessConfig(PrivateClusterMasterGlobalAccessConfigResponse masterGlobalAccessConfig) {
            this.masterGlobalAccessConfig = Objects.requireNonNull(masterGlobalAccessConfig);
            return this;
        }
        @CustomType.Setter
        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            this.masterIpv4CidrBlock = Objects.requireNonNull(masterIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder peeringName(String peeringName) {
            this.peeringName = Objects.requireNonNull(peeringName);
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpoint(String privateEndpoint) {
            this.privateEndpoint = Objects.requireNonNull(privateEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder publicEndpoint(String publicEndpoint) {
            this.publicEndpoint = Objects.requireNonNull(publicEndpoint);
            return this;
        }
        public PrivateClusterConfigResponse build() {
            final var o = new PrivateClusterConfigResponse();
            o.enablePrivateEndpoint = enablePrivateEndpoint;
            o.enablePrivateNodes = enablePrivateNodes;
            o.masterGlobalAccessConfig = masterGlobalAccessConfig;
            o.masterIpv4CidrBlock = masterIpv4CidrBlock;
            o.peeringName = peeringName;
            o.privateEndpoint = privateEndpoint;
            o.publicEndpoint = publicEndpoint;
            return o;
        }
    }
}
