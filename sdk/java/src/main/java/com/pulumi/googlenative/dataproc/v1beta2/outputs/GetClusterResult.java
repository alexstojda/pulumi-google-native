// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.dataproc.v1beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.dataproc.v1beta2.outputs.ClusterConfigResponse;
import com.pulumi.googlenative.dataproc.v1beta2.outputs.ClusterMetricsResponse;
import com.pulumi.googlenative.dataproc.v1beta2.outputs.ClusterStatusResponse;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterResult {
    /**
     * @return The cluster name. Cluster names within a project must be unique. Names of deleted clusters can be reused.
     * 
     */
    private String clusterName;
    /**
     * @return A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.
     * 
     */
    private String clusterUuid;
    /**
     * @return The cluster config. Note that Dataproc may set default values, and values may change when clusters are updated.
     * 
     */
    private ClusterConfigResponse config;
    /**
     * @return Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Contains cluster daemon metrics such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
     * 
     */
    private ClusterMetricsResponse metrics;
    /**
     * @return The Google Cloud Platform project ID that the cluster belongs to.
     * 
     */
    private String project;
    /**
     * @return Cluster status.
     * 
     */
    private ClusterStatusResponse status;
    /**
     * @return The previous cluster status.
     * 
     */
    private List<ClusterStatusResponse> statusHistory;

    private GetClusterResult() {}
    /**
     * @return The cluster name. Cluster names within a project must be unique. Names of deleted clusters can be reused.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.
     * 
     */
    public String clusterUuid() {
        return this.clusterUuid;
    }
    /**
     * @return The cluster config. Note that Dataproc may set default values, and values may change when clusters are updated.
     * 
     */
    public ClusterConfigResponse config() {
        return this.config;
    }
    /**
     * @return Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Contains cluster daemon metrics such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
     * 
     */
    public ClusterMetricsResponse metrics() {
        return this.metrics;
    }
    /**
     * @return The Google Cloud Platform project ID that the cluster belongs to.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Cluster status.
     * 
     */
    public ClusterStatusResponse status() {
        return this.status;
    }
    /**
     * @return The previous cluster status.
     * 
     */
    public List<ClusterStatusResponse> statusHistory() {
        return this.statusHistory;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterName;
        private String clusterUuid;
        private ClusterConfigResponse config;
        private Map<String,String> labels;
        private ClusterMetricsResponse metrics;
        private String project;
        private ClusterStatusResponse status;
        private List<ClusterStatusResponse> statusHistory;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterName = defaults.clusterName;
    	      this.clusterUuid = defaults.clusterUuid;
    	      this.config = defaults.config;
    	      this.labels = defaults.labels;
    	      this.metrics = defaults.metrics;
    	      this.project = defaults.project;
    	      this.status = defaults.status;
    	      this.statusHistory = defaults.statusHistory;
        }

        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            this.clusterName = Objects.requireNonNull(clusterName);
            return this;
        }
        @CustomType.Setter
        public Builder clusterUuid(String clusterUuid) {
            this.clusterUuid = Objects.requireNonNull(clusterUuid);
            return this;
        }
        @CustomType.Setter
        public Builder config(ClusterConfigResponse config) {
            this.config = Objects.requireNonNull(config);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder metrics(ClusterMetricsResponse metrics) {
            this.metrics = Objects.requireNonNull(metrics);
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            this.project = Objects.requireNonNull(project);
            return this;
        }
        @CustomType.Setter
        public Builder status(ClusterStatusResponse status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder statusHistory(List<ClusterStatusResponse> statusHistory) {
            this.statusHistory = Objects.requireNonNull(statusHistory);
            return this;
        }
        public Builder statusHistory(ClusterStatusResponse... statusHistory) {
            return statusHistory(List.of(statusHistory));
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.clusterName = clusterName;
            o.clusterUuid = clusterUuid;
            o.config = config;
            o.labels = labels;
            o.metrics = metrics;
            o.project = project;
            o.status = status;
            o.statusHistory = statusHistory;
            return o;
        }
    }
}
