// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.appengine.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ReadinessCheckResponse {
    /**
     * @return A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
     * 
     */
    private String appStartTimeout;
    /**
     * @return Interval between health checks.
     * 
     */
    private String checkInterval;
    /**
     * @return Number of consecutive failed checks required before removing traffic.
     * 
     */
    private Integer failureThreshold;
    /**
     * @return Host header to send when performing a HTTP Readiness check. Example: &#34;myapp.appspot.com&#34;
     * 
     */
    private String host;
    /**
     * @return The request path.
     * 
     */
    private String path;
    /**
     * @return Number of consecutive successful checks required before receiving traffic.
     * 
     */
    private Integer successThreshold;
    /**
     * @return Time before the check is considered failed.
     * 
     */
    private String timeout;

    private ReadinessCheckResponse() {}
    /**
     * @return A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
     * 
     */
    public String appStartTimeout() {
        return this.appStartTimeout;
    }
    /**
     * @return Interval between health checks.
     * 
     */
    public String checkInterval() {
        return this.checkInterval;
    }
    /**
     * @return Number of consecutive failed checks required before removing traffic.
     * 
     */
    public Integer failureThreshold() {
        return this.failureThreshold;
    }
    /**
     * @return Host header to send when performing a HTTP Readiness check. Example: &#34;myapp.appspot.com&#34;
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The request path.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Number of consecutive successful checks required before receiving traffic.
     * 
     */
    public Integer successThreshold() {
        return this.successThreshold;
    }
    /**
     * @return Time before the check is considered failed.
     * 
     */
    public String timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReadinessCheckResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appStartTimeout;
        private String checkInterval;
        private Integer failureThreshold;
        private String host;
        private String path;
        private Integer successThreshold;
        private String timeout;
        public Builder() {}
        public Builder(ReadinessCheckResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appStartTimeout = defaults.appStartTimeout;
    	      this.checkInterval = defaults.checkInterval;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.successThreshold = defaults.successThreshold;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder appStartTimeout(String appStartTimeout) {
            this.appStartTimeout = Objects.requireNonNull(appStartTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder checkInterval(String checkInterval) {
            this.checkInterval = Objects.requireNonNull(checkInterval);
            return this;
        }
        @CustomType.Setter
        public Builder failureThreshold(Integer failureThreshold) {
            this.failureThreshold = Objects.requireNonNull(failureThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(Integer successThreshold) {
            this.successThreshold = Objects.requireNonNull(successThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public ReadinessCheckResponse build() {
            final var o = new ReadinessCheckResponse();
            o.appStartTimeout = appStartTimeout;
            o.checkInterval = checkInterval;
            o.failureThreshold = failureThreshold;
            o.host = host;
            o.path = path;
            o.successThreshold = successThreshold;
            o.timeout = timeout;
            return o;
        }
    }
}
