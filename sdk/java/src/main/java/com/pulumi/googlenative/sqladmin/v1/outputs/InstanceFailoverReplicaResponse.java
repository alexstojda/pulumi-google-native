// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.sqladmin.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class InstanceFailoverReplicaResponse {
    /**
     * @return The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
     * 
     */
    private Boolean available;
    /**
     * @return The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn&#39;t include the project ID.
     * 
     */
    private String name;

    private InstanceFailoverReplicaResponse() {}
    /**
     * @return The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
     * 
     */
    public Boolean available() {
        return this.available;
    }
    /**
     * @return The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn&#39;t include the project ID.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceFailoverReplicaResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean available;
        private String name;
        public Builder() {}
        public Builder(InstanceFailoverReplicaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.available = defaults.available;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder available(Boolean available) {
            this.available = Objects.requireNonNull(available);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public InstanceFailoverReplicaResponse build() {
            final var o = new InstanceFailoverReplicaResponse();
            o.available = available;
            o.name = name;
            return o;
        }
    }
}
