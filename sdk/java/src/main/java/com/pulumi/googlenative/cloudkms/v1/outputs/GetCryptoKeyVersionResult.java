// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.cloudkms.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.cloudkms.v1.outputs.ExternalProtectionLevelOptionsResponse;
import com.pulumi.googlenative.cloudkms.v1.outputs.KeyOperationAttestationResponse;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCryptoKeyVersionResult {
    /**
     * @return The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    private String algorithm;
    /**
     * @return Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
     * 
     */
    private KeyOperationAttestationResponse attestation;
    /**
     * @return The time at which this CryptoKeyVersion was created.
     * 
     */
    private String createTime;
    /**
     * @return The time this CryptoKeyVersion&#39;s key material was destroyed. Only present if state is DESTROYED.
     * 
     */
    private String destroyEventTime;
    /**
     * @return The time this CryptoKeyVersion&#39;s key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
     * 
     */
    private String destroyTime;
    /**
     * @return ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     * 
     */
    private ExternalProtectionLevelOptionsResponse externalProtectionLevelOptions;
    /**
     * @return The time this CryptoKeyVersion&#39;s key material was generated.
     * 
     */
    private String generateTime;
    /**
     * @return The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
     * 
     */
    private String importFailureReason;
    /**
     * @return The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
     * 
     */
    private String importJob;
    /**
     * @return The time at which this CryptoKeyVersion&#39;s key material was most recently imported.
     * 
     */
    private String importTime;
    /**
     * @return The resource name for this CryptoKeyVersion in the format `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*{@literal /}cryptoKeyVersions/*`.
     * 
     */
    private String name;
    /**
     * @return The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     * 
     */
    private String protectionLevel;
    /**
     * @return Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
     * 
     */
    private Boolean reimportEligible;
    /**
     * @return The current state of the CryptoKeyVersion.
     * 
     */
    private String state;

    private GetCryptoKeyVersionResult() {}
    /**
     * @return The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
     * 
     */
    public KeyOperationAttestationResponse attestation() {
        return this.attestation;
    }
    /**
     * @return The time at which this CryptoKeyVersion was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return The time this CryptoKeyVersion&#39;s key material was destroyed. Only present if state is DESTROYED.
     * 
     */
    public String destroyEventTime() {
        return this.destroyEventTime;
    }
    /**
     * @return The time this CryptoKeyVersion&#39;s key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
     * 
     */
    public String destroyTime() {
        return this.destroyTime;
    }
    /**
     * @return ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     * 
     */
    public ExternalProtectionLevelOptionsResponse externalProtectionLevelOptions() {
        return this.externalProtectionLevelOptions;
    }
    /**
     * @return The time this CryptoKeyVersion&#39;s key material was generated.
     * 
     */
    public String generateTime() {
        return this.generateTime;
    }
    /**
     * @return The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
     * 
     */
    public String importFailureReason() {
        return this.importFailureReason;
    }
    /**
     * @return The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
     * 
     */
    public String importJob() {
        return this.importJob;
    }
    /**
     * @return The time at which this CryptoKeyVersion&#39;s key material was most recently imported.
     * 
     */
    public String importTime() {
        return this.importTime;
    }
    /**
     * @return The resource name for this CryptoKeyVersion in the format `projects/*{@literal /}locations/*{@literal /}keyRings/*{@literal /}cryptoKeys/*{@literal /}cryptoKeyVersions/*`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     * 
     */
    public String protectionLevel() {
        return this.protectionLevel;
    }
    /**
     * @return Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
     * 
     */
    public Boolean reimportEligible() {
        return this.reimportEligible;
    }
    /**
     * @return The current state of the CryptoKeyVersion.
     * 
     */
    public String state() {
        return this.state;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoKeyVersionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private KeyOperationAttestationResponse attestation;
        private String createTime;
        private String destroyEventTime;
        private String destroyTime;
        private ExternalProtectionLevelOptionsResponse externalProtectionLevelOptions;
        private String generateTime;
        private String importFailureReason;
        private String importJob;
        private String importTime;
        private String name;
        private String protectionLevel;
        private Boolean reimportEligible;
        private String state;
        public Builder() {}
        public Builder(GetCryptoKeyVersionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.attestation = defaults.attestation;
    	      this.createTime = defaults.createTime;
    	      this.destroyEventTime = defaults.destroyEventTime;
    	      this.destroyTime = defaults.destroyTime;
    	      this.externalProtectionLevelOptions = defaults.externalProtectionLevelOptions;
    	      this.generateTime = defaults.generateTime;
    	      this.importFailureReason = defaults.importFailureReason;
    	      this.importJob = defaults.importJob;
    	      this.importTime = defaults.importTime;
    	      this.name = defaults.name;
    	      this.protectionLevel = defaults.protectionLevel;
    	      this.reimportEligible = defaults.reimportEligible;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            this.algorithm = Objects.requireNonNull(algorithm);
            return this;
        }
        @CustomType.Setter
        public Builder attestation(KeyOperationAttestationResponse attestation) {
            this.attestation = Objects.requireNonNull(attestation);
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        @CustomType.Setter
        public Builder destroyEventTime(String destroyEventTime) {
            this.destroyEventTime = Objects.requireNonNull(destroyEventTime);
            return this;
        }
        @CustomType.Setter
        public Builder destroyTime(String destroyTime) {
            this.destroyTime = Objects.requireNonNull(destroyTime);
            return this;
        }
        @CustomType.Setter
        public Builder externalProtectionLevelOptions(ExternalProtectionLevelOptionsResponse externalProtectionLevelOptions) {
            this.externalProtectionLevelOptions = Objects.requireNonNull(externalProtectionLevelOptions);
            return this;
        }
        @CustomType.Setter
        public Builder generateTime(String generateTime) {
            this.generateTime = Objects.requireNonNull(generateTime);
            return this;
        }
        @CustomType.Setter
        public Builder importFailureReason(String importFailureReason) {
            this.importFailureReason = Objects.requireNonNull(importFailureReason);
            return this;
        }
        @CustomType.Setter
        public Builder importJob(String importJob) {
            this.importJob = Objects.requireNonNull(importJob);
            return this;
        }
        @CustomType.Setter
        public Builder importTime(String importTime) {
            this.importTime = Objects.requireNonNull(importTime);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder protectionLevel(String protectionLevel) {
            this.protectionLevel = Objects.requireNonNull(protectionLevel);
            return this;
        }
        @CustomType.Setter
        public Builder reimportEligible(Boolean reimportEligible) {
            this.reimportEligible = Objects.requireNonNull(reimportEligible);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public GetCryptoKeyVersionResult build() {
            final var o = new GetCryptoKeyVersionResult();
            o.algorithm = algorithm;
            o.attestation = attestation;
            o.createTime = createTime;
            o.destroyEventTime = destroyEventTime;
            o.destroyTime = destroyTime;
            o.externalProtectionLevelOptions = externalProtectionLevelOptions;
            o.generateTime = generateTime;
            o.importFailureReason = importFailureReason;
            o.importJob = importJob;
            o.importTime = importTime;
            o.name = name;
            o.protectionLevel = protectionLevel;
            o.reimportEligible = reimportEligible;
            o.state = state;
            return o;
        }
    }
}
