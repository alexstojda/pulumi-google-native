// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.run.v2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2ContainerResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2RevisionScalingResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2VolumeResponse;
import com.pulumi.googlenative.run.v2.outputs.GoogleCloudRunV2VpcAccessResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GoogleCloudRunV2RevisionTemplateResponse {
    /**
     * @return KRM-style annotations for the resource.
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return Holds the single container that defines the unit of execution for this Revision.
     * 
     */
    private List<GoogleCloudRunV2ContainerResponse> containers;
    /**
     * @return A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     * 
     */
    private String encryptionKey;
    /**
     * @return The sandbox environment to host this Revision.
     * 
     */
    private String executionEnvironment;
    /**
     * @return KRM-style labels for the resource.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Sets the maximum number of requests that each serving instance can receive.
     * 
     */
    private Integer maxInstanceRequestConcurrency;
    /**
     * @return The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
     * 
     */
    private String revision;
    /**
     * @return Scaling settings for this Revision.
     * 
     */
    private GoogleCloudRunV2RevisionScalingResponse scaling;
    /**
     * @return Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
     * 
     */
    private String serviceAccount;
    /**
     * @return Max allowed time for an instance to respond to a request.
     * 
     */
    private String timeout;
    /**
     * @return A list of Volumes to make available to containers.
     * 
     */
    private List<GoogleCloudRunV2VolumeResponse> volumes;
    /**
     * @return VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     * 
     */
    private GoogleCloudRunV2VpcAccessResponse vpcAccess;

    private GoogleCloudRunV2RevisionTemplateResponse() {}
    /**
     * @return KRM-style annotations for the resource.
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return Holds the single container that defines the unit of execution for this Revision.
     * 
     */
    public List<GoogleCloudRunV2ContainerResponse> containers() {
        return this.containers;
    }
    /**
     * @return A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     * 
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }
    /**
     * @return The sandbox environment to host this Revision.
     * 
     */
    public String executionEnvironment() {
        return this.executionEnvironment;
    }
    /**
     * @return KRM-style labels for the resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Sets the maximum number of requests that each serving instance can receive.
     * 
     */
    public Integer maxInstanceRequestConcurrency() {
        return this.maxInstanceRequestConcurrency;
    }
    /**
     * @return The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
     * 
     */
    public String revision() {
        return this.revision;
    }
    /**
     * @return Scaling settings for this Revision.
     * 
     */
    public GoogleCloudRunV2RevisionScalingResponse scaling() {
        return this.scaling;
    }
    /**
     * @return Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return Max allowed time for an instance to respond to a request.
     * 
     */
    public String timeout() {
        return this.timeout;
    }
    /**
     * @return A list of Volumes to make available to containers.
     * 
     */
    public List<GoogleCloudRunV2VolumeResponse> volumes() {
        return this.volumes;
    }
    /**
     * @return VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     * 
     */
    public GoogleCloudRunV2VpcAccessResponse vpcAccess() {
        return this.vpcAccess;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GoogleCloudRunV2RevisionTemplateResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private List<GoogleCloudRunV2ContainerResponse> containers;
        private String encryptionKey;
        private String executionEnvironment;
        private Map<String,String> labels;
        private Integer maxInstanceRequestConcurrency;
        private String revision;
        private GoogleCloudRunV2RevisionScalingResponse scaling;
        private String serviceAccount;
        private String timeout;
        private List<GoogleCloudRunV2VolumeResponse> volumes;
        private GoogleCloudRunV2VpcAccessResponse vpcAccess;
        public Builder() {}
        public Builder(GoogleCloudRunV2RevisionTemplateResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.containers = defaults.containers;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.executionEnvironment = defaults.executionEnvironment;
    	      this.labels = defaults.labels;
    	      this.maxInstanceRequestConcurrency = defaults.maxInstanceRequestConcurrency;
    	      this.revision = defaults.revision;
    	      this.scaling = defaults.scaling;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.timeout = defaults.timeout;
    	      this.volumes = defaults.volumes;
    	      this.vpcAccess = defaults.vpcAccess;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder containers(List<GoogleCloudRunV2ContainerResponse> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }
        public Builder containers(GoogleCloudRunV2ContainerResponse... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder encryptionKey(String encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        @CustomType.Setter
        public Builder executionEnvironment(String executionEnvironment) {
            this.executionEnvironment = Objects.requireNonNull(executionEnvironment);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder maxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
            this.maxInstanceRequestConcurrency = Objects.requireNonNull(maxInstanceRequestConcurrency);
            return this;
        }
        @CustomType.Setter
        public Builder revision(String revision) {
            this.revision = Objects.requireNonNull(revision);
            return this;
        }
        @CustomType.Setter
        public Builder scaling(GoogleCloudRunV2RevisionScalingResponse scaling) {
            this.scaling = Objects.requireNonNull(scaling);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(String timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GoogleCloudRunV2VolumeResponse> volumes) {
            this.volumes = Objects.requireNonNull(volumes);
            return this;
        }
        public Builder volumes(GoogleCloudRunV2VolumeResponse... volumes) {
            return volumes(List.of(volumes));
        }
        @CustomType.Setter
        public Builder vpcAccess(GoogleCloudRunV2VpcAccessResponse vpcAccess) {
            this.vpcAccess = Objects.requireNonNull(vpcAccess);
            return this;
        }
        public GoogleCloudRunV2RevisionTemplateResponse build() {
            final var o = new GoogleCloudRunV2RevisionTemplateResponse();
            o.annotations = annotations;
            o.containers = containers;
            o.encryptionKey = encryptionKey;
            o.executionEnvironment = executionEnvironment;
            o.labels = labels;
            o.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
            o.revision = revision;
            o.scaling = scaling;
            o.serviceAccount = serviceAccount;
            o.timeout = timeout;
            o.volumes = volumes;
            o.vpcAccess = vpcAccess;
            return o;
        }
    }
}
