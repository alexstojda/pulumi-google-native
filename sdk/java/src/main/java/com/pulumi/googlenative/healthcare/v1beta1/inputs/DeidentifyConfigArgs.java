// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.healthcare.v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.AnnotationConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.DeidentifyOperationMetadataArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.DicomConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.FhirConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.ImageConfigArgs;
import com.pulumi.googlenative.healthcare.v1beta1.inputs.TextConfigArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
 * 
 */
public final class DeidentifyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeidentifyConfigArgs Empty = new DeidentifyConfigArgs();

    /**
     * Configures how annotations, meaning that the location and infoType of sensitive information findings, are created during de-identification. If unspecified, no annotations are created.
     * 
     */
    @Import(name="annotation")
    private @Nullable Output<AnnotationConfigArgs> annotation;

    /**
     * @return Configures how annotations, meaning that the location and infoType of sensitive information findings, are created during de-identification. If unspecified, no annotations are created.
     * 
     */
    public Optional<Output<AnnotationConfigArgs>> annotation() {
        return Optional.ofNullable(this.annotation);
    }

    /**
     * Configures de-id of application/DICOM content.
     * 
     */
    @Import(name="dicom")
    private @Nullable Output<DicomConfigArgs> dicom;

    /**
     * @return Configures de-id of application/DICOM content.
     * 
     */
    public Optional<Output<DicomConfigArgs>> dicom() {
        return Optional.ofNullable(this.dicom);
    }

    /**
     * Configures de-id of application/FHIR content.
     * 
     */
    @Import(name="fhir")
    private @Nullable Output<FhirConfigArgs> fhir;

    /**
     * @return Configures de-id of application/FHIR content.
     * 
     */
    public Optional<Output<FhirConfigArgs>> fhir() {
        return Optional.ofNullable(this.fhir);
    }

    /**
     * Configures de-identification of image pixels wherever they are found in the source_dataset.
     * 
     */
    @Import(name="image")
    private @Nullable Output<ImageConfigArgs> image;

    /**
     * @return Configures de-identification of image pixels wherever they are found in the source_dataset.
     * 
     */
    public Optional<Output<ImageConfigArgs>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Details about the work the de-identify operation performed.
     * 
     */
    @Import(name="operationMetadata")
    private @Nullable Output<DeidentifyOperationMetadataArgs> operationMetadata;

    /**
     * @return Details about the work the de-identify operation performed.
     * 
     */
    public Optional<Output<DeidentifyOperationMetadataArgs>> operationMetadata() {
        return Optional.ofNullable(this.operationMetadata);
    }

    /**
     * Configures de-identification of text wherever it is found in the source_dataset.
     * 
     */
    @Import(name="text")
    private @Nullable Output<TextConfigArgs> text;

    /**
     * @return Configures de-identification of text wherever it is found in the source_dataset.
     * 
     */
    public Optional<Output<TextConfigArgs>> text() {
        return Optional.ofNullable(this.text);
    }

    private DeidentifyConfigArgs() {}

    private DeidentifyConfigArgs(DeidentifyConfigArgs $) {
        this.annotation = $.annotation;
        this.dicom = $.dicom;
        this.fhir = $.fhir;
        this.image = $.image;
        this.operationMetadata = $.operationMetadata;
        this.text = $.text;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeidentifyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeidentifyConfigArgs $;

        public Builder() {
            $ = new DeidentifyConfigArgs();
        }

        public Builder(DeidentifyConfigArgs defaults) {
            $ = new DeidentifyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotation Configures how annotations, meaning that the location and infoType of sensitive information findings, are created during de-identification. If unspecified, no annotations are created.
         * 
         * @return builder
         * 
         */
        public Builder annotation(@Nullable Output<AnnotationConfigArgs> annotation) {
            $.annotation = annotation;
            return this;
        }

        /**
         * @param annotation Configures how annotations, meaning that the location and infoType of sensitive information findings, are created during de-identification. If unspecified, no annotations are created.
         * 
         * @return builder
         * 
         */
        public Builder annotation(AnnotationConfigArgs annotation) {
            return annotation(Output.of(annotation));
        }

        /**
         * @param dicom Configures de-id of application/DICOM content.
         * 
         * @return builder
         * 
         */
        public Builder dicom(@Nullable Output<DicomConfigArgs> dicom) {
            $.dicom = dicom;
            return this;
        }

        /**
         * @param dicom Configures de-id of application/DICOM content.
         * 
         * @return builder
         * 
         */
        public Builder dicom(DicomConfigArgs dicom) {
            return dicom(Output.of(dicom));
        }

        /**
         * @param fhir Configures de-id of application/FHIR content.
         * 
         * @return builder
         * 
         */
        public Builder fhir(@Nullable Output<FhirConfigArgs> fhir) {
            $.fhir = fhir;
            return this;
        }

        /**
         * @param fhir Configures de-id of application/FHIR content.
         * 
         * @return builder
         * 
         */
        public Builder fhir(FhirConfigArgs fhir) {
            return fhir(Output.of(fhir));
        }

        /**
         * @param image Configures de-identification of image pixels wherever they are found in the source_dataset.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<ImageConfigArgs> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Configures de-identification of image pixels wherever they are found in the source_dataset.
         * 
         * @return builder
         * 
         */
        public Builder image(ImageConfigArgs image) {
            return image(Output.of(image));
        }

        /**
         * @param operationMetadata Details about the work the de-identify operation performed.
         * 
         * @return builder
         * 
         */
        public Builder operationMetadata(@Nullable Output<DeidentifyOperationMetadataArgs> operationMetadata) {
            $.operationMetadata = operationMetadata;
            return this;
        }

        /**
         * @param operationMetadata Details about the work the de-identify operation performed.
         * 
         * @return builder
         * 
         */
        public Builder operationMetadata(DeidentifyOperationMetadataArgs operationMetadata) {
            return operationMetadata(Output.of(operationMetadata));
        }

        /**
         * @param text Configures de-identification of text wherever it is found in the source_dataset.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<TextConfigArgs> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text Configures de-identification of text wherever it is found in the source_dataset.
         * 
         * @return builder
         * 
         */
        public Builder text(TextConfigArgs text) {
            return text(Output.of(text));
        }

        public DeidentifyConfigArgs build() {
            return $;
        }
    }

}
