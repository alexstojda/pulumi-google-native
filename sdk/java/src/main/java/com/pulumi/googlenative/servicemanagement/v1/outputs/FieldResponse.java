// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.googlenative.servicemanagement.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.googlenative.servicemanagement.v1.outputs.OptionResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class FieldResponse {
    /**
     * @return The field cardinality.
     * 
     */
    private String cardinality;
    /**
     * @return The string value of the default value of this field. Proto2 syntax only.
     * 
     */
    private String defaultValue;
    /**
     * @return The field JSON name.
     * 
     */
    private String jsonName;
    /**
     * @return The field type.
     * 
     */
    private String kind;
    /**
     * @return The field name.
     * 
     */
    private String name;
    /**
     * @return The field number.
     * 
     */
    private Integer number;
    /**
     * @return The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
     * 
     */
    private Integer oneofIndex;
    /**
     * @return The protocol buffer options.
     * 
     */
    private List<OptionResponse> options;
    /**
     * @return Whether to use alternative packed wire representation.
     * 
     */
    private Boolean packed;
    /**
     * @return The field type URL, without the scheme, for message or enumeration types. Example: `&#34;type.googleapis.com/google.protobuf.Timestamp&#34;`.
     * 
     */
    private String typeUrl;

    private FieldResponse() {}
    /**
     * @return The field cardinality.
     * 
     */
    public String cardinality() {
        return this.cardinality;
    }
    /**
     * @return The string value of the default value of this field. Proto2 syntax only.
     * 
     */
    public String defaultValue() {
        return this.defaultValue;
    }
    /**
     * @return The field JSON name.
     * 
     */
    public String jsonName() {
        return this.jsonName;
    }
    /**
     * @return The field type.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The field name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The field number.
     * 
     */
    public Integer number() {
        return this.number;
    }
    /**
     * @return The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
     * 
     */
    public Integer oneofIndex() {
        return this.oneofIndex;
    }
    /**
     * @return The protocol buffer options.
     * 
     */
    public List<OptionResponse> options() {
        return this.options;
    }
    /**
     * @return Whether to use alternative packed wire representation.
     * 
     */
    public Boolean packed() {
        return this.packed;
    }
    /**
     * @return The field type URL, without the scheme, for message or enumeration types. Example: `&#34;type.googleapis.com/google.protobuf.Timestamp&#34;`.
     * 
     */
    public String typeUrl() {
        return this.typeUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FieldResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cardinality;
        private String defaultValue;
        private String jsonName;
        private String kind;
        private String name;
        private Integer number;
        private Integer oneofIndex;
        private List<OptionResponse> options;
        private Boolean packed;
        private String typeUrl;
        public Builder() {}
        public Builder(FieldResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cardinality = defaults.cardinality;
    	      this.defaultValue = defaults.defaultValue;
    	      this.jsonName = defaults.jsonName;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.oneofIndex = defaults.oneofIndex;
    	      this.options = defaults.options;
    	      this.packed = defaults.packed;
    	      this.typeUrl = defaults.typeUrl;
        }

        @CustomType.Setter
        public Builder cardinality(String cardinality) {
            this.cardinality = Objects.requireNonNull(cardinality);
            return this;
        }
        @CustomType.Setter
        public Builder defaultValue(String defaultValue) {
            this.defaultValue = Objects.requireNonNull(defaultValue);
            return this;
        }
        @CustomType.Setter
        public Builder jsonName(String jsonName) {
            this.jsonName = Objects.requireNonNull(jsonName);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            this.number = Objects.requireNonNull(number);
            return this;
        }
        @CustomType.Setter
        public Builder oneofIndex(Integer oneofIndex) {
            this.oneofIndex = Objects.requireNonNull(oneofIndex);
            return this;
        }
        @CustomType.Setter
        public Builder options(List<OptionResponse> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder options(OptionResponse... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder packed(Boolean packed) {
            this.packed = Objects.requireNonNull(packed);
            return this;
        }
        @CustomType.Setter
        public Builder typeUrl(String typeUrl) {
            this.typeUrl = Objects.requireNonNull(typeUrl);
            return this;
        }
        public FieldResponse build() {
            final var o = new FieldResponse();
            o.cardinality = cardinality;
            o.defaultValue = defaultValue;
            o.jsonName = jsonName;
            o.kind = kind;
            o.name = name;
            o.number = number;
            o.oneofIndex = oneofIndex;
            o.options = options;
            o.packed = packed;
            o.typeUrl = typeUrl;
            return o;
        }
    }
}
