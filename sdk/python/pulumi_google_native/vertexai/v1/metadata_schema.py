# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = ['MetadataSchemaArgs', 'MetadataSchema']

@pulumi.input_type
class MetadataSchemaArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 metadata_store: pulumi.Input[str],
                 name: pulumi.Input[str],
                 project: pulumi.Input[str],
                 schema: pulumi.Input[str],
                 schema_type: pulumi.Input['MetadataSchemaSchemaTypeEnum'],
                 schema_version: pulumi.Input[str]):
        """
        The set of arguments for constructing a MetadataSchema resource.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] metadata_store: The metadata store for the resource
        :param pulumi.Input[str] name: Output only. The resource name of the MetadataSchema.
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input[str] schema: Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
        :param pulumi.Input['MetadataSchemaSchemaTypeEnum'] schema_type: The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: METADATA_SCHEMA_TYPE_UNSPECIFIED, ARTIFACT_TYPE, EXECUTION_TYPE, CONTEXT_TYPE
        :param pulumi.Input[str] schema_version: The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "metadata_store", metadata_store)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "schema_type", schema_type)
        pulumi.set(__self__, "schema_version", schema_version)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="metadataStore")
    def metadata_store(self) -> pulumi.Input[str]:
        """
        The metadata store for the resource
        """
        return pulumi.get(self, "metadata_store")

    @metadata_store.setter
    def metadata_store(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_store", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Output only. The resource name of the MetadataSchema.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        """
        Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> pulumi.Input['MetadataSchemaSchemaTypeEnum']:
        """
        The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: METADATA_SCHEMA_TYPE_UNSPECIFIED, ARTIFACT_TYPE, EXECUTION_TYPE, CONTEXT_TYPE
        """
        return pulumi.get(self, "schema_type")

    @schema_type.setter
    def schema_type(self, value: pulumi.Input['MetadataSchemaSchemaTypeEnum']):
        pulumi.set(self, "schema_type", value)

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> pulumi.Input[str]:
        """
        The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
        """
        return pulumi.get(self, "schema_version")

    @schema_version.setter
    def schema_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_version", value)


class MetadataSchema(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 metadata_store: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 schema_type: Optional[pulumi.Input['MetadataSchemaSchemaTypeEnum']] = None,
                 schema_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MetadataSchema resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] metadata_store: The metadata store for the resource
        :param pulumi.Input[str] name: Output only. The resource name of the MetadataSchema.
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input[str] schema: Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
        :param pulumi.Input['MetadataSchemaSchemaTypeEnum'] schema_type: The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: METADATA_SCHEMA_TYPE_UNSPECIFIED, ARTIFACT_TYPE, EXECUTION_TYPE, CONTEXT_TYPE
        :param pulumi.Input[str] schema_version: The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetadataSchemaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MetadataSchema resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MetadataSchemaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetadataSchemaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 metadata_store: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 schema_type: Optional[pulumi.Input['MetadataSchemaSchemaTypeEnum']] = None,
                 schema_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetadataSchemaArgs.__new__(MetadataSchemaArgs)

            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if metadata_store is None and not opts.urn:
                raise TypeError("Missing required property 'metadata_store'")
            __props__.__dict__["metadata_store"] = metadata_store
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if schema is None and not opts.urn:
                raise TypeError("Missing required property 'schema'")
            __props__.__dict__["schema"] = schema
            if schema_type is None and not opts.urn:
                raise TypeError("Missing required property 'schema_type'")
            __props__.__dict__["schema_type"] = schema_type
            if schema_version is None and not opts.urn:
                raise TypeError("Missing required property 'schema_version'")
            __props__.__dict__["schema_version"] = schema_version
            __props__.__dict__["create_time"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["create_time", "location", "metadata_store", "name", "project", "schema", "schema_type", "schema_version"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(MetadataSchema, __self__).__init__(
            'google-native:vertexai/v1:MetadataSchema',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MetadataSchema':
        """
        Get an existing MetadataSchema resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MetadataSchemaArgs.__new__(MetadataSchemaArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["metadata_store"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["schema"] = None
        __props__.__dict__["schema_type"] = None
        __props__.__dict__["schema_version"] = None
        return MetadataSchema(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[Optional[str]]:
        """
        Output only. Timestamp when this MetadataSchema was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="metadataStore")
    def metadata_store(self) -> pulumi.Output[Optional[str]]:
        """
        The metadata store for the resource
        """
        return pulumi.get(self, "metadata_store")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        Output only. The resource name of the MetadataSchema.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Output[Optional[str]]:
        """
        Required. The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> pulumi.Output[Optional['MetadataSchemaSchemaTypeEnum']]:
        """
        The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema. Possible values: METADATA_SCHEMA_TYPE_UNSPECIFIED, ARTIFACT_TYPE, EXECUTION_TYPE, CONTEXT_TYPE
        """
        return pulumi.get(self, "schema_type")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> pulumi.Output[Optional[str]]:
        """
        The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
        """
        return pulumi.get(self, "schema_version")

