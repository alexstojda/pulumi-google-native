# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ModelDeploymentArgs', 'ModelDeployment']

@pulumi.input_type
class ModelDeploymentArgs:
    def __init__(__self__, *,
                 dedicated_resources: pulumi.Input['ModelDeploymentDedicatedResourcesArgs'],
                 endpoint: pulumi.Input[str],
                 model: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ModelDeployment resource.
        :param pulumi.Input['ModelDeploymentDedicatedResourcesArgs'] dedicated_resources: A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
        :param pulumi.Input[str] endpoint: The name of the endpoint to deploy to
        :param pulumi.Input[str] model: The name of the model to deploy
        :param pulumi.Input[str] location: The location of the endpoint
        :param pulumi.Input[str] project: The project of the endpoint
        """
        pulumi.set(__self__, "dedicated_resources", dedicated_resources)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "model", model)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> pulumi.Input['ModelDeploymentDedicatedResourcesArgs']:
        """
        A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
        """
        return pulumi.get(self, "dedicated_resources")

    @dedicated_resources.setter
    def dedicated_resources(self, value: pulumi.Input['ModelDeploymentDedicatedResourcesArgs']):
        pulumi.set(self, "dedicated_resources", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The name of the endpoint to deploy to
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[str]:
        """
        The name of the model to deploy
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the endpoint
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project of the endpoint
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class ModelDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_resources: Optional[pulumi.Input[pulumi.InputType['ModelDeploymentDedicatedResourcesArgs']]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ModelDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ModelDeploymentDedicatedResourcesArgs']] dedicated_resources: A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
        :param pulumi.Input[str] endpoint: The name of the endpoint to deploy to
        :param pulumi.Input[str] location: The location of the endpoint
        :param pulumi.Input[str] model: The name of the model to deploy
        :param pulumi.Input[str] project: The project of the endpoint
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModelDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ModelDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ModelDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModelDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dedicated_resources: Optional[pulumi.Input[pulumi.InputType['ModelDeploymentDedicatedResourcesArgs']]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModelDeploymentArgs.__new__(ModelDeploymentArgs)

            if dedicated_resources is None and not opts.urn:
                raise TypeError("Missing required property 'dedicated_resources'")
            __props__.__dict__["dedicated_resources"] = dedicated_resources
            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            __props__.__dict__["location"] = location
            if model is None and not opts.urn:
                raise TypeError("Missing required property 'model'")
            __props__.__dict__["model"] = model
            __props__.__dict__["project"] = project
            __props__.__dict__["deployed_model_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["dedicated_resources", "deployed_model_id", "endpoint", "location", "model", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ModelDeployment, __self__).__init__(
            'google-native:vertexai/v1:ModelDeployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ModelDeployment':
        """
        Get an existing ModelDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ModelDeploymentArgs.__new__(ModelDeploymentArgs)

        __props__.__dict__["dedicated_resources"] = None
        __props__.__dict__["deployed_model_id"] = None
        __props__.__dict__["endpoint"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["model"] = None
        __props__.__dict__["project"] = None
        return ModelDeployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> pulumi.Output[Optional['outputs.ModelDeploymentDedicatedResources']]:
        """
        A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
        """
        return pulumi.get(self, "dedicated_resources")

    @property
    @pulumi.getter(name="deployedModelId")
    def deployed_model_id(self) -> pulumi.Output[Optional[str]]:
        """
        The deployed ID of the model in the endpoint
        """
        return pulumi.get(self, "deployed_model_id")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the endpoint to deploy to
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        The location of the endpoint
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the model to deploy
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project of the endpoint
        """
        return pulumi.get(self, "project")

