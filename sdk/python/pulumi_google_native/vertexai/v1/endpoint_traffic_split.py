# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EndpointTrafficSplitArgs', 'EndpointTrafficSplit']

@pulumi.input_type
class EndpointTrafficSplitArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 location: pulumi.Input[str],
                 project: pulumi.Input[str],
                 traffic_split: pulumi.Input[Sequence[pulumi.Input['EndpointTrafficSplitTrafficSplitArgs']]]):
        """
        The set of arguments for constructing a EndpointTrafficSplit resource.
        :param pulumi.Input[str] endpoint: The endpoint for the resource
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input[Sequence[pulumi.Input['EndpointTrafficSplitTrafficSplitArgs']]] traffic_split: A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "traffic_split", traffic_split)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint for the resource
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="trafficSplit")
    def traffic_split(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointTrafficSplitTrafficSplitArgs']]]:
        """
        A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
        """
        return pulumi.get(self, "traffic_split")

    @traffic_split.setter
    def traffic_split(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointTrafficSplitTrafficSplitArgs']]]):
        pulumi.set(self, "traffic_split", value)


class EndpointTrafficSplit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 traffic_split: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointTrafficSplitTrafficSplitArgs']]]]] = None,
                 __props__=None):
        """
        Create a EndpointTrafficSplit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint: The endpoint for the resource
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointTrafficSplitTrafficSplitArgs']]]] traffic_split: A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndpointTrafficSplitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EndpointTrafficSplit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EndpointTrafficSplitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndpointTrafficSplitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 traffic_split: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EndpointTrafficSplitTrafficSplitArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndpointTrafficSplitArgs.__new__(EndpointTrafficSplitArgs)

            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if traffic_split is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_split'")
            __props__.__dict__["traffic_split"] = traffic_split
            __props__.__dict__["etag"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["endpoint", "etag", "location", "project"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(EndpointTrafficSplit, __self__).__init__(
            'google-native:vertexai/v1:EndpointTrafficSplit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'EndpointTrafficSplit':
        """
        Get an existing EndpointTrafficSplit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EndpointTrafficSplitArgs.__new__(EndpointTrafficSplitArgs)

        __props__.__dict__["endpoint"] = None
        __props__.__dict__["etag"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["traffic_split"] = None
        return EndpointTrafficSplit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        The endpoint for the resource
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[Optional[str]]:
        """
        Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="trafficSplit")
    def traffic_split(self) -> pulumi.Output[Optional[Sequence['outputs.EndpointTrafficSplitTrafficSplit']]]:
        """
        A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.
        """
        return pulumi.get(self, "traffic_split")

